{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"description\", \"disabled\", \"isInvalid\", \"isLoading\", \"name\", \"onRemove\", \"sizeInBytes\", \"src\", \"type\", \"validationMessage\"],\n    _excluded2 = [\"className\"];\nimport React, { memo, forwardRef } from 'react';\nimport humanize from 'humanize-plus';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { IconButton } from '../../buttons';\nimport { useStyleConfig } from '../../hooks';\nimport { InfoSignIcon, TrashIcon } from '../../icons';\nimport { Image } from '../../image';\nimport { Card } from '../../layers';\nimport hasValue from '../../lib/has-value';\nimport isFunction from '../../lib/is-function';\nimport { majorScale } from '../../scales';\nimport { Spinner } from '../../spinner';\nimport { useTheme } from '../../theme';\nimport { Paragraph } from '../../typography';\nimport getIconFromType from './utils/get-icon-from-type';\nimport isImage from './utils/is-image';\nvar imageSize = majorScale(5);\nvar styleModifiers = {};\nvar pseudoSelectors = {\n  _invalid: \"&[aria-invalid='true']\"\n};\nvar internalStyles = {};\nvar FileCard = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (props, ref) {\n  var description = props.description,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$isInvalid = props.isInvalid,\n      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,\n      _props$isLoading = props.isLoading,\n      isLoading = _props$isLoading === void 0 ? false : _props$isLoading,\n      name = props.name,\n      onRemove = props.onRemove,\n      sizeInBytes = props.sizeInBytes,\n      src = props.src,\n      type = props.type,\n      validationMessage = props.validationMessage,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _useStyleConfig = useStyleConfig('FileCard', styleModifiers, pseudoSelectors, internalStyles),\n      className = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var FileTypeIcon = getIconFromType(type);\n  var renderImage = hasValue(src) && isImage(type);\n  var renderInvalidIcon = !isLoading && isInvalid;\n  var renderDefaultIcon = !isLoading && !isInvalid;\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginBottom: isInvalid ? majorScale(1) : majorScale(2)\n  }, /*#__PURE__*/React.createElement(Box, _extends({\n    \"aria-invalid\": isInvalid,\n    className: className\n  }, boxProps, rest), /*#__PURE__*/React.createElement(Box, {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\"\n  }, /*#__PURE__*/React.createElement(Box, {\n    marginLeft: majorScale(2),\n    marginRight: majorScale(1)\n  }, renderImage ? /*#__PURE__*/React.createElement(Image, {\n    height: imageSize,\n    src: src,\n    width: imageSize\n  }) : /*#__PURE__*/React.createElement(Card, {\n    alignItems: \"center\",\n    backgroundColor: isInvalid || isLoading ? undefined : colors.gray90,\n    display: \"flex\",\n    height: majorScale(5),\n    justifyContent: \"center\",\n    width: majorScale(5)\n  }, isLoading && /*#__PURE__*/React.createElement(Spinner, {\n    size: majorScale(2)\n  }), renderInvalidIcon && /*#__PURE__*/React.createElement(InfoSignIcon, {\n    color: colors.red500,\n    size: majorScale(2)\n  }), renderDefaultIcon && /*#__PURE__*/React.createElement(FileTypeIcon, {\n    color: colors.gray600,\n    size: majorScale(2)\n  }))), /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    overflow: \"hidden\"\n  }, /*#__PURE__*/React.createElement(Paragraph, {\n    color: colors.gray800,\n    whiteSpace: \"nowrap\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\"\n  }, name), /*#__PURE__*/React.createElement(Paragraph, {\n    color: colors.gray700,\n    size: 300\n  }, hasValue(description) ? description : humanize.fileSize(sizeInBytes, 0))), isFunction(onRemove) && /*#__PURE__*/React.createElement(IconButton, {\n    appearance: \"minimal\",\n    disabled: disabled || isLoading,\n    icon: TrashIcon,\n    onClick: onRemove,\n    marginLeft: \"auto\",\n    marginRight: majorScale(2),\n    type: \"button\"\n  }))), hasValue(validationMessage) && /*#__PURE__*/React.createElement(Paragraph, {\n    color: colors.red500,\n    size: \"small\"\n  }, validationMessage));\n}));\nFileCard.propTypes = {\n  /**\n   * Description to display under the file name. If not provided, defaults to the file size\n   */\n  description: PropTypes.string,\n\n  /**\n   * Disables the button to remove the file\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * When true, displays the card in an error state\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Sets a loading state on the card. If the remove button is rendered, it will be disabled\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Name of the file to display\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback to be fired when the remove button is clicked. If not provided, the button will not\n   * render\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * Size of the file\n   */\n  sizeInBytes: PropTypes.number,\n\n  /**\n   * Url of the uploaded image\n   */\n  src: PropTypes.string,\n\n  /**\n   * MimeType of the file to display, which controls what type of icon is rendered\n   */\n  type: PropTypes.string,\n\n  /**\n   * Message to display underneath the card\n   */\n  validationMessage: PropTypes.string\n};\nexport default FileCard;","map":{"version":3,"sources":["../../../src/file-uploader/src/FileCard.js"],"names":["imageSize","majorScale","styleModifiers","pseudoSelectors","_invalid","internalStyles","FileCard","memo","forwardRef","description","disabled","isInvalid","isLoading","name","onRemove","sizeInBytes","src","type","validationMessage","rest","props","colors","useTheme","className","boxProps","useStyleConfig","FileTypeIcon","getIconFromType","renderImage","hasValue","isImage","renderInvalidIcon","renderDefaultIcon","humanize","isFunction","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport humanize from 'humanize-plus'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { IconButton } from '../../buttons'\nimport { useStyleConfig } from '../../hooks'\nimport { InfoSignIcon, TrashIcon } from '../../icons'\nimport { Image } from '../../image'\nimport { Card } from '../../layers'\nimport hasValue from '../../lib/has-value'\nimport isFunction from '../../lib/is-function'\nimport { majorScale } from '../../scales'\nimport { Spinner } from '../../spinner'\nimport { useTheme } from '../../theme'\nimport { Paragraph } from '../../typography'\nimport getIconFromType from './utils/get-icon-from-type'\nimport isImage from './utils/is-image'\n\nconst imageSize = majorScale(5)\nconst styleModifiers = {}\nconst pseudoSelectors = {\n  _invalid: `&[aria-invalid='true']`\n}\nconst internalStyles = {}\n\nconst FileCard = memo(\n  forwardRef((props, ref) => {\n    const {\n      description,\n      disabled = false,\n      isInvalid = false,\n      isLoading = false,\n      name,\n      onRemove,\n      sizeInBytes,\n      src,\n      type,\n      validationMessage,\n      ...rest\n    } = props\n\n    const { colors } = useTheme()\n    const { className, ...boxProps } = useStyleConfig('FileCard', styleModifiers, pseudoSelectors, internalStyles)\n\n    const FileTypeIcon = getIconFromType(type)\n    const renderImage = hasValue(src) && isImage(type)\n    const renderInvalidIcon = !isLoading && isInvalid\n    const renderDefaultIcon = !isLoading && !isInvalid\n\n    return (\n      <Box ref={ref} display=\"flex\" flexDirection=\"column\" marginBottom={isInvalid ? majorScale(1) : majorScale(2)}>\n        <Box aria-invalid={isInvalid} className={className} {...boxProps} {...rest}>\n          <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\" width=\"100%\">\n            <Box marginLeft={majorScale(2)} marginRight={majorScale(1)}>\n              {renderImage ? (\n                <Image height={imageSize} src={src} width={imageSize} />\n              ) : (\n                <Card\n                  alignItems=\"center\"\n                  backgroundColor={isInvalid || isLoading ? undefined : colors.gray90}\n                  display=\"flex\"\n                  height={majorScale(5)}\n                  justifyContent=\"center\"\n                  width={majorScale(5)}\n                >\n                  {isLoading && <Spinner size={majorScale(2)} />}\n                  {renderInvalidIcon && <InfoSignIcon color={colors.red500} size={majorScale(2)} />}\n                  {renderDefaultIcon && <FileTypeIcon color={colors.gray600} size={majorScale(2)} />}\n                </Card>\n              )}\n            </Box>\n            <Box display=\"flex\" flexDirection=\"column\" overflow=\"hidden\">\n              <Paragraph color={colors.gray800} whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">\n                {name}\n              </Paragraph>\n              <Paragraph color={colors.gray700} size={300}>\n                {hasValue(description) ? description : humanize.fileSize(sizeInBytes, 0)}\n              </Paragraph>\n            </Box>\n            {isFunction(onRemove) && (\n              <IconButton\n                appearance=\"minimal\"\n                disabled={disabled || isLoading}\n                icon={TrashIcon}\n                onClick={onRemove}\n                marginLeft=\"auto\"\n                marginRight={majorScale(2)}\n                type=\"button\"\n              />\n            )}\n          </Box>\n        </Box>\n        {hasValue(validationMessage) && (\n          <Paragraph color={colors.red500} size=\"small\">\n            {validationMessage}\n          </Paragraph>\n        )}\n      </Box>\n    )\n  })\n)\n\nFileCard.propTypes = {\n  /**\n   * Description to display under the file name. If not provided, defaults to the file size\n   */\n  description: PropTypes.string,\n  /**\n   * Disables the button to remove the file\n   */\n  disabled: PropTypes.bool,\n  /**\n   * When true, displays the card in an error state\n   */\n  isInvalid: PropTypes.bool,\n  /**\n   * Sets a loading state on the card. If the remove button is rendered, it will be disabled\n   */\n  isLoading: PropTypes.bool,\n  /**\n   * Name of the file to display\n   */\n  name: PropTypes.string,\n  /**\n   * Callback to be fired when the remove button is clicked. If not provided, the button will not\n   * render\n   */\n  onRemove: PropTypes.func,\n  /**\n   * Size of the file\n   */\n  sizeInBytes: PropTypes.number,\n  /**\n   * Url of the uploaded image\n   */\n  src: PropTypes.string,\n  /**\n   * MimeType of the file to display, which controls what type of icon is rendered\n   */\n  type: PropTypes.string,\n  /**\n   * Message to display underneath the card\n   */\n  validationMessage: PropTypes.string\n}\n\nexport default FileCard\n"]},"metadata":{},"sourceType":"module"}