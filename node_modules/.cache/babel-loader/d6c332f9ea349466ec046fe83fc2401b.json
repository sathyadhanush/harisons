{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"appearance\", \"children\"],\n    _excluded2 = [\"color\"];\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useStyleConfig } from '../../hooks';\nimport { Pane } from '../../layers';\nimport { Paragraph } from '../../typography';\nvar pseudoSelectors = {};\nvar internalStyles = {};\nvar TooltipStateless = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TooltipStateless(props, ref) {\n  var appearance = props.appearance,\n      children = props.children,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var _useStyleConfig = useStyleConfig('Tooltip', {\n    appearance: appearance\n  }, pseudoSelectors, internalStyles),\n      boxProps = _extends({}, _useStyleConfig);\n\n  var color = boxProps.color,\n      themedProps = _objectWithoutProperties(boxProps, _excluded2);\n\n  var child;\n\n  if (typeof children === 'string') {\n    child = /*#__PURE__*/React.createElement(Paragraph, {\n      color: color,\n      size: 400\n    }, children);\n  } else {\n    child = children;\n  }\n\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    ref: ref\n  }, themedProps, restProps), child);\n}));\nTooltipStateless.propTypes = {\n  children: PropTypes.node,\n\n  /**\n   * The appearance of the tooltip.\n   */\n  appearance: PropTypes.oneOf(['default', 'card']).isRequired\n};\nexport default TooltipStateless;","map":{"version":3,"sources":["../../../src/tooltip/src/TooltipStateless.js"],"names":["pseudoSelectors","internalStyles","TooltipStateless","memo","forwardRef","appearance","children","restProps","props","boxProps","useStyleConfig","color","themedProps","child","ref","PropTypes","isRequired"],"mappings":";;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,cAAA,QAAA,aAAA;AACA,SAAA,IAAA,QAAA,cAAA;AACA,SAAA,SAAA,QAAA,kBAAA;AAEA,IAAMA,eAAe,GAArB,EAAA;AACA,IAAMC,cAAc,GAApB,EAAA;AAEA,IAAMC,gBAAgB,GAAA,aAAGC,IAAI,EAAA,aAC3BC,UAAU,CAAC,SAAA,gBAAA,CAAA,KAAA,EAAA,GAAA,EAAsC;AAC/C,MAAQC,UAAR,GAA+CG,KAA/C,CAAA,UAAA;AAAA,MAAoBF,QAApB,GAA+CE,KAA/C,CAAA,QAAA;AAAA,MAAiCD,SAAjC,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AACA,MAAA,eAAA,GAAwBG,cAAc,CAAA,SAAA,EAAY;AAAEL,IAAAA,UAAU,EAAVA;AAAF,GAAZ,EAAA,eAAA,EAAtC,cAAsC,CAAtC;AAAA,MAAWI,QAAX,GAAA,QAAA,CAAA,EAAA,EAAA,eAAA,CAAA;;AAEA,MAAQE,KAAR,GAAkCF,QAAlC,CAAA,KAAA;AAAA,MAAkBG,WAAlB,GAAA,wBAAA,CAAA,QAAA,EAAA,UAAA,CAAA;;AAEA,MAAA,KAAA;;AACA,MAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AAChCC,IAAAA,KAAK,GAAA,aACH,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,MAAA,KAAK,EAAhB,KAAA;AAAyB,MAAA,IAAI,EAAE;AAA/B,KAAA,EADFA,QACE,CADFA;AADF,GAAA,MAMO;AACLA,IAAAA,KAAK,GAALA,QAAAA;AACD;;AAED,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,IAAA,GAAG,EAAEC;AAAX,GAAA,EAAA,WAAA,EAAA,SAAA,CAAA,EADF,KACE,CADF;AAlBJ,CACY,CADiB,CAA7B;AA0BAZ,gBAAgB,CAAhBA,SAAAA,GAA6B;AAC3BI,EAAAA,QAAQ,EAAES,SAAS,CADQ,IAAA;;AAG3B;AACF;AACA;AACEV,EAAAA,UAAU,EAAEU,SAAS,CAATA,KAAAA,CAAgB,CAAA,SAAA,EAAhBA,MAAgB,CAAhBA,EAAqCC;AANtB,CAA7Bd;AASA,eAAA,gBAAA","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { useStyleConfig } from '../../hooks'\nimport { Pane } from '../../layers'\nimport { Paragraph } from '../../typography'\n\nconst pseudoSelectors = {}\nconst internalStyles = {}\n\nconst TooltipStateless = memo(\n  forwardRef(function TooltipStateless(props, ref) {\n    const { appearance, children, ...restProps } = props\n    const { ...boxProps } = useStyleConfig('Tooltip', { appearance }, pseudoSelectors, internalStyles)\n\n    const { color, ...themedProps } = boxProps\n\n    let child\n    if (typeof children === 'string') {\n      child = (\n        <Paragraph color={color} size={400}>\n          {children}\n        </Paragraph>\n      )\n    } else {\n      child = children\n    }\n\n    return (\n      <Pane ref={ref} {...themedProps} {...restProps}>\n        {child}\n      </Pane>\n    )\n  })\n)\n\nTooltipStateless.propTypes = {\n  children: PropTypes.node,\n\n  /**\n   * The appearance of the tooltip.\n   */\n  appearance: PropTypes.oneOf(['default', 'card']).isRequired\n}\n\nexport default TooltipStateless\n"]},"metadata":{},"sourceType":"module"}