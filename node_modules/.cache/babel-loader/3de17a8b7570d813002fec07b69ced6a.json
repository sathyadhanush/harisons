{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"appearance\", \"children\", \"className\", \"disabled\", \"icon\", \"is\", \"isActive\", \"isLoading\", \"size\"],\n    _excluded2 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box, { dimensions, spacing, position, layout } from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { CaretDownIcon } from '../../icons';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport { Spinner } from '../../spinner';\nimport { internalStyles, pseudoSelectors } from './Button';\nvar TextDropdownButton = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TextDropdownButton(props, ref) {\n  var appearance = props.appearance,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      _props$icon = props.icon,\n      icon = _props$icon === void 0 ? CaretDownIcon : _props$icon,\n      _props$is = props.is,\n      is = _props$is === void 0 ? 'button' : _props$is,\n      _props$isActive = props.isActive,\n      isActive = _props$isActive === void 0 ? false : _props$isActive,\n      isLoading = props.isLoading,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var _useStyleConfig = useStyleConfig('TextDropdownButton', {\n    size: size\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    is: is,\n    ref: ref,\n    type: is === 'button' ? 'button' : undefined,\n    className: cx(themedClassName, className),\n    \"data-active\": isActive || undefined\n  }, boxProps, restProps, {\n    disabled: disabled || isLoading\n  }), isLoading && /*#__PURE__*/React.createElement(Spinner, {\n    marginLeft: -2,\n    marginRight: 4,\n    size: 12\n  }), children, /*#__PURE__*/React.createElement(IconWrapper, {\n    icon: icon,\n    marginLeft: 2,\n    color: \"default\",\n    size: 12\n  }));\n}));\nTextDropdownButton.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * An Evergreen icon or custom icon node. By default it uses CaretDownIcon\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default TextDropdownButton;","map":{"version":3,"sources":["../../../src/buttons/src/TextDropdownButton.js"],"names":["TextDropdownButton","memo","forwardRef","appearance","children","className","disabled","icon","is","isActive","isLoading","size","restProps","props","themedClassName","boxProps","useStyleConfig","cx","undefined","dimensions","spacing","position","layout","PropTypes","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,EAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,GAAA,IAAA,UAAA,EAAA,OAAA,EAAA,QAAA,EAAA,MAAA,QAAA,QAAA;AACA,SAAA,cAAA,QAAA,aAAA;AACA,SAAA,aAAA,QAAA,aAAA;AACA,SAAA,WAAA,QAAA,6BAAA;AACA,SAAA,OAAA,QAAA,eAAA;AACA,SAAA,cAAA,EAAA,eAAA,QAAA,UAAA;AAEA,IAAMA,kBAAkB,GAAA,aAAGC,IAAI,EAAA,aAC7BC,UAAU,CAAC,SAAA,kBAAA,CAAA,KAAA,EAAA,GAAA,EAAwC;AACjD,MACEC,UADF,GAWIU,KAXJ,CAAA,UAAA;AAAA,MAEET,QAFF,GAWIS,KAXJ,CAAA,QAAA;AAAA,MAGER,SAHF,GAWIQ,KAXJ,CAAA,SAAA;AAAA,MAIEP,QAJF,GAWIO,KAXJ,CAAA,QAAA;AAAA,MAAA,WAAA,GAWIA,KAXJ,CAAA,IAAA;AAAA,MAKEN,IALF,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,aAAA,GAAA,WAAA;AAAA,MAAA,SAAA,GAWIM,KAXJ,CAAA,EAAA;AAAA,MAMEL,EANF,GAAA,SAAA,KAAA,KAAA,CAAA,GAAA,QAAA,GAAA,SAAA;AAAA,MAAA,eAAA,GAWIK,KAXJ,CAAA,QAAA;AAAA,MAOEJ,QAPF,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,eAAA;AAAA,MAQEC,SARF,GAWIG,KAXJ,CAAA,SAAA;AAAA,MAAA,WAAA,GAWIA,KAXJ,CAAA,IAAA;AAAA,MASEF,IATF,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,QAAA,GAAA,WAAA;AAAA,MAUKC,SAVL,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AAaA,MAAA,eAAA,GAAoDI,cAAc,CAAA,oBAAA,EAEhE;AAAEL,IAAAA,IAAI,EAAJA;AAAF,GAFgE,EAAA,eAAA,EAAlE,cAAkE,CAAlE;AAAA,MAAmBG,eAAnB,GAAA,eAAA,CAAA,SAAA;AAAA,MAAuCC,QAAvC,GAAA,wBAAA,CAAA,eAAA,EAAA,UAAA,CAAA;;AAOA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,EAAE,EADJ,EAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,IAAI,EAAEP,EAAE,KAAFA,QAAAA,GAAAA,QAAAA,GAHR,SAAA;AAIE,IAAA,SAAS,EAAES,EAAE,CAAA,eAAA,EAJf,SAIe,CAJf;AAKE,mBAAaR,QAAQ,IAAIS;AAL3B,GAAA,EAAA,QAAA,EAAA,SAAA,EAAA;AAQE,IAAA,QAAQ,EAAEZ,QAAQ,IAAII;AARxB,GAAA,CAAA,EAUGA,SAAS,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,IAAA,UAAU,EAAE,CAArB,CAAA;AAAyB,IAAA,WAAW,EAApC,CAAA;AAAyC,IAAA,IAAI,EAAE;AAA/C,GAAA,CAVhB,EAAA,QAAA,EAAA,aAYE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAa,IAAA,IAAI,EAAjB,IAAA;AAAyB,IAAA,UAAU,EAAnC,CAAA;AAAwC,IAAA,KAAK,EAA7C,SAAA;AAAwD,IAAA,IAAI,EAAE;AAA9D,GAAA,CAZF,CADF;AAtBJ,CACY,CADmB,CAA/B;AAyCAV,kBAAkB,CAAlBA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAIKmB,UAAU,CAJfnB,SAAAA,CAAAA,EASKoB,OAAO,CATZpB,SAAAA,CAAAA,EAcKqB,QAAQ,CAdbrB,SAAAA,CAAAA,EAmBKsB,MAAM,CAnBXtB,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAqBE;AACF;AACA;AACA;AACES,EAAAA,QAAQ,EAAEc,SAAS,CAzBrBvB,IAAAA;;AA2BE;AACF;AACA;AACA;AACEM,EAAAA,QAAQ,EAAEiB,SAAS,CA/BrBvB,IAAAA;;AAiCE;AACF;AACA;AACEO,EAAAA,IAAI,EAAEgB,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,WAAA,EAAwBA,SAAS,CApC7DvB,OAoC4B,CAApBuB,CApCRvB;;AAsCE;AACF;AACA;AACA;AACEK,EAAAA,SAAS,EAAEkB,SAAS,CAACC;AA1CvBxB,CAAAA,CAAAA;AA6CA,eAAA,kBAAA","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport Box, { dimensions, spacing, position, layout } from 'ui-box'\nimport { useStyleConfig } from '../../hooks'\nimport { CaretDownIcon } from '../../icons'\nimport { IconWrapper } from '../../icons/src/IconWrapper'\nimport { Spinner } from '../../spinner'\nimport { internalStyles, pseudoSelectors } from './Button'\n\nconst TextDropdownButton = memo(\n  forwardRef(function TextDropdownButton(props, ref) {\n    const {\n      appearance,\n      children,\n      className,\n      disabled,\n      icon = CaretDownIcon,\n      is = 'button',\n      isActive = false,\n      isLoading,\n      size = 'medium',\n      ...restProps\n    } = props\n\n    const { className: themedClassName, ...boxProps } = useStyleConfig(\n      'TextDropdownButton',\n      { size },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    return (\n      <Box\n        is={is}\n        ref={ref}\n        type={is === 'button' ? 'button' : undefined}\n        className={cx(themedClassName, className)}\n        data-active={isActive || undefined}\n        {...boxProps}\n        {...restProps}\n        disabled={disabled || isLoading}\n      >\n        {isLoading && <Spinner marginLeft={-2} marginRight={4} size={12} />}\n        {children}\n        <IconWrapper icon={icon} marginLeft={2} color=\"default\" size={12} />\n      </Box>\n    )\n  })\n)\n\nTextDropdownButton.propTypes = {\n  /**\n   * Composes the dimensions spec from the Box primitive.\n   */\n  ...dimensions.propTypes,\n\n  /**\n   * Composes the spacing spec from the Box primitive.\n   */\n  ...spacing.propTypes,\n\n  /**\n   * Composes the position spec from the Box primitive.\n   */\n  ...position.propTypes,\n\n  /**\n   * Composes the layout spec from the Box primitive.\n   */\n  ...layout.propTypes,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * An Evergreen icon or custom icon node. By default it uses CaretDownIcon\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default TextDropdownButton\n"]},"metadata":{},"sourceType":"module"}