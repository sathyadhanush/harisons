{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"children\", \"size\", \"selectMenuProps\", \"disabled\", \"placeholder\", \"isSelectable\", \"textProps\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, useState, useEffect, useCallback, useMemo } from 'react';\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport { CaretDownIcon } from '../../icons';\nimport { SelectMenu } from '../../select-menu';\nimport TableCell from './TableCell';\nimport TextTableCell from './TextTableCell';\nvar MIN_SELECT_MENU_WIDTH = 240;\nvar emptyProps = {};\nvar SelectMenuCell = /*#__PURE__*/memo(function SelectMenuCell(props) {\n  var _useState = useState(MIN_SELECT_MENU_WIDTH),\n      _useState2 = _slicedToArray(_useState, 2),\n      targetWidth = _useState2[0],\n      setTargetWidth = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shouldClickToggle = _useState4[0],\n      setShouldClickToggle = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFocused = _useState6[0],\n      setIsFocused = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      mainRef = _useState8[0],\n      setMainRef = _useState8[1];\n\n  var children = props.children,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 300 : _props$size,\n      selectMenuProps = props.selectMenuProps,\n      disabled = props.disabled,\n      placeholder = props.placeholder,\n      _props$isSelectable = props.isSelectable,\n      isSelectable = _props$isSelectable === void 0 ? true : _props$isSelectable,\n      _props$textProps = props.textProps,\n      textProps = _props$textProps === void 0 ? emptyProps : _props$textProps,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var updateOnResize = function updateOnResize() {\n    if (!mainRef) return;\n    var mainRefWidth = mainRef.offsetWidth;\n    setTargetWidth(Math.max(MIN_SELECT_MENU_WIDTH, mainRefWidth));\n  };\n\n  var onResize = debounce(updateOnResize, 200);\n  useEffect(function () {\n    updateOnResize();\n    window.addEventListener('resize', onResize, false);\n    return function () {\n      window.removeEventListener('resize', onResize);\n    };\n  }, []);\n\n  var onMainRef = function onMainRef(getRef, ref) {\n    setMainRef(ref);\n    getRef(ref);\n  }; // TODO consider `useClickable`\n\n\n  var handleKeyDown = function handleKeyDown(toggle, isShown, e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (!isShown && isSelectable && !disabled) {\n        toggle();\n      }\n    }\n  };\n\n  var handleDoubleClick = function handleDoubleClick(toggle, isShown) {\n    if (!isShown && isSelectable && !disabled) {\n      toggle();\n    }\n  };\n\n  var handleClick = function handleClick(toggle, isShown) {\n    if (!shouldClickToggle && !isShown) {\n      setShouldClickToggle(true);\n      return;\n    }\n\n    if (isSelectable && !disabled) {\n      toggle();\n      setShouldClickToggle(true);\n    }\n  };\n\n  var handleFocus = useCallback(function () {\n    setIsFocused(true);\n  }, []);\n  var handleBlur = useCallback(function () {\n    setShouldClickToggle(false);\n    setIsFocused(false);\n  }, []);\n  var cursor = 'default';\n\n  if (disabled) {\n    cursor = 'not-allowed';\n  } else if (isSelectable) {\n    if (isFocused) {\n      cursor = 'pointer';\n    } else {\n      cursor = 'default';\n    }\n  } else {\n    cursor = 'text';\n  }\n\n  var lessOpacity = useMemo(function () {\n    return disabled || !children && placeholder;\n  }, [disabled, children, placeholder]);\n  var mergedTextProps = useMemo(function () {\n    return _objectSpread({\n      size: size,\n      opacity: lessOpacity ? 0.5 : 1\n    }, textProps);\n  }, [lessOpacity, size, textProps]);\n  return /*#__PURE__*/React.createElement(SelectMenu, _extends({\n    width: targetWidth\n  }, selectMenuProps), function (_ref) {\n    var getRef = _ref.getRef,\n        isShown = _ref.isShown,\n        toggle = _ref.toggle;\n    return /*#__PURE__*/React.createElement(TextTableCell, _extends({\n      ref: onMainRef.bind(null, getRef),\n      onClick: handleClick.bind(null, toggle, isShown),\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      isSelectable: isSelectable && !disabled,\n      rightView: isSelectable ? /*#__PURE__*/React.createElement(CaretDownIcon, {\n        color: \"muted\"\n      }) : null,\n      \"aria-haspopup\": true,\n      \"aria-expanded\": isShown,\n      cursor: isShown ? 'pointer' : cursor,\n      textProps: mergedTextProps,\n      onKeyDown: handleKeyDown.bind(null, toggle, isShown),\n      onDoubleClick: handleDoubleClick.bind(null, toggle, isShown)\n    }, rest), children || placeholder);\n  });\n});\nSelectMenuCell.propTypes = _objectSpread(_objectSpread({}, TableCell.propTypes), {}, {\n  /*\n   * Makes the TableCell focusable.\n   * Will add tabIndex={-1 || this.props.tabIndex}.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * When true, the cell can't be edited.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Optional placeholder when children is falsy.\n   */\n  placeholder: PropTypes.node,\n\n  /**\n   * The size used for the TextTableCell and Textarea.\n   */\n  size: PropTypes.oneOf([300, 400]),\n  selectMenuProps: PropTypes.object\n});\nexport default SelectMenuCell;","map":{"version":3,"sources":["../../../src/table/src/SelectMenuCell.js"],"names":["MIN_SELECT_MENU_WIDTH","emptyProps","SelectMenuCell","memo","targetWidth","setTargetWidth","useState","shouldClickToggle","setShouldClickToggle","isFocused","setIsFocused","mainRef","setMainRef","children","size","selectMenuProps","disabled","placeholder","isSelectable","textProps","rest","props","updateOnResize","mainRefWidth","Math","onResize","debounce","useEffect","window","onMainRef","getRef","handleKeyDown","e","toggle","handleDoubleClick","handleClick","handleFocus","useCallback","handleBlur","cursor","lessOpacity","useMemo","mergedTextProps","opacity","isShown","TableCell","PropTypes","object"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect, useCallback, useMemo } from 'react'\nimport debounce from 'lodash.debounce'\nimport PropTypes from 'prop-types'\nimport { CaretDownIcon } from '../../icons'\nimport { SelectMenu } from '../../select-menu'\nimport TableCell from './TableCell'\nimport TextTableCell from './TextTableCell'\n\nconst MIN_SELECT_MENU_WIDTH = 240\nconst emptyProps = {}\n\nconst SelectMenuCell = memo(function SelectMenuCell(props) {\n  const [targetWidth, setTargetWidth] = useState(MIN_SELECT_MENU_WIDTH)\n  const [shouldClickToggle, setShouldClickToggle] = useState(false)\n  const [isFocused, setIsFocused] = useState(false)\n  const [mainRef, setMainRef] = useState()\n\n  const {\n    children,\n    size = 300,\n    selectMenuProps,\n    disabled,\n    placeholder,\n    isSelectable = true,\n    textProps = emptyProps,\n    ...rest\n  } = props\n\n  const updateOnResize = () => {\n    if (!mainRef) return\n    const mainRefWidth = mainRef.offsetWidth\n    setTargetWidth(Math.max(MIN_SELECT_MENU_WIDTH, mainRefWidth))\n  }\n\n  const onResize = debounce(updateOnResize, 200)\n\n  useEffect(() => {\n    updateOnResize()\n    window.addEventListener('resize', onResize, false)\n\n    return () => {\n      window.removeEventListener('resize', onResize)\n    }\n  }, [])\n\n  const onMainRef = (getRef, ref) => {\n    setMainRef(ref)\n    getRef(ref)\n  }\n\n  // TODO consider `useClickable`\n  const handleKeyDown = (toggle, isShown, e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault()\n      e.stopPropagation()\n\n      if (!isShown && isSelectable && !disabled) {\n        toggle()\n      }\n    }\n  }\n\n  const handleDoubleClick = (toggle, isShown) => {\n    if (!isShown && isSelectable && !disabled) {\n      toggle()\n    }\n  }\n\n  const handleClick = (toggle, isShown) => {\n    if (!shouldClickToggle && !isShown) {\n      setShouldClickToggle(true)\n      return\n    }\n\n    if (isSelectable && !disabled) {\n      toggle()\n      setShouldClickToggle(true)\n    }\n  }\n\n  const handleFocus = useCallback(() => {\n    setIsFocused(true)\n  }, [])\n\n  const handleBlur = useCallback(() => {\n    setShouldClickToggle(false)\n    setIsFocused(false)\n  }, [])\n\n  let cursor = 'default'\n  if (disabled) {\n    cursor = 'not-allowed'\n  } else if (isSelectable) {\n    if (isFocused) {\n      cursor = 'pointer'\n    } else {\n      cursor = 'default'\n    }\n  } else {\n    cursor = 'text'\n  }\n\n  const lessOpacity = useMemo(() => disabled || (!children && placeholder), [disabled, children, placeholder])\n\n  const mergedTextProps = useMemo(\n    () => ({\n      size,\n      opacity: lessOpacity ? 0.5 : 1,\n      ...textProps\n    }),\n    [lessOpacity, size, textProps]\n  )\n\n  return (\n    <SelectMenu width={targetWidth} {...selectMenuProps}>\n      {({ getRef, isShown, toggle }) => {\n        return (\n          <TextTableCell\n            ref={onMainRef.bind(null, getRef)}\n            onClick={handleClick.bind(null, toggle, isShown)}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            isSelectable={isSelectable && !disabled}\n            rightView={isSelectable ? <CaretDownIcon color=\"muted\" /> : null}\n            aria-haspopup\n            aria-expanded={isShown}\n            cursor={isShown ? 'pointer' : cursor}\n            textProps={mergedTextProps}\n            onKeyDown={handleKeyDown.bind(null, toggle, isShown)}\n            onDoubleClick={handleDoubleClick.bind(null, toggle, isShown)}\n            {...rest}\n          >\n            {children || placeholder}\n          </TextTableCell>\n        )\n      }}\n    </SelectMenu>\n  )\n})\n\nSelectMenuCell.propTypes = {\n  /**\n   * Composes the TableCell component as the base.\n   */\n  ...TableCell.propTypes,\n\n  /*\n   * Makes the TableCell focusable.\n   * Will add tabIndex={-1 || this.props.tabIndex}.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * When true, the cell can't be edited.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Optional placeholder when children is falsy.\n   */\n  placeholder: PropTypes.node,\n\n  /**\n   * The size used for the TextTableCell and Textarea.\n   */\n  size: PropTypes.oneOf([300, 400]),\n\n  selectMenuProps: PropTypes.object\n}\n\nexport default SelectMenuCell\n"]},"metadata":{},"sourceType":"module"}