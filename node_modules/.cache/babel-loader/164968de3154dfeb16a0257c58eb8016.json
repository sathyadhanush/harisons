{"ast":null,"code":"import merge from 'lodash.merge';\nimport splitFiles from './split-files';\n/**\n * @typedef {object} RebaseFilesOptions\n * @property {string[] | undefined} acceptedMimeTypes\n * @property {number | undefined} maxFiles\n * @property {number | undefined} maxSizeInBytes\n */\n\n/**\n * @typedef {object} RebaseFilesResult\n * @property {File[]} accepted\n * @property {FileRejection[]} rejected\n */\n\n/**\n * Returns separate arrays for accepted and rejected files based on the provided options, similar to\n * `splitFiles`. This function should be used for rebasing files on removal (i.e. for removing files\n * from the `rejected` array when they are no longer over maximum limit, if there is one)\n * @param {File[]} files\n * @param {RebaseFilesOptions | undefined} options\n * @returns {RebaseFilesResult}\n */\n\nvar rebaseFiles = function rebaseFiles(files, options) {\n  return splitFiles(files, merge({}, options !== null && options !== void 0 ? options : {}, {\n    currentFileCount: null\n  }));\n};\n\nexport default rebaseFiles;","map":{"version":3,"sources":["../../../../src/file-uploader/src/utils/rebase-files.js"],"names":["rebaseFiles","splitFiles","merge","options","currentFileCount"],"mappings":"AAAA,OAAA,KAAA,MAAA,cAAA;AACA,OAAA,UAAA,MAAA,eAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAA,OAAA,EAAA;AAAA,SAAoBC,UAAU,CAAA,KAAA,EAAQC,KAAK,CAAA,EAAA,EAAKC,OAAL,KAAA,IAAKA,IAAAA,OAAL,KAAA,KAAA,CAAKA,GAAL,OAAKA,GAAL,EAAA,EAAoB;AAAEC,IAAAA,gBAAgB,EAAE;AAApB,GAApB,CAAb,CAA9B;AAApB,CAAA;;AAEA,eAAA,WAAA","sourcesContent":["import merge from 'lodash.merge'\nimport splitFiles from './split-files'\n\n/**\n * @typedef {object} RebaseFilesOptions\n * @property {string[] | undefined} acceptedMimeTypes\n * @property {number | undefined} maxFiles\n * @property {number | undefined} maxSizeInBytes\n */\n\n/**\n * @typedef {object} RebaseFilesResult\n * @property {File[]} accepted\n * @property {FileRejection[]} rejected\n */\n\n/**\n * Returns separate arrays for accepted and rejected files based on the provided options, similar to\n * `splitFiles`. This function should be used for rebasing files on removal (i.e. for removing files\n * from the `rejected` array when they are no longer over maximum limit, if there is one)\n * @param {File[]} files\n * @param {RebaseFilesOptions | undefined} options\n * @returns {RebaseFilesResult}\n */\nconst rebaseFiles = (files, options) => splitFiles(files, merge({}, options ?? {}, { currentFileCount: null }))\n\nexport default rebaseFiles\n"]},"metadata":{},"sourceType":"module"}