{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"acceptedMimeTypes\", \"description\", \"disabled\", \"hint\", \"isRequired\", \"label\", \"labelFor\", \"maxFiles\", \"maxSizeInBytes\", \"onAccepted\", \"onChange\", \"onRejected\", \"onRemove\", \"renderFile\", \"validationMessage\", \"values\"],\n    _excluded2 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useState, useRef, useCallback } from 'react';\nimport isEmpty from 'lodash.isempty';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { Key } from '../../constants';\nimport { FormField } from '../../form-field';\nimport { useStyleConfig } from '../../hooks';\nimport { UploadIcon } from '../../icons';\nimport arrayToCsv from '../../lib/array-to-csv';\nimport isFunction from '../../lib/is-function';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { majorScale } from '../../scales';\nimport { useTheme } from '../../theme';\nimport { Text, Paragraph } from '../../typography';\nimport FileCard from './FileCard';\nimport getFileDataTransferItems from './utils/get-file-data-transfer-items';\nimport { getMaxFilesMessage } from './utils/messages';\nimport splitFiles from './utils/split-files';\nvar UploaderState = {\n  Initial: 'initial',\n  Dragging: 'dragging',\n  Error: 'error'\n};\nvar disabledPseudoSelector = \"&[aria-disabled='true']\";\nvar dragHoverPseudoSelector = \"&[data-state='\".concat(UploaderState.Dragging, \"']\");\nvar invalidPseudoSelector = \"&[aria-invalid='true']\";\nvar hoverPseudoSelector = \"&:hover:not(\".concat(disabledPseudoSelector, \"):not(\").concat(dragHoverPseudoSelector, \"):not(\").concat(invalidPseudoSelector, \")\");\nvar styleModifiers = {};\nvar pseudoSelectors = {\n  _focus: '&:focus',\n  _hover: hoverPseudoSelector,\n  _hoverBrowseCopy: \"\".concat(hoverPseudoSelector, \" span:first-of-type\"),\n  _hoverOrDragCopy: \"\".concat(hoverPseudoSelector, \" span:last-of-type\"),\n  _dragHover: dragHoverPseudoSelector,\n  _disabled: disabledPseudoSelector,\n  _invalid: invalidPseudoSelector\n};\nvar internalStyles = {};\nvar FileUploader = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (props, ref) {\n  var acceptedMimeTypes = props.acceptedMimeTypes,\n      description = props.description,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      hint = props.hint,\n      isRequired = props.isRequired,\n      label = props.label,\n      labelFor = props.labelFor,\n      maxFiles = props.maxFiles,\n      maxSizeInBytes = props.maxSizeInBytes,\n      onAccepted = props.onAccepted,\n      onChange = props.onChange,\n      onRejected = props.onRejected,\n      onRemove = props.onRemove,\n      renderFile = props.renderFile,\n      validationMessageProp = props.validationMessage,\n      values = props.values,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _useStyleConfig = useStyleConfig('FileUploader', styleModifiers, pseudoSelectors, internalStyles),\n      className = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var _useState = useState(UploaderState.Initial),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      validationMessage = _useState4[0],\n      setValidationMessage = _useState4[1];\n  /**\n   * The underlying <input type=\"file\" /> DOM element won't accept the same file after it has been\n   * picked unless it is rerendered manually - if a user selects and removes a file, they should\n   * still be able to pick it again without refreshing the page.\n   * https://stackoverflow.com/a/45846251\n   */\n\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fileInputKey = _useState6[0],\n      setFileInputKey = _useState6[1];\n\n  var fileInputRef = useRef(null);\n  var orDragCopy = \"or drag \".concat(maxFiles === 1 ? 'a file' : 'files', \" here\"); // If the dropzone is meant to be a single file input and we already have a file, don't render\n  // the dropzone which will always result in rejected files/errors.\n\n  var renderDropzone = maxFiles !== 1 || isEmpty(values);\n  var resetState = useCallback(function () {\n    setState(UploaderState.Initial);\n    setValidationMessage('');\n  }, []);\n  var handleChange = useCallback(\n  /**\n   * @param {FileList} fileList\n   */\n  function (fileList) {\n    setFileInputKey(function (prev) {\n      return prev + 1;\n    });\n\n    if (isEmpty(fileList)) {\n      safeInvoke(onChange, []);\n      return;\n    }\n\n    var files = _toConsumableArray(fileList);\n\n    safeInvoke(onChange, files);\n\n    var _splitFiles = splitFiles(files, {\n      maxSizeInBytes: maxSizeInBytes,\n      acceptedMimeTypes: acceptedMimeTypes,\n      currentFileCount: values === null || values === void 0 ? void 0 : values.length,\n      maxFiles: maxFiles\n    }),\n        accepted = _splitFiles.accepted,\n        rejected = _splitFiles.rejected;\n\n    if (!isEmpty(accepted)) {\n      safeInvoke(onAccepted, accepted);\n    }\n\n    if (!isEmpty(rejected)) {\n      safeInvoke(onRejected, rejected);\n    }\n  }, [acceptedMimeTypes, maxFiles, maxSizeInBytes, onAccepted, onChange, onRejected, values === null || values === void 0 ? void 0 : values.length]);\n  var handleClick = useCallback(function () {\n    if (disabled) {\n      return;\n    }\n\n    if (fileInputRef.current == null) {\n      return;\n    }\n\n    fileInputRef.current.click();\n  }, [disabled]);\n  var handleDragOver = useCallback(\n  /**\n   * @param {React.DragEvent<HTMLDivElement>} event\n   */\n  function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = 'copy';\n\n    if (disabled) {\n      return;\n    }\n\n    var dragItems = getFileDataTransferItems(event.dataTransfer.items);\n    var draggingCount = dragItems.length;\n\n    var _ref = values !== null && values !== void 0 ? values : [],\n        currentCount = _ref.length;\n\n    if (maxFiles == null || maxFiles < 0) {\n      setState(UploaderState.Dragging);\n      return;\n    }\n\n    if (draggingCount > maxFiles || draggingCount + currentCount > maxFiles) {\n      setValidationMessage(getMaxFilesMessage(maxFiles));\n      setState(UploaderState.Error);\n      return;\n    }\n\n    setState(UploaderState.Dragging);\n  }, [disabled, maxFiles, values]);\n  var handleDragLeave = useCallback(function () {\n    return resetState();\n  }, [resetState]);\n  var handleDrop = useCallback(\n  /**\n   * @param {React.DragEvent<HTMLDivElement>} event\n   */\n  function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    }\n\n    resetState();\n    handleChange(event.dataTransfer.files);\n  }, [disabled, handleChange, resetState]);\n  var handleInputChange = useCallback(\n  /**\n   * @param {React.ChangeEvent<HTMLInputElement>} event\n   */\n  function (event) {\n    // Theoretically the input should not be accessible at all when disabled,\n    // but this should act as a safeguard\n    if (disabled) {\n      return;\n    }\n\n    handleChange(event.target.files);\n  }, [disabled, handleChange]);\n  var handleKeyDown = useCallback(\n  /**\n   * @param {React.KeyboardEvent<HTMLDivElement>} event\n   */\n  function (event) {\n    if (event.key !== Key.Enter && event.key !== Key.Space) {\n      return;\n    }\n\n    event.preventDefault();\n    handleClick();\n  }, [handleClick]);\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(FormField, {\n    label: label,\n    labelFor: labelFor,\n    description: description,\n    hint: hint,\n    isRequired: isRequired // Always override the validationMessage from prop if we have a message to display from dragging\n    ,\n    validationMessage: !isEmpty(validationMessage) ? /*#__PURE__*/React.createElement(Text, {\n      color: colors.red500\n    }, validationMessage) : validationMessageProp\n  }, renderDropzone && /*#__PURE__*/React.createElement(Box, _extends({\n    \"aria-disabled\": disabled,\n    \"aria-invalid\": state === UploaderState.Error,\n    className: className,\n    \"data-state\": state,\n    onClick: handleClick,\n    onDragLeave: handleDragLeave,\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    onKeyDown: handleKeyDown,\n    tabIndex: disabled ? undefined : 0\n  }, boxProps, rest), /*#__PURE__*/React.createElement(Box, {\n    accept: arrayToCsv(acceptedMimeTypes),\n    display: \"none\",\n    is: \"input\",\n    tabIndex: -1,\n    key: fileInputKey,\n    multiple: maxFiles !== 1,\n    onChange: handleInputChange,\n    ref: fileInputRef,\n    type: \"file\"\n  }), /*#__PURE__*/React.createElement(Box, {\n    alignItems: \"center\",\n    backgroundColor: disabled ? colors.gray90 : colors.gray200,\n    borderRadius: \"50%\",\n    display: \"flex\",\n    height: majorScale(7),\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    width: majorScale(7)\n  }, /*#__PURE__*/React.createElement(UploadIcon, {\n    color: disabled ? colors.gray400 : colors.gray500,\n    size: majorScale(3)\n  })), /*#__PURE__*/React.createElement(Paragraph, {\n    marginTop: majorScale(3),\n    pointerEvents: \"none\"\n  }, /*#__PURE__*/React.createElement(Text, {\n    color: disabled ? colors.gray500 : colors.blue400\n  }, \"Browse \"), /*#__PURE__*/React.createElement(Text, {\n    color: disabled ? colors.gray500 : colors.gray700\n  }, orDragCopy)))), /*#__PURE__*/React.createElement(Box, {\n    marginTop: majorScale(2)\n  }, values === null || values === void 0 ? void 0 : values.map(\n  /**\n   * @param {File} file\n   * @param {number} index\n   */\n  function (file, index) {\n    return isFunction(renderFile) ? renderFile(file, index) : /*#__PURE__*/React.createElement(FileCard, {\n      key: \"\".concat(file.name, \"-\").concat(index),\n      name: file.name,\n      onRemove: isFunction(onRemove) ? function () {\n        return onRemove(file);\n      } : undefined,\n      sizeInBytes: file.size,\n      type: file.type\n    });\n  })));\n}));\nFileUploader.propTypes = _objectSpread(_objectSpread({}, FormField.propTypes), {}, {\n  /**\n   * MIME types (not file extensions) to accept\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n   */\n  acceptedMimeTypes: PropTypes.array,\n\n  /**\n   * When true, displays a disabled state where drops don't fire and the native browser picker doesn't open\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Maximum number of files to accept\n   */\n  maxFiles: PropTypes.number,\n\n  /**\n   * Maximum size of an **individual** file to accept\n   */\n  maxSizeInBytes: PropTypes.number,\n\n  /**\n   * Callback for when files are accepted via drop or the native browser picker\n   * @type {(files: File[]) => void}\n   */\n  onAccepted: PropTypes.func,\n\n  /**\n   * Callback for when files are added via drop or the native browser picker, which includes both\n   * the accepted and rejected files\n   * @type {(files: File[]) => void}\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback for when files are rejected via drop or the native browser picker\n   * @type {(fileRejections: FileRejection[]) => void}\n   */\n  onRejected: PropTypes.func,\n\n  /**\n   * Callback to fire when a file should be removed\n   * @type {(file: File) => void}\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * Custom render function for displaying the file underneath the uploader\n   * @type {(file: File, index: number) => React.ReactNode}\n   */\n  renderFile: PropTypes.func,\n\n  /**\n   * File values to render underneath the uploader\n   * @type {File}\n   */\n  values: PropTypes.array\n});\nexport default FileUploader;","map":{"version":3,"sources":["../../../src/file-uploader/src/FileUploader.js"],"names":["UploaderState","Initial","Dragging","Error","disabledPseudoSelector","dragHoverPseudoSelector","invalidPseudoSelector","hoverPseudoSelector","styleModifiers","pseudoSelectors","_focus","_hover","_hoverBrowseCopy","_hoverOrDragCopy","_dragHover","_disabled","_invalid","internalStyles","FileUploader","memo","forwardRef","acceptedMimeTypes","description","disabled","hint","isRequired","label","labelFor","maxFiles","maxSizeInBytes","onAccepted","onChange","onRejected","onRemove","renderFile","validationMessageProp","values","rest","props","colors","useTheme","className","boxProps","useStyleConfig","state","setState","useState","validationMessage","setValidationMessage","fileInputKey","setFileInputKey","fileInputRef","useRef","orDragCopy","renderDropzone","isEmpty","resetState","useCallback","handleChange","prev","safeInvoke","files","accepted","rejected","splitFiles","currentFileCount","handleClick","handleDragOver","event","dragItems","getFileDataTransferItems","draggingCount","currentCount","getMaxFilesMessage","handleDragLeave","handleDrop","handleInputChange","handleKeyDown","Key","ref","red500","arrayToCsv","majorScale","blue400","gray700","isFunction","file","type","FormField","PropTypes","array"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA,EAAA,WAAA,QAAA,OAAA;AACA,OAAA,OAAA,MAAA,gBAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,GAAA,MAAA,QAAA;AACA,SAAA,GAAA,QAAA,iBAAA;AACA,SAAA,SAAA,QAAA,kBAAA;AACA,SAAA,cAAA,QAAA,aAAA;AACA,SAAA,UAAA,QAAA,aAAA;AACA,OAAA,UAAA,MAAA,wBAAA;AACA,OAAA,UAAA,MAAA,uBAAA;AACA,OAAA,UAAA,MAAA,uBAAA;AACA,SAAA,UAAA,QAAA,cAAA;AACA,SAAA,QAAA,QAAA,aAAA;AACA,SAAA,IAAA,EAAA,SAAA,QAAA,kBAAA;AACA,OAAA,QAAA,MAAA,YAAA;AACA,OAAA,wBAAA,MAAA,sCAAA;AACA,SAAA,kBAAA,QAAA,kBAAA;AACA,OAAA,UAAA,MAAA,qBAAA;AAEA,IAAMA,aAAa,GAAG;AACpBC,EAAAA,OAAO,EADa,SAAA;AAEpBC,EAAAA,QAAQ,EAFY,UAAA;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;AAMA,IAAMC,sBAAsB,GAA5B,yBAAA;AACA,IAAMC,uBAAuB,GAAA,iBAAA,MAAA,CAAoBL,aAAa,CAAjC,QAAA,EAA7B,IAA6B,CAA7B;AACA,IAAMM,qBAAqB,GAA3B,wBAAA;AACA,IAAMC,mBAAmB,GAAA,eAAA,MAAA,CAAA,sBAAA,EAAA,QAAA,EAAA,MAAA,CAAA,uBAAA,EAAA,QAAA,EAAA,MAAA,CAAA,qBAAA,EAAzB,GAAyB,CAAzB;AACA,IAAMC,cAAc,GAApB,EAAA;AACA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,MAAM,EADgB,SAAA;AAEtBC,EAAAA,MAAM,EAFgB,mBAAA;AAGtBC,EAAAA,gBAAgB,EAAA,GAAA,MAAA,CAAA,mBAAA,EAHM,qBAGN,CAHM;AAItBC,EAAAA,gBAAgB,EAAA,GAAA,MAAA,CAAA,mBAAA,EAJM,oBAIN,CAJM;AAKtBC,EAAAA,UAAU,EALY,uBAAA;AAMtBC,EAAAA,SAAS,EANa,sBAAA;AAOtBC,EAAAA,QAAQ,EAAEV;AAPY,CAAxB;AASA,IAAMW,cAAc,GAApB,EAAA;AAEA,IAAMC,YAAY,GAAA,aAAGC,IAAI,EAAA,aACvBC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAgB;AACzB,MACEC,iBADF,GAkBIiB,KAlBJ,CAAA,iBAAA;AAAA,MAEEhB,WAFF,GAkBIgB,KAlBJ,CAAA,WAAA;AAAA,MAAA,eAAA,GAkBIA,KAlBJ,CAAA,QAAA;AAAA,MAGEf,QAHF,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,eAAA;AAAA,MAIEC,IAJF,GAkBIc,KAlBJ,CAAA,IAAA;AAAA,MAKEb,UALF,GAkBIa,KAlBJ,CAAA,UAAA;AAAA,MAMEZ,KANF,GAkBIY,KAlBJ,CAAA,KAAA;AAAA,MAOEX,QAPF,GAkBIW,KAlBJ,CAAA,QAAA;AAAA,MAQEV,QARF,GAkBIU,KAlBJ,CAAA,QAAA;AAAA,MASET,cATF,GAkBIS,KAlBJ,CAAA,cAAA;AAAA,MAUER,UAVF,GAkBIQ,KAlBJ,CAAA,UAAA;AAAA,MAWEP,QAXF,GAkBIO,KAlBJ,CAAA,QAAA;AAAA,MAYEN,UAZF,GAkBIM,KAlBJ,CAAA,UAAA;AAAA,MAaEL,QAbF,GAkBIK,KAlBJ,CAAA,QAAA;AAAA,MAcEJ,UAdF,GAkBII,KAlBJ,CAAA,UAAA;AAAA,MAeqBH,qBAfrB,GAkBIG,KAlBJ,CAAA,iBAAA;AAAA,MAgBEF,MAhBF,GAkBIE,KAlBJ,CAAA,MAAA;AAAA,MAiBKD,IAjBL,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AAoBA,MAAA,SAAA,GAAmBG,QAAnB,EAAA;AAAA,MAAQD,MAAR,GAAA,SAAA,CAAA,MAAA;;AACA,MAAA,eAAA,GAAmCI,cAAc,CAAA,cAAA,EAAA,cAAA,EAAA,eAAA,EAAjD,cAAiD,CAAjD;AAAA,MAAQF,SAAR,GAAA,eAAA,CAAA,SAAA;AAAA,MAAsBC,QAAtB,GAAA,wBAAA,CAAA,eAAA,EAAA,UAAA,CAAA;;AACA,MAAA,SAAA,GAA0BI,QAAQ,CAAC9C,aAAa,CAAhD,OAAkC,CAAlC;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAAO4C,KAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAAcC,QAAd,GAAA,UAAA,CAAA,CAAA,CAAA;;AACA,MAAA,UAAA,GAAkDC,QAAQ,CAA1D,EAA0D,CAA1D;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAAOC,iBAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAA0BC,oBAA1B,GAAA,UAAA,CAAA,CAAA,CAAA;AACA;AACJ;AACA;AACA;AACA;AACA;;;AACI,MAAA,UAAA,GAAwCF,QAAQ,CAAhD,CAAgD,CAAhD;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAAOG,YAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAAqBC,eAArB,GAAA,UAAA,CAAA,CAAA,CAAA;;AACA,MAAMC,YAAY,GAAGC,MAAM,CAA3B,IAA2B,CAA3B;AACA,MAAMC,UAAU,GAAA,WAAA,MAAA,CAAczB,QAAQ,KAARA,CAAAA,GAAAA,QAAAA,GAAd,OAAA,EAjCS,OAiCT,CAAhB,CAjCyB,CAmCzB;AACA;;AACA,MAAM0B,cAAc,GAAG1B,QAAQ,KAARA,CAAAA,IAAkB2B,OAAO,CAAhD,MAAgD,CAAhD;AAEA,MAAMC,UAAU,GAAGC,WAAW,CAAC,YAAM;AACnCZ,IAAAA,QAAQ,CAAC7C,aAAa,CAAtB6C,OAAQ,CAARA;AACAG,IAAAA,oBAAoB,CAApBA,EAAoB,CAApBA;AAF4B,GAAA,EAA9B,EAA8B,CAA9B;AAKA,MAAMU,YAAY,GAAGD,WAAW;AAC9B;AACN;AACA;AACM,YAAA,QAAA,EAAY;AACVP,IAAAA,eAAe,CAAC,UAAA,IAAA,EAAI;AAAA,aAAIS,IAAI,GAAR,CAAA;AAApBT,KAAe,CAAfA;;AAEA,QAAIK,OAAO,CAAX,QAAW,CAAX,EAAuB;AACrBK,MAAAA,UAAU,CAAA,QAAA,EAAVA,EAAU,CAAVA;AACA;AACD;;AAED,QAAMC,KAAK,GAAA,kBAAA,CAAX,QAAW,CAAX;;AACAD,IAAAA,UAAU,CAAA,QAAA,EAAVA,KAAU,CAAVA;;AAEA,QAAA,WAAA,GAA+BI,UAAU,CAAA,KAAA,EAAQ;AAC/CnC,MAAAA,cAAc,EADiC,cAAA;AAE/CR,MAAAA,iBAAiB,EAF8B,iBAAA;AAG/C4C,MAAAA,gBAAgB,EAAE7B,MAAF,KAAA,IAAEA,IAAAA,MAAF,KAAA,KAAA,CAAEA,GAAF,KAAA,CAAEA,GAAAA,MAAM,CAHuB,MAAA;AAI/CR,MAAAA,QAAQ,EAARA;AAJ+C,KAAR,CAAzC;AAAA,QAAQkC,QAAR,GAAA,WAAA,CAAA,QAAA;AAAA,QAAkBC,QAAlB,GAAA,WAAA,CAAA,QAAA;;AAOA,QAAI,CAACR,OAAO,CAAZ,QAAY,CAAZ,EAAwB;AACtBK,MAAAA,UAAU,CAAA,UAAA,EAAVA,QAAU,CAAVA;AACD;;AAED,QAAI,CAACL,OAAO,CAAZ,QAAY,CAAZ,EAAwB;AACtBK,MAAAA,UAAU,CAAA,UAAA,EAAVA,QAAU,CAAVA;AACD;AA5B2B,GAAA,EA8B9B,CAAA,iBAAA,EAAA,QAAA,EAAA,cAAA,EAAA,UAAA,EAAA,QAAA,EAAA,UAAA,EAAgFxB,MAAhF,KAAA,IAAgFA,IAAAA,MAAhF,KAAA,KAAA,CAAgFA,GAAhF,KAAA,CAAgFA,GAAAA,MAAM,CA9BxF,MA8BE,CA9B8B,CAAhC;AAiCA,MAAM8B,WAAW,GAAGT,WAAW,CAAC,YAAM;AACpC,QAAA,QAAA,EAAc;AACZ;AACD;;AAED,QAAIN,YAAY,CAAZA,OAAAA,IAAJ,IAAA,EAAkC;AAChC;AACD;;AAEDA,IAAAA,YAAY,CAAZA,OAAAA,CAAAA,KAAAA;AAT6B,GAAA,EAU5B,CAVH,QAUG,CAV4B,CAA/B;AAYA,MAAMgB,cAAc,GAAGV,WAAW;AAChC;AACN;AACA;AACM,YAAA,KAAA,EAAS;AACPW,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAALA,eAAAA;AACAA,IAAAA,KAAK,CAALA,YAAAA,CAAAA,UAAAA,GAAAA,MAAAA;;AAEA,QAAA,QAAA,EAAc;AACZ;AACD;;AAED,QAAMC,SAAS,GAAGC,wBAAwB,CAACF,KAAK,CAALA,YAAAA,CAA3C,KAA0C,CAA1C;AACA,QAAgBG,aAAhB,GAAkCF,SAAlC,CAAA,MAAA;;AACA,QAAA,IAAA,GAAiCjC,MAAjC,KAAA,IAAiCA,IAAAA,MAAjC,KAAA,KAAA,CAAiCA,GAAjC,MAAiCA,GAAjC,EAAA;AAAA,QAAgBoC,YAAhB,GAAA,IAAA,CAAA,MAAA;;AAEA,QAAI5C,QAAQ,IAARA,IAAAA,IAAoBA,QAAQ,GAAhC,CAAA,EAAsC;AACpCiB,MAAAA,QAAQ,CAAC7C,aAAa,CAAtB6C,QAAQ,CAARA;AACA;AACD;;AAED,QAAI0B,aAAa,GAAbA,QAAAA,IAA4BA,aAAa,GAAbA,YAAAA,GAAhC,QAAA,EAAyE;AACvEvB,MAAAA,oBAAoB,CAACyB,kBAAkB,CAAvCzB,QAAuC,CAAnB,CAApBA;AACAH,MAAAA,QAAQ,CAAC7C,aAAa,CAAtB6C,KAAQ,CAARA;AACA;AACD;;AAEDA,IAAAA,QAAQ,CAAC7C,aAAa,CAAtB6C,QAAQ,CAARA;AA5B8B,GAAA,EA8BhC,CAAA,QAAA,EAAA,QAAA,EA9BF,MA8BE,CA9BgC,CAAlC;AAiCA,MAAM6B,eAAe,GAAGjB,WAAW,CAAC,YAAA;AAAA,WAAMD,UAAN,EAAA;AAAD,GAAA,EAAqB,CAAxD,UAAwD,CAArB,CAAnC;AAEA,MAAMmB,UAAU,GAAGlB,WAAW;AAC5B;AACN;AACA;AACM,YAAA,KAAA,EAAS;AACPW,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAALA,eAAAA;;AAEA,QAAA,QAAA,EAAc;AACZ;AACD;;AAEDZ,IAAAA,UAAU;AACVE,IAAAA,YAAY,CAACU,KAAK,CAALA,YAAAA,CAAbV,KAAY,CAAZA;AAb0B,GAAA,EAe5B,CAAA,QAAA,EAAA,YAAA,EAfF,UAeE,CAf4B,CAA9B;AAkBA,MAAMkB,iBAAiB,GAAGnB,WAAW;AACnC;AACN;AACA;AACM,YAAA,KAAA,EAAS;AACP;AACA;AACA,QAAA,QAAA,EAAc;AACZ;AACD;;AAEDC,IAAAA,YAAY,CAACU,KAAK,CAALA,MAAAA,CAAbV,KAAY,CAAZA;AAXiC,GAAA,EAanC,CAAA,QAAA,EAbF,YAaE,CAbmC,CAArC;AAgBA,MAAMmB,aAAa,GAAGpB,WAAW;AAC/B;AACN;AACA;AACM,YAAA,KAAA,EAAS;AACP,QAAIW,KAAK,CAALA,GAAAA,KAAcU,GAAG,CAAjBV,KAAAA,IAA2BA,KAAK,CAALA,GAAAA,KAAcU,GAAG,CAAhD,KAAA,EAAwD;AACtD;AACD;;AAEDV,IAAAA,KAAK,CAALA,cAAAA;AACAF,IAAAA,WAAW;AAVkB,GAAA,EAY/B,CAZF,WAYE,CAZ+B,CAAjC;AAeA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,IAAA,GAAG,EAAEa;AAAV,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACE,IAAA,KAAK,EADP,KAAA;AAEE,IAAA,QAAQ,EAFV,QAAA;AAGE,IAAA,WAAW,EAHb,WAAA;AAIE,IAAA,IAAI,EAJN,IAAA;AAKE,IAAA,UAAU,EALZ,UAAA,CAME;AANF;AAOE,IAAA,iBAAiB,EACf,CAACxB,OAAO,CAAR,iBAAQ,CAAR,GAAA,aAA8B,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAEhB,MAAM,CAACyC;AAApB,KAAA,EAA9B,iBAA8B,CAA9B,GAAuF7C;AAR3F,GAAA,EAWGmB,cAAc,IAAA,aACb,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,qBADF,QAAA;AAEE,oBAAcV,KAAK,KAAK5C,aAAa,CAFvC,KAAA;AAGE,IAAA,SAAS,EAHX,SAAA;AAIE,kBAJF,KAAA;AAKE,IAAA,OAAO,EALT,WAAA;AAME,IAAA,WAAW,EANb,eAAA;AAOE,IAAA,UAAU,EAPZ,cAAA;AAQE,IAAA,MAAM,EARR,UAAA;AASE,IAAA,SAAS,EATX,aAAA;AAUE,IAAA,QAAQ,EAAEuB,QAAQ,GAAA,SAAA,GAAe;AAVnC,GAAA,EAAA,QAAA,EAAA,IAAA,CAAA,EAAA,aAcE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,IAAA,MAAM,EAAE0D,UAAU,CADpB,iBACoB,CADpB;AAEE,IAAA,OAAO,EAFT,MAAA;AAGE,IAAA,EAAE,EAHJ,OAAA;AAIE,IAAA,QAAQ,EAAE,CAJZ,CAAA;AAKE,IAAA,GAAG,EALL,YAAA;AAME,IAAA,QAAQ,EAAErD,QAAQ,KANpB,CAAA;AAOE,IAAA,QAAQ,EAPV,iBAAA;AAQE,IAAA,GAAG,EARL,YAAA;AASE,IAAA,IAAI,EAAC;AATP,GAAA,CAdF,EAAA,aAyBE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,IAAA,UAAU,EADZ,QAAA;AAEE,IAAA,eAAe,EAAEL,QAAQ,GAAGgB,MAAM,CAAT,MAAA,GAAmBA,MAAM,CAFpD,OAAA;AAGE,IAAA,YAAY,EAHd,KAAA;AAIE,IAAA,OAAO,EAJT,MAAA;AAKE,IAAA,MAAM,EAAE2C,UAAU,CALpB,CAKoB,CALpB;AAME,IAAA,cAAc,EANhB,QAAA;AAOE,IAAA,aAAa,EAPf,MAAA;AAQE,IAAA,KAAK,EAAEA,UAAU,CAAA,CAAA;AARnB,GAAA,EAAA,aAUE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,IAAA,KAAK,EAAE3D,QAAQ,GAAGgB,MAAM,CAAT,OAAA,GAAoBA,MAAM,CAArD,OAAA;AAA+D,IAAA,IAAI,EAAE2C,UAAU,CAAA,CAAA;AAA/E,GAAA,CAVF,CAzBF,EAAA,aAqCE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,IAAA,SAAS,EAAEA,UAAU,CAAhC,CAAgC,CAAhC;AAAqC,IAAA,aAAa,EAAC;AAAnD,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE3D,QAAQ,GAAGgB,MAAM,CAAT,OAAA,GAAoBA,MAAM,CAAC4C;AAAhD,GAAA,EADF,SACE,CADF,EAAA,aAEE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE5D,QAAQ,GAAGgB,MAAM,CAAT,OAAA,GAAoBA,MAAM,CAAC6C;AAAhD,GAAA,EApDV,UAoDU,CAFF,CArCF,CAZJ,CADF,EAAA,aAyDE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,IAAA,SAAS,EAAEF,UAAU,CAAA,CAAA;AAA1B,GAAA,EACG,MADH,KAAA,IACG,IAAA,MADH,KAAA,KAAA,CACG,GADH,KAAA,CACG,GAAA,MAAM,CAAN,GAAA;AACC;AACZ;AACA;AACA;AACY,YAAA,IAAA,EAAA,KAAA,EAAA;AAAA,WACEG,UAAU,CAAVA,UAAU,CAAVA,GACEnD,UAAU,CAAA,IAAA,EADZmD,KACY,CADZA,GAAAA,aAGE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,MAAA,GAAG,EAAA,GAAA,MAAA,CAAKC,IAAI,CAAT,IAAA,EAAA,GAAA,EAAA,MAAA,CADL,KACK,CADL;AAEE,MAAA,IAAI,EAAEA,IAAI,CAFZ,IAAA;AAGE,MAAA,QAAQ,EAAE,UAAU,CAAV,QAAU,CAAV,GAAuB,YAAA;AAAA,eAAMrD,QAAQ,CAAd,IAAc,CAAd;AAAvB,OAAA,GAHZ,SAAA;AAIE,MAAA,WAAW,EAAEqD,IAAI,CAJnB,IAAA;AAKE,MAAA,IAAI,EAAEA,IAAI,CAACC;AALb,KAAA,CAJJ;AAhER,GA2DO,CADH,CAzDF,CADF;AA9KJ,CACY,CADa,CAAzB;AAiQArE,YAAY,CAAZA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKsE,SAAS,CADdtE,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEE;AACF;AACA;AACA;AACEG,EAAAA,iBAAiB,EAAEoE,SAAS,CAN9BvE,KAAAA;;AAOE;AACF;AACA;AACEK,EAAAA,QAAQ,EAAEkE,SAAS,CAVrBvE,IAAAA;;AAWE;AACF;AACA;AACEU,EAAAA,QAAQ,EAAE6D,SAAS,CAdrBvE,MAAAA;;AAeE;AACF;AACA;AACEW,EAAAA,cAAc,EAAE4D,SAAS,CAlB3BvE,MAAAA;;AAmBE;AACF;AACA;AACA;AACEY,EAAAA,UAAU,EAAE2D,SAAS,CAvBvBvE,IAAAA;;AAwBE;AACF;AACA;AACA;AACA;AACEa,EAAAA,QAAQ,EAAE0D,SAAS,CA7BrBvE,IAAAA;;AA8BE;AACF;AACA;AACA;AACEc,EAAAA,UAAU,EAAEyD,SAAS,CAlCvBvE,IAAAA;;AAmCE;AACF;AACA;AACA;AACEe,EAAAA,QAAQ,EAAEwD,SAAS,CAvCrBvE,IAAAA;;AAwCE;AACF;AACA;AACA;AACEgB,EAAAA,UAAU,EAAEuD,SAAS,CA5CvBvE,IAAAA;;AA6CE;AACF;AACA;AACA;AACEkB,EAAAA,MAAM,EAAEqD,SAAS,CAACC;AAjDpBxE,CAAAA,CAAAA;AAoDA,eAAA,YAAA","sourcesContent":["import React, { memo, forwardRef, useState, useRef, useCallback } from 'react'\nimport isEmpty from 'lodash.isempty'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { Key } from '../../constants'\nimport { FormField } from '../../form-field'\nimport { useStyleConfig } from '../../hooks'\nimport { UploadIcon } from '../../icons'\nimport arrayToCsv from '../../lib/array-to-csv'\nimport isFunction from '../../lib/is-function'\nimport safeInvoke from '../../lib/safe-invoke'\nimport { majorScale } from '../../scales'\nimport { useTheme } from '../../theme'\nimport { Text, Paragraph } from '../../typography'\nimport FileCard from './FileCard'\nimport getFileDataTransferItems from './utils/get-file-data-transfer-items'\nimport { getMaxFilesMessage } from './utils/messages'\nimport splitFiles from './utils/split-files'\n\nconst UploaderState = {\n  Initial: 'initial',\n  Dragging: 'dragging',\n  Error: 'error'\n}\n\nconst disabledPseudoSelector = `&[aria-disabled='true']`\nconst dragHoverPseudoSelector = `&[data-state='${UploaderState.Dragging}']`\nconst invalidPseudoSelector = `&[aria-invalid='true']`\nconst hoverPseudoSelector = `&:hover:not(${disabledPseudoSelector}):not(${dragHoverPseudoSelector}):not(${invalidPseudoSelector})`\nconst styleModifiers = {}\nconst pseudoSelectors = {\n  _focus: '&:focus',\n  _hover: hoverPseudoSelector,\n  _hoverBrowseCopy: `${hoverPseudoSelector} span:first-of-type`,\n  _hoverOrDragCopy: `${hoverPseudoSelector} span:last-of-type`,\n  _dragHover: dragHoverPseudoSelector,\n  _disabled: disabledPseudoSelector,\n  _invalid: invalidPseudoSelector\n}\nconst internalStyles = {}\n\nconst FileUploader = memo(\n  forwardRef((props, ref) => {\n    const {\n      acceptedMimeTypes,\n      description,\n      disabled = false,\n      hint,\n      isRequired,\n      label,\n      labelFor,\n      maxFiles,\n      maxSizeInBytes,\n      onAccepted,\n      onChange,\n      onRejected,\n      onRemove,\n      renderFile,\n      validationMessage: validationMessageProp,\n      values,\n      ...rest\n    } = props\n\n    const { colors } = useTheme()\n    const { className, ...boxProps } = useStyleConfig('FileUploader', styleModifiers, pseudoSelectors, internalStyles)\n    const [state, setState] = useState(UploaderState.Initial)\n    const [validationMessage, setValidationMessage] = useState('')\n    /**\n     * The underlying <input type=\"file\" /> DOM element won't accept the same file after it has been\n     * picked unless it is rerendered manually - if a user selects and removes a file, they should\n     * still be able to pick it again without refreshing the page.\n     * https://stackoverflow.com/a/45846251\n     */\n    const [fileInputKey, setFileInputKey] = useState(0)\n    const fileInputRef = useRef(null)\n    const orDragCopy = `or drag ${maxFiles === 1 ? 'a file' : 'files'} here`\n\n    // If the dropzone is meant to be a single file input and we already have a file, don't render\n    // the dropzone which will always result in rejected files/errors.\n    const renderDropzone = maxFiles !== 1 || isEmpty(values)\n\n    const resetState = useCallback(() => {\n      setState(UploaderState.Initial)\n      setValidationMessage('')\n    }, [])\n\n    const handleChange = useCallback(\n      /**\n       * @param {FileList} fileList\n       */\n      fileList => {\n        setFileInputKey(prev => prev + 1)\n\n        if (isEmpty(fileList)) {\n          safeInvoke(onChange, [])\n          return\n        }\n\n        const files = [...fileList]\n        safeInvoke(onChange, files)\n\n        const { accepted, rejected } = splitFiles(files, {\n          maxSizeInBytes,\n          acceptedMimeTypes,\n          currentFileCount: values?.length,\n          maxFiles\n        })\n\n        if (!isEmpty(accepted)) {\n          safeInvoke(onAccepted, accepted)\n        }\n\n        if (!isEmpty(rejected)) {\n          safeInvoke(onRejected, rejected)\n        }\n      },\n      [acceptedMimeTypes, maxFiles, maxSizeInBytes, onAccepted, onChange, onRejected, values?.length]\n    )\n\n    const handleClick = useCallback(() => {\n      if (disabled) {\n        return\n      }\n\n      if (fileInputRef.current == null) {\n        return\n      }\n\n      fileInputRef.current.click()\n    }, [disabled])\n\n    const handleDragOver = useCallback(\n      /**\n       * @param {React.DragEvent<HTMLDivElement>} event\n       */\n      event => {\n        event.preventDefault()\n        event.stopPropagation()\n        event.dataTransfer.dropEffect = 'copy'\n\n        if (disabled) {\n          return\n        }\n\n        const dragItems = getFileDataTransferItems(event.dataTransfer.items)\n        const { length: draggingCount } = dragItems\n        const { length: currentCount } = values ?? []\n\n        if (maxFiles == null || maxFiles < 0) {\n          setState(UploaderState.Dragging)\n          return\n        }\n\n        if (draggingCount > maxFiles || draggingCount + currentCount > maxFiles) {\n          setValidationMessage(getMaxFilesMessage(maxFiles))\n          setState(UploaderState.Error)\n          return\n        }\n\n        setState(UploaderState.Dragging)\n      },\n      [disabled, maxFiles, values]\n    )\n\n    const handleDragLeave = useCallback(() => resetState(), [resetState])\n\n    const handleDrop = useCallback(\n      /**\n       * @param {React.DragEvent<HTMLDivElement>} event\n       */\n      event => {\n        event.preventDefault()\n        event.stopPropagation()\n\n        if (disabled) {\n          return\n        }\n\n        resetState()\n        handleChange(event.dataTransfer.files)\n      },\n      [disabled, handleChange, resetState]\n    )\n\n    const handleInputChange = useCallback(\n      /**\n       * @param {React.ChangeEvent<HTMLInputElement>} event\n       */\n      event => {\n        // Theoretically the input should not be accessible at all when disabled,\n        // but this should act as a safeguard\n        if (disabled) {\n          return\n        }\n\n        handleChange(event.target.files)\n      },\n      [disabled, handleChange]\n    )\n\n    const handleKeyDown = useCallback(\n      /**\n       * @param {React.KeyboardEvent<HTMLDivElement>} event\n       */\n      event => {\n        if (event.key !== Key.Enter && event.key !== Key.Space) {\n          return\n        }\n\n        event.preventDefault()\n        handleClick()\n      },\n      [handleClick]\n    )\n\n    return (\n      <Box ref={ref}>\n        <FormField\n          label={label}\n          labelFor={labelFor}\n          description={description}\n          hint={hint}\n          isRequired={isRequired}\n          // Always override the validationMessage from prop if we have a message to display from dragging\n          validationMessage={\n            !isEmpty(validationMessage) ? <Text color={colors.red500}>{validationMessage}</Text> : validationMessageProp\n          }\n        >\n          {renderDropzone && (\n            <Box\n              aria-disabled={disabled}\n              aria-invalid={state === UploaderState.Error}\n              className={className}\n              data-state={state}\n              onClick={handleClick}\n              onDragLeave={handleDragLeave}\n              onDragOver={handleDragOver}\n              onDrop={handleDrop}\n              onKeyDown={handleKeyDown}\n              tabIndex={disabled ? undefined : 0}\n              {...boxProps}\n              {...rest}\n            >\n              <Box\n                accept={arrayToCsv(acceptedMimeTypes)}\n                display=\"none\"\n                is=\"input\"\n                tabIndex={-1}\n                key={fileInputKey}\n                multiple={maxFiles !== 1}\n                onChange={handleInputChange}\n                ref={fileInputRef}\n                type=\"file\"\n              />\n              <Box\n                alignItems=\"center\"\n                backgroundColor={disabled ? colors.gray90 : colors.gray200}\n                borderRadius=\"50%\"\n                display=\"flex\"\n                height={majorScale(7)}\n                justifyContent=\"center\"\n                pointerEvents=\"none\"\n                width={majorScale(7)}\n              >\n                <UploadIcon color={disabled ? colors.gray400 : colors.gray500} size={majorScale(3)} />\n              </Box>\n              <Paragraph marginTop={majorScale(3)} pointerEvents=\"none\">\n                <Text color={disabled ? colors.gray500 : colors.blue400}>Browse </Text>\n                <Text color={disabled ? colors.gray500 : colors.gray700}>{orDragCopy}</Text>\n              </Paragraph>\n            </Box>\n          )}\n        </FormField>\n        <Box marginTop={majorScale(2)}>\n          {values?.map(\n            /**\n             * @param {File} file\n             * @param {number} index\n             */\n            (file, index) =>\n              isFunction(renderFile) ? (\n                renderFile(file, index)\n              ) : (\n                <FileCard\n                  key={`${file.name}-${index}`}\n                  name={file.name}\n                  onRemove={isFunction(onRemove) ? () => onRemove(file) : undefined}\n                  sizeInBytes={file.size}\n                  type={file.type}\n                />\n              )\n          )}\n        </Box>\n      </Box>\n    )\n  })\n)\n\nFileUploader.propTypes = {\n  ...FormField.propTypes,\n  /**\n   * MIME types (not file extensions) to accept\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n   */\n  acceptedMimeTypes: PropTypes.array,\n  /**\n   * When true, displays a disabled state where drops don't fire and the native browser picker doesn't open\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Maximum number of files to accept\n   */\n  maxFiles: PropTypes.number,\n  /**\n   * Maximum size of an **individual** file to accept\n   */\n  maxSizeInBytes: PropTypes.number,\n  /**\n   * Callback for when files are accepted via drop or the native browser picker\n   * @type {(files: File[]) => void}\n   */\n  onAccepted: PropTypes.func,\n  /**\n   * Callback for when files are added via drop or the native browser picker, which includes both\n   * the accepted and rejected files\n   * @type {(files: File[]) => void}\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback for when files are rejected via drop or the native browser picker\n   * @type {(fileRejections: FileRejection[]) => void}\n   */\n  onRejected: PropTypes.func,\n  /**\n   * Callback to fire when a file should be removed\n   * @type {(file: File) => void}\n   */\n  onRemove: PropTypes.func,\n  /**\n   * Custom render function for displaying the file underneath the uploader\n   * @type {(file: File, index: number) => React.ReactNode}\n   */\n  renderFile: PropTypes.func,\n  /**\n   * File values to render underneath the uploader\n   * @type {File}\n   */\n  values: PropTypes.array\n}\n\nexport default FileUploader\n"]},"metadata":{},"sourceType":"module"}