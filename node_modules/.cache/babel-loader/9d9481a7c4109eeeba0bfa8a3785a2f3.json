{"ast":null,"code":"import getAcceptedFiles from './get-accepted-files';\nimport getFileRejections from './get-file-rejections';\n/**\n * @typedef {object} SplitFilesOptions\n * @property {string[] | undefined} acceptedMimeTypes\n * @property {number | undefined} currentFileCount Current count of files used for validating whether the dropped files are over the `maxFiles` limit\n * @property {number | undefined} maxFiles\n * @property {number | undefined} maxSizeInBytes\n */\n\n/**\n * @typedef {object} SplitFilesResult\n * @property {File[]} accepted\n * @property {FileRejection[]} rejected\n */\n\n/**\n * Returns separate arrays for accepted and rejected files based on the provided options.\n * This should be used for accepting and rejecting files on drop\n * @param {File[]} files\n * @param {SplitFilesOptions | undefined} options\n * @returns {SplitFilesResult}\n */\n\nvar splitFiles = function splitFiles(files, options) {\n  var accepted = getAcceptedFiles(files, options);\n  var rejected = getFileRejections(files, options);\n  return {\n    accepted: accepted,\n    rejected: rejected\n  };\n};\n\nexport default splitFiles;","map":{"version":3,"sources":["../../../../src/file-uploader/src/utils/split-files.js"],"names":["splitFiles","accepted","getAcceptedFiles","rejected","getFileRejections"],"mappings":"AAAA,OAAA,gBAAA,MAAA,sBAAA;AACA,OAAA,iBAAA,MAAA,uBAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAA,KAAA,EAAA,OAAA,EAAoB;AACrC,MAAMC,QAAQ,GAAGC,gBAAgB,CAAA,KAAA,EAAjC,OAAiC,CAAjC;AACA,MAAMC,QAAQ,GAAGC,iBAAiB,CAAA,KAAA,EAAlC,OAAkC,CAAlC;AACA,SAAO;AAAEH,IAAAA,QAAQ,EAAV,QAAA;AAAYE,IAAAA,QAAQ,EAARA;AAAZ,GAAP;AAHF,CAAA;;AAMA,eAAA,UAAA","sourcesContent":["import getAcceptedFiles from './get-accepted-files'\nimport getFileRejections from './get-file-rejections'\n\n/**\n * @typedef {object} SplitFilesOptions\n * @property {string[] | undefined} acceptedMimeTypes\n * @property {number | undefined} currentFileCount Current count of files used for validating whether the dropped files are over the `maxFiles` limit\n * @property {number | undefined} maxFiles\n * @property {number | undefined} maxSizeInBytes\n */\n\n/**\n * @typedef {object} SplitFilesResult\n * @property {File[]} accepted\n * @property {FileRejection[]} rejected\n */\n\n/**\n * Returns separate arrays for accepted and rejected files based on the provided options.\n * This should be used for accepting and rejecting files on drop\n * @param {File[]} files\n * @param {SplitFilesOptions | undefined} options\n * @returns {SplitFilesResult}\n */\nconst splitFiles = (files, options) => {\n  const accepted = getAcceptedFiles(files, options)\n  const rejected = getFileRejections(files, options)\n  return { accepted, rejected }\n}\n\nexport default splitFiles\n"]},"metadata":{},"sourceType":"module"}