{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"children\", \"intent\", \"appearance\", \"tabIndex\", \"onClick\", \"onKeyDown\", \"onSelect\", \"onDeselect\", \"isHighlighted\", \"isSelectable\", \"isSelected\"],\n    _excluded2 = [\"className\", \"height\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useRef, useCallback } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useClickable, useLatest, useMergedRef, useStyleConfig } from '../../hooks';\nimport { Pane } from '../../layers';\nimport safeInvoke from '../../lib/safe-invoke';\nimport manageTableRowFocusInteraction from './manageTableRowFocusInteraction';\n\nvar noop = function noop() {};\n\nexport var pseudoSelectors = {\n  _hover: '&[data-isselectable=\"true\"]:not([aria-current=\"true\"]):not([aria-checked=\"true\"]):not(:focus):not(:active):hover',\n  _focus: '&[data-isselectable=\"true\"]:not([aria-checked=\"true\"]):not([aria-current=\"true\"]):focus, &[aria-selected=\"true\"]',\n  _active: '&[aria-current=\"true\"], &[data-isselectable=\"true\"]:active',\n  _current: '&[aria-current=\"true\"], &[aria-checked=\"true\"]',\n  _lastOfType: '&:last-of-type',\n  _isSelectable: '&[data-isselectable=\"true\"]'\n};\nvar internalStyles = {\n  display: 'flex'\n};\nvar TableRow = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TableRow(props, forwardedRef) {\n  var className = props.className,\n      children = props.children,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,\n      onClick = props.onClick,\n      _props$onKeyDown = props.onKeyDown,\n      onKeyDown = _props$onKeyDown === void 0 ? noop : _props$onKeyDown,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,\n      _props$onDeselect = props.onDeselect,\n      onDeselect = _props$onDeselect === void 0 ? noop : _props$onDeselect,\n      isHighlighted = props.isHighlighted,\n      isSelectable = props.isSelectable,\n      isSelected = props.isSelected,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var mainRef = useRef();\n  var onRef = useMergedRef(mainRef, forwardedRef);\n  var onClickRef = useLatest(onClick);\n  var onKeyDownRef = useLatest(onKeyDown);\n  var onDeselectRef = useLatest(onDeselect);\n  var onSelectRef = useLatest(onSelect);\n  var handleClick = useCallback(function (event) {\n    safeInvoke(onClickRef.current, event);\n\n    if (isSelectable) {\n      if (isSelected) {\n        safeInvoke(onDeselectRef.current);\n      } else {\n        safeInvoke(onSelectRef.current);\n      }\n    }\n  }, // These \"missing\" deps are all refs\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [isSelected, isSelectable]);\n  var handleKeyDown = useCallback(function (event) {\n    safeInvoke(onKeyDownRef.current, event);\n\n    if (isSelectable) {\n      if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n        try {\n          manageTableRowFocusInteraction(event.key, mainRef.current);\n        } catch (_) {}\n      } else if (event.key === 'Escape') {\n        if (mainRef.current && mainRef.current instanceof Node) mainRef.current.blur();\n      }\n    }\n  }, // These \"missing\" deps are all refs\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [isSelectable]);\n  var clickable = useClickable({\n    onKeyDown: handleKeyDown,\n    tabIndex: tabIndex\n  });\n\n  var _useStyleConfig = useStyleConfig('TableRow', {\n    appearance: appearance,\n    intent: intent\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      themeHeight = _useStyleConfig.height,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var height = rest.height || themeHeight;\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    ref: onRef,\n    className: cx(themedClassName, className),\n    \"aria-selected\": isHighlighted,\n    \"aria-current\": isSelected,\n    \"data-isselectable\": isSelectable,\n    tabIndex: isSelectable ? clickable.tabIndex : undefined,\n    onClick: handleClick,\n    onKeyDown: clickable.onKeyDown,\n    borderBottom: \"muted\",\n    height: height\n  }, boxProps, rest), children);\n}));\nTableRow.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /**\n   * The height of the row. Remember to add paddings when using \"auto\".\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * Makes the TableRow selectable.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * Makes the TableRow selected.\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Manually set the TableRow to be highlighted.\n   */\n  isHighlighted: PropTypes.bool,\n\n  /**\n   * The intent of the alert.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * Class name passed to the table row.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default TableRow;","map":{"version":3,"sources":["../../../src/table/src/TableRow.js"],"names":["noop","pseudoSelectors","_hover","_focus","_active","_current","_lastOfType","_isSelectable","internalStyles","display","TableRow","memo","forwardRef","className","children","intent","appearance","tabIndex","onClick","onKeyDown","onSelect","onDeselect","isHighlighted","isSelectable","isSelected","rest","props","mainRef","useRef","onRef","useMergedRef","onClickRef","useLatest","onKeyDownRef","onDeselectRef","onSelectRef","handleClick","useCallback","safeInvoke","handleKeyDown","event","manageTableRowFocusInteraction","clickable","useClickable","themedClassName","themeHeight","boxProps","useStyleConfig","height","cx","Pane","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useRef, useCallback } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { useClickable, useLatest, useMergedRef, useStyleConfig } from '../../hooks'\nimport { Pane } from '../../layers'\nimport safeInvoke from '../../lib/safe-invoke'\nimport manageTableRowFocusInteraction from './manageTableRowFocusInteraction'\n\nconst noop = () => {}\n\nexport const pseudoSelectors = {\n  _hover:\n    '&[data-isselectable=\"true\"]:not([aria-current=\"true\"]):not([aria-checked=\"true\"]):not(:focus):not(:active):hover',\n  _focus:\n    '&[data-isselectable=\"true\"]:not([aria-checked=\"true\"]):not([aria-current=\"true\"]):focus, &[aria-selected=\"true\"]',\n  _active: '&[aria-current=\"true\"], &[data-isselectable=\"true\"]:active',\n  _current: '&[aria-current=\"true\"], &[aria-checked=\"true\"]',\n  _lastOfType: '&:last-of-type',\n  _isSelectable: '&[data-isselectable=\"true\"]'\n}\n\nconst internalStyles = {\n  display: 'flex'\n}\n\nconst TableRow = memo(\n  forwardRef(function TableRow(props, forwardedRef) {\n    const {\n      className,\n      children,\n      intent = 'none',\n      appearance = 'default',\n      tabIndex = -1,\n\n      onClick,\n      onKeyDown = noop,\n      onSelect = noop,\n      onDeselect = noop,\n\n      isHighlighted,\n      isSelectable,\n      isSelected,\n      ...rest\n    } = props\n\n    const mainRef = useRef()\n    const onRef = useMergedRef(mainRef, forwardedRef)\n\n    const onClickRef = useLatest(onClick)\n    const onKeyDownRef = useLatest(onKeyDown)\n    const onDeselectRef = useLatest(onDeselect)\n    const onSelectRef = useLatest(onSelect)\n\n    const handleClick = useCallback(\n      event => {\n        safeInvoke(onClickRef.current, event)\n\n        if (isSelectable) {\n          if (isSelected) {\n            safeInvoke(onDeselectRef.current)\n          } else {\n            safeInvoke(onSelectRef.current)\n          }\n        }\n      },\n      // These \"missing\" deps are all refs\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [isSelected, isSelectable]\n    )\n\n    const handleKeyDown = useCallback(\n      event => {\n        safeInvoke(onKeyDownRef.current, event)\n\n        if (isSelectable) {\n          if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n            try {\n              manageTableRowFocusInteraction(event.key, mainRef.current)\n            } catch (_) {}\n          } else if (event.key === 'Escape') {\n            if (mainRef.current && mainRef.current instanceof Node) mainRef.current.blur()\n          }\n        }\n      },\n      // These \"missing\" deps are all refs\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [isSelectable]\n    )\n\n    const clickable = useClickable({ onKeyDown: handleKeyDown, tabIndex })\n\n    const { className: themedClassName, height: themeHeight, ...boxProps } = useStyleConfig(\n      'TableRow',\n      { appearance, intent },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    const height = rest.height || themeHeight\n\n    return (\n      <Pane\n        ref={onRef}\n        className={cx(themedClassName, className)}\n        aria-selected={isHighlighted}\n        aria-current={isSelected}\n        data-isselectable={isSelectable}\n        tabIndex={isSelectable ? clickable.tabIndex : undefined}\n        onClick={handleClick}\n        onKeyDown={clickable.onKeyDown}\n        borderBottom=\"muted\"\n        height={height}\n        {...boxProps}\n        {...rest}\n      >\n        {children}\n      </Pane>\n    )\n  })\n)\n\nTableRow.propTypes = {\n  /**\n   * Composes the Pane component as the base.\n   */\n  ...Pane.propTypes,\n\n  /**\n   * The height of the row. Remember to add paddings when using \"auto\".\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * Makes the TableRow selectable.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * Makes the TableRow selected.\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Manually set the TableRow to be highlighted.\n   */\n  isHighlighted: PropTypes.bool,\n\n  /**\n   * The intent of the alert.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * Class name passed to the table row.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default TableRow\n"]},"metadata":{},"sourceType":"module"}