{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"iconSize\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport Button, { getIconSizeForButton, internalStyles, pseudoSelectors } from './Button';\nvar IconButton = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function IconButton(props, ref) {\n  var icon = props.icon,\n      iconSize = props.iconSize,\n      restProps = _objectWithoutProperties(props, _excluded); // modifiers\n\n\n  var appearance = props.appearance,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size; // Composes the exact same styles as button\n\n  var styleProps = useStyleConfig('Button', {\n    appearance: appearance,\n    intent: intent,\n    size: size\n  }, pseudoSelectors, internalStyles);\n  var height = restProps.height || styleProps.height;\n  var relativeIconSize = getIconSizeForButton(height);\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    ref: ref,\n    paddingLeft: 0,\n    paddingRight: 0,\n    flex: \"none\",\n    height: height,\n    width: height,\n    minWidth: height\n  }, restProps), /*#__PURE__*/React.createElement(IconWrapper, {\n    icon: icon,\n    color: intent === 'none' ? 'default' : 'currentColor',\n    size: iconSize || relativeIconSize\n  }));\n}));\nIconButton.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {\n  /**\n   * The size of the button\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The Evergreen icon or custom icon to render\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Specifies an explicit icon size instead of the default value\n   */\n  iconSize: PropTypes.number,\n\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjunction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default IconButton;","map":{"version":3,"sources":["../../../src/buttons/src/IconButton.js"],"names":["IconButton","memo","forwardRef","icon","iconSize","restProps","props","appearance","intent","size","styleProps","useStyleConfig","height","relativeIconSize","getIconSizeForButton","dimensions","spacing","position","layout","PropTypes","isActive","disabled","className","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { dimensions, spacing, position, layout } from 'ui-box'\nimport { useStyleConfig } from '../../hooks'\nimport { IconWrapper } from '../../icons/src/IconWrapper'\nimport Button, { getIconSizeForButton, internalStyles, pseudoSelectors } from './Button'\n\nconst IconButton = memo(\n  forwardRef(function IconButton(props, ref) {\n    const { icon, iconSize, ...restProps } = props\n\n    // modifiers\n    const { appearance, intent = 'none', size = 'medium' } = props\n\n    // Composes the exact same styles as button\n    const styleProps = useStyleConfig('Button', { appearance, intent, size }, pseudoSelectors, internalStyles)\n\n    const height = restProps.height || styleProps.height\n    const relativeIconSize = getIconSizeForButton(height)\n\n    return (\n      <Button\n        ref={ref}\n        paddingLeft={0}\n        paddingRight={0}\n        flex=\"none\"\n        height={height}\n        width={height}\n        minWidth={height}\n        {...restProps}\n      >\n        <IconWrapper\n          icon={icon}\n          color={intent === 'none' ? 'default' : 'currentColor'}\n          size={iconSize || relativeIconSize}\n        />\n      </Button>\n    )\n  })\n)\n\nIconButton.propTypes = {\n  /**\n   * Composes the dimensions spec from the Box primitive.\n   */\n  ...dimensions.propTypes,\n\n  /**\n   * Composes the spacing spec from the Box primitive.\n   */\n  ...spacing.propTypes,\n\n  /**\n   * Composes the position spec from the Box primitive.\n   */\n  ...position.propTypes,\n\n  /**\n   * Composes the layout spec from the Box primitive.\n   */\n  ...layout.propTypes,\n\n  /**\n   * The size of the button\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The Evergreen icon or custom icon to render\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Specifies an explicit icon size instead of the default value\n   */\n  iconSize: PropTypes.number,\n\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjunction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default IconButton\n"]},"metadata":{},"sourceType":"module"}