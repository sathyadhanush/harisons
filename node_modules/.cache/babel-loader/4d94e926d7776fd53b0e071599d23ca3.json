{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '../../buttons';\nimport { Pane } from '../../layers';\nimport { majorScale, minorScale } from '../../scales';\nimport { useTheme } from '../../theme';\nimport { Link, Heading, Paragraph } from '../../typography';\n/* eslint-disable react/prop-types */\n\nvar HorizontalOrientation = /*#__PURE__*/memo(function HorizontalOrientation(_ref) {\n  var anchorCta = _ref.anchorCta,\n      background = _ref.background,\n      description = _ref.description,\n      icon = _ref.icon,\n      iconBgColor = _ref.iconBgColor,\n      primaryCta = _ref.primaryCta,\n      title = _ref.title;\n  var hasFooter = primaryCta || anchorCta;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var backgroundColor = background === 'light' ? 'white' : colors.gray75;\n  return /*#__PURE__*/React.createElement(Pane, {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: majorScale(6),\n    backgroundColor: backgroundColor,\n    justifyContent: \"center\"\n  }, /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    alignItems: \"flex-start\",\n    flex: 1,\n    height: \"100%\"\n  }, /*#__PURE__*/React.createElement(Pane, {\n    paddingRight: majorScale(6)\n  }, /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: \"50%\",\n    backgroundColor: iconBgColor,\n    width: majorScale(9),\n    height: majorScale(9)\n  }, /*#__PURE__*/React.cloneElement(icon, {\n    size: majorScale(4)\n  }))), /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    paddingRight: majorScale(6)\n  }, /*#__PURE__*/React.createElement(Heading, {\n    size: 500,\n    color: colors.gray700\n  }, title), description && /*#__PURE__*/React.createElement(Paragraph, {\n    color: \"muted\",\n    marginTop: majorScale(2)\n  }, description), hasFooter && /*#__PURE__*/React.createElement(Pane, {\n    marginTop: majorScale(5),\n    display: \"flex\"\n  }, primaryCta, primaryCta && anchorCta && /*#__PURE__*/React.cloneElement(anchorCta, {\n    marginLeft: majorScale(4)\n  }), !primaryCta && anchorCta))));\n});\n/* eslint-enable react/prop-types */\n\n/* eslint-disable react/prop-types */\n\nvar VerticalOrientation = /*#__PURE__*/memo(function VerticalOrientation(_ref2) {\n  var background = _ref2.background,\n      description = _ref2.description,\n      icon = _ref2.icon,\n      iconBgColor = _ref2.iconBgColor,\n      primaryCta = _ref2.primaryCta,\n      title = _ref2.title;\n\n  var _useTheme2 = useTheme(),\n      colors = _useTheme2.colors;\n\n  var backgroundColor = background === 'light' ? 'white' : colors.gray75;\n  return /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    flex: 1,\n    backgroundColor: backgroundColor,\n    paddingX: majorScale(5),\n    paddingY: majorScale(5),\n    height: \"100%\",\n    width: \"100%\"\n  }, /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: \"50%\",\n    backgroundColor: iconBgColor,\n    width: majorScale(7),\n    height: majorScale(7)\n  }, /*#__PURE__*/React.cloneElement(icon, {\n    size: majorScale(3)\n  })), /*#__PURE__*/React.createElement(Heading, {\n    marginTop: majorScale(2),\n    textAlign: \"center\",\n    color: colors.gray700\n  }, title), /*#__PURE__*/React.createElement(Paragraph, {\n    marginTop: majorScale(2),\n    textAlign: \"center\",\n    color: colors.gray700\n  }, description), primaryCta && /*#__PURE__*/React.cloneElement(primaryCta, {\n    marginTop: minorScale(5)\n  }));\n});\n/* eslint-enable react/prop-types */\n\nvar PrimaryButton = function PrimaryButton(props) {\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    appearance: \"primary\"\n  }, props));\n};\n\nPrimaryButton.displayName = \"PrimaryButton\";\n\nvar LinkButton = function LinkButton(props) {\n  return /*#__PURE__*/React.createElement(Link, _extends({}, props, {\n    size: 300,\n    lineHeight: \"34px\"\n  }));\n};\n\nLinkButton.displayName = \"LinkButton\";\nvar EmptyState = /*#__PURE__*/memo(function EmptyState(_ref3) {\n  var anchorCta = _ref3.anchorCta,\n      _ref3$background = _ref3.background,\n      background = _ref3$background === void 0 ? 'light' : _ref3$background,\n      description = _ref3.description,\n      icon = _ref3.icon,\n      iconBgColor = _ref3.iconBgColor,\n      _ref3$orientation = _ref3.orientation,\n      orientation = _ref3$orientation === void 0 ? 'horizontal' : _ref3$orientation,\n      primaryCta = _ref3.primaryCta,\n      title = _ref3.title;\n\n  if (orientation === 'vertical') {\n    return /*#__PURE__*/React.createElement(VerticalOrientation, {\n      title: title,\n      icon: icon,\n      iconBgColor: iconBgColor,\n      background: background,\n      description: description,\n      primaryCta: primaryCta\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(HorizontalOrientation, {\n      title: title,\n      icon: icon,\n      iconBgColor: iconBgColor,\n      background: background,\n      description: description,\n      primaryCta: primaryCta,\n      anchorCta: anchorCta\n    });\n  }\n});\nEmptyState.PrimaryButton = PrimaryButton;\nEmptyState.LinkButton = LinkButton;\nEmptyState.propTypes = {\n  /** The title of the empty state */\n  title: PropTypes.string.isRequired,\n\n  /** The icon used in the empty state */\n  icon: PropTypes.element.isRequired,\n\n  /** The background color used for the icon circle */\n  iconBgColor: PropTypes.string.isRequired,\n\n  /** The direction in which to align the empty state elements */\n  orientation: PropTypes.oneOf(['vertical', 'horizontal']),\n\n  /** The description of the empty state */\n  description: PropTypes.string,\n\n  /** The background used for the entire empty state container */\n  background: PropTypes.oneOf(['light', 'dark']),\n\n  /** The primary CTA of the empty state */\n  primaryCta: PropTypes.element,\n\n  /** The link CTA of the empty state */\n  anchorCta: PropTypes.element\n};\nexport default EmptyState;","map":{"version":3,"sources":["../../../src/empty-states/src/EmptyState.js"],"names":["HorizontalOrientation","memo","anchorCta","background","description","icon","iconBgColor","primaryCta","title","hasFooter","colors","useTheme","backgroundColor","majorScale","size","gray700","marginLeft","VerticalOrientation","marginTop","minorScale","PrimaryButton","LinkButton","EmptyState","orientation","PropTypes","element"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button } from '../../buttons'\nimport { Pane } from '../../layers'\nimport { majorScale, minorScale } from '../../scales'\nimport { useTheme } from '../../theme'\nimport { Link, Heading, Paragraph } from '../../typography'\n\n/* eslint-disable react/prop-types */\n\nconst HorizontalOrientation = memo(function HorizontalOrientation({\n  anchorCta,\n  background,\n  description,\n  icon,\n  iconBgColor,\n  primaryCta,\n  title\n}) {\n  const hasFooter = primaryCta || anchorCta\n  const { colors } = useTheme()\n\n  const backgroundColor = background === 'light' ? 'white' : colors.gray75\n\n  return (\n    <Pane\n      width=\"100%\"\n      height=\"100%\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      padding={majorScale(6)}\n      backgroundColor={backgroundColor}\n      justifyContent=\"center\"\n    >\n      <Pane display=\"flex\" alignItems=\"flex-start\" flex={1} height=\"100%\">\n        <Pane paddingRight={majorScale(6)}>\n          <Pane\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            borderRadius=\"50%\"\n            backgroundColor={iconBgColor}\n            width={majorScale(9)}\n            height={majorScale(9)}\n          >\n            {React.cloneElement(icon, { size: majorScale(4) })}\n          </Pane>\n        </Pane>\n        <Pane display=\"flex\" flexDirection=\"column\" paddingRight={majorScale(6)}>\n          <Heading size={500} color={colors.gray700}>\n            {title}\n          </Heading>\n          {description && (\n            <Paragraph color=\"muted\" marginTop={majorScale(2)}>\n              {description}\n            </Paragraph>\n          )}\n          {hasFooter && (\n            <Pane marginTop={majorScale(5)} display=\"flex\">\n              {primaryCta}\n              {primaryCta && anchorCta && React.cloneElement(anchorCta, { marginLeft: majorScale(4) })}\n              {!primaryCta && anchorCta}\n            </Pane>\n          )}\n        </Pane>\n      </Pane>\n    </Pane>\n  )\n})\n\n/* eslint-enable react/prop-types */\n\n/* eslint-disable react/prop-types */\n\nconst VerticalOrientation = memo(function VerticalOrientation({\n  background,\n  description,\n  icon,\n  iconBgColor,\n  primaryCta,\n  title\n}) {\n  const { colors } = useTheme()\n  const backgroundColor = background === 'light' ? 'white' : colors.gray75\n\n  return (\n    <Pane\n      display=\"flex\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      flex={1}\n      backgroundColor={backgroundColor}\n      paddingX={majorScale(5)}\n      paddingY={majorScale(5)}\n      height=\"100%\"\n      width=\"100%\"\n    >\n      <Pane\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        borderRadius=\"50%\"\n        backgroundColor={iconBgColor}\n        width={majorScale(7)}\n        height={majorScale(7)}\n      >\n        {React.cloneElement(icon, { size: majorScale(3) })}\n      </Pane>\n      <Heading marginTop={majorScale(2)} textAlign=\"center\" color={colors.gray700}>\n        {title}\n      </Heading>\n      <Paragraph marginTop={majorScale(2)} textAlign=\"center\" color={colors.gray700}>\n        {description}\n      </Paragraph>\n      {primaryCta && React.cloneElement(primaryCta, { marginTop: minorScale(5) })}\n    </Pane>\n  )\n})\n/* eslint-enable react/prop-types */\n\nconst PrimaryButton = props => {\n  return <Button appearance=\"primary\" {...props} />\n}\n\nconst LinkButton = props => {\n  return <Link {...props} size={300} lineHeight=\"34px\" />\n}\n\nconst EmptyState = memo(function EmptyState({\n  anchorCta,\n  background = 'light',\n  description,\n  icon,\n  iconBgColor,\n  orientation = 'horizontal',\n  primaryCta,\n  title\n}) {\n  if (orientation === 'vertical') {\n    return (\n      <VerticalOrientation\n        title={title}\n        icon={icon}\n        iconBgColor={iconBgColor}\n        background={background}\n        description={description}\n        primaryCta={primaryCta}\n      />\n    )\n  } else {\n    return (\n      <HorizontalOrientation\n        title={title}\n        icon={icon}\n        iconBgColor={iconBgColor}\n        background={background}\n        description={description}\n        primaryCta={primaryCta}\n        anchorCta={anchorCta}\n      />\n    )\n  }\n})\n\nEmptyState.PrimaryButton = PrimaryButton\nEmptyState.LinkButton = LinkButton\n\nEmptyState.propTypes = {\n  /** The title of the empty state */\n  title: PropTypes.string.isRequired,\n  /** The icon used in the empty state */\n  icon: PropTypes.element.isRequired,\n  /** The background color used for the icon circle */\n  iconBgColor: PropTypes.string.isRequired,\n  /** The direction in which to align the empty state elements */\n  orientation: PropTypes.oneOf(['vertical', 'horizontal']),\n  /** The description of the empty state */\n  description: PropTypes.string,\n  /** The background used for the entire empty state container */\n  background: PropTypes.oneOf(['light', 'dark']),\n  /** The primary CTA of the empty state */\n  primaryCta: PropTypes.element,\n  /** The link CTA of the empty state */\n  anchorCta: PropTypes.element\n}\n\nexport default EmptyState\n"]},"metadata":{},"sourceType":"module"}