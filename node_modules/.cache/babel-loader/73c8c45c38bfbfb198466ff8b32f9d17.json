{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"color\", \"disabled\", \"dotSize\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { SymbolCircleIcon } from '../../icons';\nimport { majorScale } from '../../scales';\nimport { Text } from '../../typography';\nvar StatusIndicator = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function StatusIndicator(props, ref) {\n  var children = props.children,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'disabled' : _props$color,\n      disabled = props.disabled,\n      _props$dotSize = props.dotSize,\n      dotSize = _props$dotSize === void 0 ? 10 : _props$dotSize,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  return /*#__PURE__*/React.createElement(Text, _extends({\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    ref: ref\n  }, rest), /*#__PURE__*/React.createElement(SymbolCircleIcon, {\n    flexShrink: 0,\n    marginRight: majorScale(1),\n    size: dotSize,\n    color: color\n  }), children);\n}));\nStatusIndicator.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  /**\n   * The label of the status hint.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The color of the status hint. Can be an intent or hex value.\n   */\n  color: PropTypes.string,\n\n  /**\n   * The size of the dot to the left of the text\n   */\n  dotSize: PropTypes.number\n});\nexport default StatusIndicator;","map":{"version":3,"sources":["../../../src/status-indicator/src/StatusIndicator.js"],"names":["StatusIndicator","memo","forwardRef","children","color","disabled","dotSize","rest","props","ref","majorScale","Text","PropTypes","number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,gBAAA,QAAA,aAAA;AACA,SAAA,UAAA,QAAA,cAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AAEA,IAAMA,eAAe,GAAA,aAAGC,IAAI,EAAA,aAC1BC,UAAU,CAAC,SAAA,eAAA,CAAA,KAAA,EAAA,GAAA,EAAqC;AAC9C,MAAQC,QAAR,GAA0EK,KAA1E,CAAA,QAAA;AAAA,MAAA,YAAA,GAA0EA,KAA1E,CAAA,KAAA;AAAA,MAAkBJ,KAAlB,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,UAAA,GAAA,YAAA;AAAA,MAAsCC,QAAtC,GAA0EG,KAA1E,CAAA,QAAA;AAAA,MAAA,cAAA,GAA0EA,KAA1E,CAAA,OAAA;AAAA,MAAgDF,OAAhD,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,cAAA;AAAA,MAAiEC,IAAjE,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,IAAA,OAAO,EAAb,aAAA;AAA4B,IAAA,UAAU,EAAtC,QAAA;AAAgD,IAAA,GAAG,EAAEE;AAArD,GAAA,EAAA,IAAA,CAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,IAAA,UAAU,EAA5B,CAAA;AAAiC,IAAA,WAAW,EAAEC,UAAU,CAAxD,CAAwD,CAAxD;AAA6D,IAAA,IAAI,EAAjE,OAAA;AAA4E,IAAA,KAAK,EAAEN;AAAnF,GAAA,CADF,EADF,QACE,CADF;AAJJ,CACY,CADgB,CAA5B;AAaAJ,eAAe,CAAfA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAIKW,IAAI,CAJTX,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAME;AACF;AACA;AACEG,EAAAA,QAAQ,EAAES,SAAS,CATrBZ,IAAAA;;AAWE;AACF;AACA;AACEI,EAAAA,KAAK,EAAEQ,SAAS,CAdlBZ,MAAAA;;AAgBE;AACF;AACA;AACEM,EAAAA,OAAO,EAAEM,SAAS,CAACC;AAnBrBb,CAAAA,CAAAA;AAsBA,eAAA,eAAA","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { SymbolCircleIcon } from '../../icons'\nimport { majorScale } from '../../scales'\nimport { Text } from '../../typography'\n\nconst StatusIndicator = memo(\n  forwardRef(function StatusIndicator(props, ref) {\n    const { children, color = 'disabled', disabled, dotSize = 10, ...rest } = props\n\n    return (\n      <Text display=\"inline-flex\" alignItems=\"center\" ref={ref} {...rest}>\n        <SymbolCircleIcon flexShrink={0} marginRight={majorScale(1)} size={dotSize} color={color} />\n        {children}\n      </Text>\n    )\n  })\n)\n\nStatusIndicator.propTypes = {\n  /**\n   * Composes the Text component as the base.\n   */\n  ...Text.propTypes,\n\n  /**\n   * The label of the status hint.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The color of the status hint. Can be an intent or hex value.\n   */\n  color: PropTypes.string,\n\n  /**\n   * The size of the dot to the left of the text\n   */\n  dotSize: PropTypes.number\n}\n\nexport default StatusIndicator\n"]},"metadata":{},"sourceType":"module"}