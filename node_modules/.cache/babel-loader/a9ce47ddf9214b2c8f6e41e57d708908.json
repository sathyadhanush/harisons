{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"is\", \"children\", \"className\", \"appearance\", \"disabled\", \"secondaryText\", \"intent\", \"icon\", \"onSelect\"],\n    _excluded2 = [\"className\"];\nimport React, { memo, forwardRef, useMemo, useCallback } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useClickable, useStyleConfig } from '../../hooks';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\n\nvar noop = function noop() {};\n\nvar pseudoSelectors = {\n  _hover: '&[data-isselectable=\"true\"]:not([aria-current=\"true\"]):not([aria-checked=\"true\"]):not(:focus):not(:active):hover',\n  _focus: '&[data-isselectable=\"true\"]:not([aria-current=\"true\"]):not([aria-checked=\"true\"]):focus, &[aria-selected=\"true\"]',\n  _active: '&[aria-current=\"true\"], &[data-isselectable=\"true\"]:active',\n  _current: '&[aria-current=\"true\"], &[aria-checked=\"true\"]',\n  _isSelectable: '&[data-isselectable=\"true\"]',\n  _disabled: '&:disabled, &[aria-disabled=\"true\"]'\n};\nvar internalStyles = {\n  display: 'flex',\n  alignItems: 'center'\n};\nvar MenuItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function MenuItem(props, ref) {\n  var _props$is = props.is,\n      is = _props$is === void 0 ? 'div' : _props$is,\n      children = props.children,\n      className = props.className,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      disabled = props.disabled,\n      secondaryText = props.secondaryText,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      icon = props.icon,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,\n      passthroughProps = _objectWithoutProperties(props, _excluded);\n\n  var handleClick = useCallback(function (event) {\n    if (disabled) return;\n    onSelect(event);\n  }, [disabled, onSelect]); // Pass all props, so the hook can handled `disabled`, `onKeyDown`, `tabIndex`\n  // and any other explicit props that are passed through to the underlying component\n\n  var _useClickable = useClickable(props),\n      onKeyDown = _useClickable.onKeyDown,\n      tabIndex = _useClickable.tabIndex;\n\n  var _useStyleConfig = useStyleConfig('MenuItem', {\n    appearance: appearance\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var iconColor = intent === 'none' ? 'default' : intent;\n\n  if (disabled) {\n    iconColor = 'disabled';\n  }\n\n  var textColor = disabled ? 'disabled' : intent;\n  var secondaryTextColor = disabled ? textColor : 'muted';\n  var disabledProps = useMemo(function () {\n    return disabled ? {\n      backgroundColor: 'tint1',\n      cursor: 'not-allowed',\n      disabled: true,\n      onClick: null,\n      onKeyPress: null,\n      tabIndex: -1,\n      'aria-disabled': 'true',\n      'data-isselectable': 'false'\n    } : {};\n  }, [disabled]);\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    is: is,\n    role: \"menuitem\",\n    className: cx(themedClassName, className),\n    onClick: handleClick,\n    \"data-isselectable\": !disabled || undefined,\n    \"aria-disabled\": disabled,\n    ref: ref,\n    height: icon ? 40 : 32\n  }, boxProps, passthroughProps, disabledProps, {\n    tabIndex: tabIndex,\n    onKeyDown: onKeyDown\n  }), /*#__PURE__*/React.createElement(IconWrapper, {\n    icon: icon,\n    color: disabled ? 'disabled' : iconColor,\n    marginLeft: 16,\n    marginRight: -4,\n    size: 16,\n    flexShrink: 0\n  }), /*#__PURE__*/React.createElement(Text, {\n    color: textColor,\n    marginLeft: 16,\n    marginRight: 16,\n    flex: 1\n  }, children), secondaryText && /*#__PURE__*/React.createElement(Text, {\n    marginRight: 16,\n    color: secondaryTextColor\n  }, secondaryText));\n}));\nMenuItem.propTypes = {\n  /**\n   * Element type to use for the menu item.\n   * For example: `<MenuItem is={ReactRouterLink}>...</MenuItem>`\n   */\n  is: Box.propTypes.is,\n\n  /**\n   * Class name passed to the component.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * The Evergreen or custom icon before the label.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * The children of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Secondary text shown on the right.\n   */\n  secondaryText: PropTypes.node,\n\n  /**\n   * The default theme only supports one default appearance.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The intent of the menu item.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * Flag to indicate whether the menu item is disabled or not\n   */\n  disabled: PropTypes.bool\n};\nexport default MenuItem;","map":{"version":3,"sources":["../../../src/menu/src/MenuItem.js"],"names":["noop","pseudoSelectors","_hover","_focus","_active","_current","_isSelectable","_disabled","internalStyles","display","alignItems","MenuItem","memo","forwardRef","is","children","className","appearance","disabled","secondaryText","intent","icon","onSelect","passthroughProps","props","handleClick","useCallback","onKeyDown","tabIndex","useClickable","themedClassName","boxProps","useStyleConfig","iconColor","textColor","secondaryTextColor","disabledProps","useMemo","backgroundColor","cursor","onClick","onKeyPress","cx","Box","PropTypes","bool"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useMemo, useCallback } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { useClickable, useStyleConfig } from '../../hooks'\nimport { IconWrapper } from '../../icons/src/IconWrapper'\nimport { Pane } from '../../layers'\nimport { Text } from '../../typography'\n\nconst noop = () => {}\n\nconst pseudoSelectors = {\n  _hover:\n    '&[data-isselectable=\"true\"]:not([aria-current=\"true\"]):not([aria-checked=\"true\"]):not(:focus):not(:active):hover',\n  _focus:\n    '&[data-isselectable=\"true\"]:not([aria-current=\"true\"]):not([aria-checked=\"true\"]):focus, &[aria-selected=\"true\"]',\n  _active: '&[aria-current=\"true\"], &[data-isselectable=\"true\"]:active',\n  _current: '&[aria-current=\"true\"], &[aria-checked=\"true\"]',\n  _isSelectable: '&[data-isselectable=\"true\"]',\n  _disabled: '&:disabled, &[aria-disabled=\"true\"]'\n}\n\nconst internalStyles = {\n  display: 'flex',\n  alignItems: 'center'\n}\n\nconst MenuItem = memo(\n  forwardRef(function MenuItem(props, ref) {\n    const {\n      is = 'div',\n      children,\n      className,\n      appearance = 'default',\n      disabled,\n      secondaryText,\n      intent = 'none',\n      icon,\n      onSelect = noop,\n      ...passthroughProps\n    } = props\n\n    const handleClick = useCallback(\n      event => {\n        if (disabled) return\n        onSelect(event)\n      },\n      [disabled, onSelect]\n    )\n\n    // Pass all props, so the hook can handled `disabled`, `onKeyDown`, `tabIndex`\n    // and any other explicit props that are passed through to the underlying component\n    const { onKeyDown, tabIndex } = useClickable(props)\n\n    const { className: themedClassName, ...boxProps } = useStyleConfig(\n      'MenuItem',\n      { appearance },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    let iconColor = intent === 'none' ? 'default' : intent\n\n    if (disabled) {\n      iconColor = 'disabled'\n    }\n\n    const textColor = disabled ? 'disabled' : intent\n\n    const secondaryTextColor = disabled ? textColor : 'muted'\n\n    const disabledProps = useMemo(() => {\n      return disabled\n        ? {\n            backgroundColor: 'tint1',\n            cursor: 'not-allowed',\n            disabled: true,\n            onClick: null,\n            onKeyPress: null,\n            tabIndex: -1,\n            'aria-disabled': 'true',\n            'data-isselectable': 'false'\n          }\n        : {}\n    }, [disabled])\n\n    return (\n      <Pane\n        is={is}\n        role=\"menuitem\"\n        className={cx(themedClassName, className)}\n        onClick={handleClick}\n        data-isselectable={!disabled || undefined}\n        aria-disabled={disabled}\n        ref={ref}\n        height={icon ? 40 : 32}\n        {...boxProps}\n        {...passthroughProps}\n        {...disabledProps}\n        tabIndex={tabIndex}\n        onKeyDown={onKeyDown}\n      >\n        <IconWrapper\n          icon={icon}\n          color={disabled ? 'disabled' : iconColor}\n          marginLeft={16}\n          marginRight={-4}\n          size={16}\n          flexShrink={0}\n        />\n        <Text color={textColor} marginLeft={16} marginRight={16} flex={1}>\n          {children}\n        </Text>\n        {secondaryText && (\n          <Text marginRight={16} color={secondaryTextColor}>\n            {secondaryText}\n          </Text>\n        )}\n      </Pane>\n    )\n  })\n)\n\nMenuItem.propTypes = {\n  /**\n   * Element type to use for the menu item.\n   * For example: `<MenuItem is={ReactRouterLink}>...</MenuItem>`\n   */\n  is: Box.propTypes.is,\n\n  /**\n   * Class name passed to the component.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * The Evergreen or custom icon before the label.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * The children of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Secondary text shown on the right.\n   */\n  secondaryText: PropTypes.node,\n\n  /**\n   * The default theme only supports one default appearance.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The intent of the menu item.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * Flag to indicate whether the menu item is disabled or not\n   */\n  disabled: PropTypes.bool\n}\n\nexport default MenuItem\n"]},"metadata":{},"sourceType":"module"}