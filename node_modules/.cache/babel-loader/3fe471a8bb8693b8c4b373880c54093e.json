{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"isRemovable\", \"onRemove\"];\n/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Badge } from '../../badges';\nimport { CrossIcon } from '../../icons';\nimport { minorScale } from '../../scales';\nvar Tag = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Tag(props, ref) {\n  var children = props.children,\n      isRemovable = props.isRemovable,\n      onRemove = props.onRemove,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var badgeStyles = {\n    alignItems: 'center',\n    display: 'inline-flex',\n    fontWeight: 400,\n    borderRadius: 4,\n    paddingX: 8,\n    paddingY: 6,\n    marginTop: 0,\n    marginBottom: 0,\n    textTransform: 'none'\n  };\n\n  if (isRemovable) {\n    badgeStyles.paddingRight = minorScale(1);\n  }\n\n  return /*#__PURE__*/React.createElement(Badge, _extends({\n    ref: ref,\n    isInteractive: true\n  }, badgeStyles, restProps), children, isRemovable && /*#__PURE__*/React.createElement(CrossIcon, {\n    marginLeft: minorScale(1),\n    onClick: onRemove,\n    size: minorScale(3)\n  }));\n}));\nTag.propTypes = {\n  /** The tag content */\n  children: PropTypes.node,\n\n  /**\n   * Callback invoked when the removal icon is clicked.\n   * (event) => void\n   */\n  onRemove: PropTypes.func,\n\n  /** Whether or not the tag can be removed. */\n  isRemovable: PropTypes.bool\n};\nexport default Tag;","map":{"version":3,"sources":["../../../src/tag-input/src/Tag.js"],"names":["Tag","memo","forwardRef","children","isRemovable","onRemove","restProps","props","badgeStyles","alignItems","display","fontWeight","borderRadius","paddingX","paddingY","marginTop","marginBottom","textTransform","minorScale","PropTypes","bool"],"mappings":";;;AAAA;AACA;AACA;;AACA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,KAAA,QAAA,cAAA;AACA,SAAA,SAAA,QAAA,aAAA;AACA,SAAA,UAAA,QAAA,cAAA;AAEA,IAAMA,GAAG,GAAA,aAAGC,IAAI,EAAA,aACdC,UAAU,CAAC,SAAA,GAAA,CAAA,KAAA,EAAA,GAAA,EAAyB;AAClC,MAAQC,QAAR,GAA0DI,KAA1D,CAAA,QAAA;AAAA,MAAkBH,WAAlB,GAA0DG,KAA1D,CAAA,WAAA;AAAA,MAA+BF,QAA/B,GAA0DE,KAA1D,CAAA,QAAA;AAAA,MAA4CD,SAA5C,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AAEA,MAAME,WAAW,GAAG;AAClBC,IAAAA,UAAU,EADQ,QAAA;AAElBC,IAAAA,OAAO,EAFW,aAAA;AAGlBC,IAAAA,UAAU,EAHQ,GAAA;AAIlBC,IAAAA,YAAY,EAJM,CAAA;AAKlBC,IAAAA,QAAQ,EALU,CAAA;AAMlBC,IAAAA,QAAQ,EANU,CAAA;AAOlBC,IAAAA,SAAS,EAPS,CAAA;AAQlBC,IAAAA,YAAY,EARM,CAAA;AASlBC,IAAAA,aAAa,EAAE;AATG,GAApB;;AAYA,MAAA,WAAA,EAAiB;AACfT,IAAAA,WAAW,CAAXA,YAAAA,GAA2BU,UAAU,CAArCV,CAAqC,CAArCA;AACD;;AAED,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAO,IAAA,GAAG,EAAV,GAAA;AAAiB,IAAA,aAAa,EAAA;AAA9B,GAAA,EAAA,WAAA,EAAA,SAAA,CAAA,EAAA,QAAA,EAEGJ,WAAW,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,IAAA,UAAU,EAAEc,UAAU,CAAjC,CAAiC,CAAjC;AAAsC,IAAA,OAAO,EAA7C,QAAA;AAAyD,IAAA,IAAI,EAAEA,UAAU,CAAA,CAAA;AAAzE,GAAA,CAFlB,CADF;AApBJ,CACY,CADI,CAAhB;AA6BAlB,GAAG,CAAHA,SAAAA,GAAgB;AACd;AACAG,EAAAA,QAAQ,EAAEgB,SAAS,CAFL,IAAA;;AAId;AACF;AACA;AACA;AACEd,EAAAA,QAAQ,EAAEc,SAAS,CARL,IAAA;;AASd;AACAf,EAAAA,WAAW,EAAEe,SAAS,CAACC;AAVT,CAAhBpB;AAaA,eAAA,GAAA","sourcesContent":["/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\nimport React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { Badge } from '../../badges'\nimport { CrossIcon } from '../../icons'\nimport { minorScale } from '../../scales'\n\nconst Tag = memo(\n  forwardRef(function Tag(props, ref) {\n    const { children, isRemovable, onRemove, ...restProps } = props\n\n    const badgeStyles = {\n      alignItems: 'center',\n      display: 'inline-flex',\n      fontWeight: 400,\n      borderRadius: 4,\n      paddingX: 8,\n      paddingY: 6,\n      marginTop: 0,\n      marginBottom: 0,\n      textTransform: 'none'\n    }\n\n    if (isRemovable) {\n      badgeStyles.paddingRight = minorScale(1)\n    }\n\n    return (\n      <Badge ref={ref} isInteractive {...badgeStyles} {...restProps}>\n        {children}\n        {isRemovable && <CrossIcon marginLeft={minorScale(1)} onClick={onRemove} size={minorScale(3)} />}\n      </Badge>\n    )\n  })\n)\n\nTag.propTypes = {\n  /** The tag content */\n  children: PropTypes.node,\n\n  /**\n   * Callback invoked when the removal icon is clicked.\n   * (event) => void\n   */\n  onRemove: PropTypes.func,\n  /** Whether or not the tag can be removed. */\n  isRemovable: PropTypes.bool\n}\n\nexport default Tag\n"]},"metadata":{},"sourceType":"module"}