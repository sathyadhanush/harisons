{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"color\", \"forceShowInitials\", \"getInitials\", \"hashValue\", \"name\", \"shape\", \"size\", \"sizeLimitOneCharacter\", \"src\"],\n    _excluded2 = [\"className\"];\nimport React, { useState, memo, forwardRef, useCallback } from 'react';\nimport cx from 'classnames';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { Image } from '../../image';\nimport { Text } from '../../typography';\nimport globalGetInitials from './utils/getInitials';\nimport globalHash from './utils/hash';\nvar imageStyles = {\n  objectFit: 'cover'\n};\nvar pseudoSelectors = {};\nvar internalStyles = {\n  overflow: 'hidden',\n  position: 'relative',\n  display: 'inline-flex',\n  flexShrink: 0,\n  justifyContent: 'center'\n};\nvar isObjectFitSupported = typeof document !== 'undefined' && 'objectFit' in document.documentElement.style;\nvar initialsStyleClass = css({\n  top: 0,\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  lineHeight: 1\n}).toString();\n\nvar getAvatarInitialsFontSize = function getAvatarInitialsFontSize(size, sizeLimitOneCharacter) {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.floor(size / 2.2);\n  }\n\n  return Math.floor(size / 2.6);\n};\n\nvar Avatar = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Avatar(props, ref) {\n  var className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'automatic' : _props$color,\n      _props$forceShowIniti = props.forceShowInitials,\n      forceShowInitials = _props$forceShowIniti === void 0 ? false : _props$forceShowIniti,\n      _props$getInitials = props.getInitials,\n      getInitials = _props$getInitials === void 0 ? globalGetInitials : _props$getInitials,\n      propsHashValue = props.hashValue,\n      name = props.name,\n      _props$shape = props.shape,\n      shape = _props$shape === void 0 ? 'round' : _props$shape,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 24 : _props$size,\n      _props$sizeLimitOneCh = props.sizeLimitOneCharacter,\n      sizeLimitOneCharacter = _props$sizeLimitOneCh === void 0 ? 20 : _props$sizeLimitOneCh,\n      src = props.src,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var hashValue = globalHash(propsHashValue || name);\n\n  var _useStyleConfig = useStyleConfig('Avatar', {\n    color: color,\n    hashValue: hashValue,\n    shape: shape\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageHasFailedLoading = _useState2[0],\n      setImageHasFailedLoading = _useState2[1];\n\n  var onError = useCallback(function () {\n    return setImageHasFailedLoading(true);\n  }, []);\n  var imageUnavailable = !src || imageHasFailedLoading;\n  var initialsFontSize = \"\".concat(getAvatarInitialsFontSize(size, sizeLimitOneCharacter), \"px\");\n  var initials = getInitials(name);\n\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.slice(0, 1);\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    width: size,\n    height: size,\n    title: name,\n    ref: ref,\n    className: cx(className, themedClassName)\n  }, styleProps, restProps), (imageUnavailable || forceShowInitials) && /*#__PURE__*/React.createElement(Text, {\n    className: initialsStyleClass,\n    fontSize: initialsFontSize,\n    lineHeight: initialsFontSize,\n    width: size,\n    height: size,\n    color: \"inherit\"\n  }, initials), !imageUnavailable && /*#__PURE__*/React.createElement(Image, {\n    style: imageStyles // Unsupported by ui-box directly\n    ,\n    width: isObjectFitSupported ? '100%' : 'auto' // Fallback to old behaviour on IE\n    ,\n    height: \"100%\",\n    src: src,\n    onError: onError\n  }));\n}));\nAvatar.propTypes = {\n  /**\n   * Class name passed to the component.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The src attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The size of the avatar.\n   */\n  size: PropTypes.number,\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue: PropTypes.string,\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials: PropTypes.func,\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials: PropTypes.bool,\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter: PropTypes.number,\n\n  /**\n   * Allows for the shape of the avatar component to either be round or square\n   */\n  shape: PropTypes.oneOf(['round', 'square'])\n};\nexport default Avatar;","map":{"version":3,"sources":["../../../src/avatar/src/Avatar.js"],"names":["imageStyles","objectFit","pseudoSelectors","internalStyles","overflow","position","display","flexShrink","justifyContent","isObjectFitSupported","document","initialsStyleClass","top","alignItems","lineHeight","getAvatarInitialsFontSize","size","Math","Avatar","memo","forwardRef","className","color","forceShowInitials","getInitials","propsHashValue","name","shape","sizeLimitOneCharacter","src","restProps","props","hashValue","globalHash","themedClassName","styleProps","useStyleConfig","imageHasFailedLoading","setImageHasFailedLoading","useState","onError","useCallback","imageUnavailable","initialsFontSize","initials","cx","PropTypes"],"mappings":"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","sourcesContent":["import React, { useState, memo, forwardRef, useCallback } from 'react'\nimport cx from 'classnames'\nimport { css } from 'glamor'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { useStyleConfig } from '../../hooks'\nimport { Image } from '../../image'\nimport { Text } from '../../typography'\nimport globalGetInitials from './utils/getInitials'\nimport globalHash from './utils/hash'\n\nconst imageStyles = { objectFit: 'cover' }\n\nconst pseudoSelectors = {}\nconst internalStyles = {\n  overflow: 'hidden',\n  position: 'relative',\n  display: 'inline-flex',\n  flexShrink: 0,\n  justifyContent: 'center'\n}\n\nconst isObjectFitSupported = typeof document !== 'undefined' && 'objectFit' in document.documentElement.style\n\nconst initialsStyleClass = css({\n  top: 0,\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  lineHeight: 1\n}).toString()\n\nconst getAvatarInitialsFontSize = (size, sizeLimitOneCharacter) => {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.floor(size / 2.2)\n  }\n\n  return Math.floor(size / 2.6)\n}\n\nconst Avatar = memo(\n  forwardRef(function Avatar(props, ref) {\n    const {\n      className,\n      color = 'automatic',\n      forceShowInitials = false,\n      getInitials = globalGetInitials,\n      hashValue: propsHashValue,\n      name,\n      shape = 'round',\n      size = 24,\n      sizeLimitOneCharacter = 20,\n      src,\n      ...restProps\n    } = props\n\n    const hashValue = globalHash(propsHashValue || name)\n    const { className: themedClassName, ...styleProps } = useStyleConfig(\n      'Avatar',\n      { color, hashValue, shape },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    const [imageHasFailedLoading, setImageHasFailedLoading] = useState(false)\n    const onError = useCallback(() => setImageHasFailedLoading(true), [])\n    const imageUnavailable = !src || imageHasFailedLoading\n\n    const initialsFontSize = `${getAvatarInitialsFontSize(size, sizeLimitOneCharacter)}px`\n\n    let initials = getInitials(name)\n    if (size <= sizeLimitOneCharacter) {\n      initials = initials.slice(0, 1)\n    }\n\n    return (\n      <Box\n        width={size}\n        height={size}\n        title={name}\n        ref={ref}\n        className={cx(className, themedClassName)}\n        {...styleProps}\n        {...restProps}\n      >\n        {(imageUnavailable || forceShowInitials) && (\n          <Text\n            className={initialsStyleClass}\n            fontSize={initialsFontSize}\n            lineHeight={initialsFontSize}\n            width={size}\n            height={size}\n            color=\"inherit\"\n          >\n            {initials}\n          </Text>\n        )}\n        {!imageUnavailable && (\n          <Image\n            style={imageStyles} // Unsupported by ui-box directly\n            width={isObjectFitSupported ? '100%' : 'auto'} // Fallback to old behaviour on IE\n            height=\"100%\"\n            src={src}\n            onError={onError}\n          />\n        )}\n      </Box>\n    )\n  })\n)\n\nAvatar.propTypes = {\n  /**\n   * Class name passed to the component.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The src attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The size of the avatar.\n   */\n  size: PropTypes.number,\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue: PropTypes.string,\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials: PropTypes.func,\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials: PropTypes.bool,\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter: PropTypes.number,\n\n  /**\n   * Allows for the shape of the avatar component to either be round or square\n   */\n  shape: PropTypes.oneOf(['round', 'square'])\n}\n\nexport default Avatar\n"]},"metadata":{},"sourceType":"module"}