{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"autocompleteProps\", \"buttonProps\", \"height\", \"initialSelectedItem\", \"inputProps\", \"isLoading\", \"itemToString\", \"items\", \"onChange\", \"openOnFocus\", \"placeholder\", \"selectedItem\", \"size\", \"width\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { Autocomplete } from '../../autocomplete';\nimport { IconButton } from '../../buttons';\nimport { Group } from '../../group';\nimport { CaretDownIcon } from '../../icons';\nimport { TextInput } from '../../text-input';\nvar Combobox = /*#__PURE__*/memo(function Combobox(props) {\n  var autocompleteProps = props.autocompleteProps,\n      buttonProps = props.buttonProps,\n      height = props.height,\n      initialSelectedItem = props.initialSelectedItem,\n      inputProps = props.inputProps,\n      _props$isLoading = props.isLoading,\n      isLoading = _props$isLoading === void 0 ? false : _props$isLoading,\n      itemToString = props.itemToString,\n      items = props.items,\n      onChange = props.onChange,\n      _props$openOnFocus = props.openOnFocus,\n      openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,\n      placeholder = props.placeholder,\n      selectedItem = props.selectedItem,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 240 : _props$width,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var disabled = props.disabled || isLoading;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpenedByButton = _useState2[0],\n      setIsOpenedByButton = _useState2[1];\n\n  var handleStateChange = useCallback(function (changes, stateAndHelpers) {\n    if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {\n      if (!changes.isOpen) {\n        setIsOpenedByButton(false);\n      }\n    }\n\n    if (autocompleteProps && typeof autocompleteProps.onStateChange === 'function') {\n      autocompleteProps.onStateChange(changes, stateAndHelpers);\n    }\n  }, [autocompleteProps]);\n  return /*#__PURE__*/React.createElement(Autocomplete, _extends({\n    items: items,\n    selectedItem: selectedItem,\n    initialSelectedItem: initialSelectedItem,\n    itemToString: itemToString,\n    onChange: onChange,\n    isFilterDisabled: isOpenedByButton\n  }, autocompleteProps, {\n    onStateChange: handleStateChange\n  }), function (_ref) {\n    var clearSelection = _ref.clearSelection,\n        getInputProps = _ref.getInputProps,\n        getRef = _ref.getRef,\n        getToggleButtonProps = _ref.getToggleButtonProps,\n        inputValue = _ref.inputValue,\n        isShown = _ref.isShown,\n        openMenu = _ref.openMenu;\n    return /*#__PURE__*/React.createElement(Group, _extends({\n      ref: getRef,\n      size: size,\n      width: width\n    }, rest), /*#__PURE__*/React.createElement(TextInput, _extends({\n      width: 0,\n      flex: 1,\n      height: height,\n      value: inputValue,\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      disabled: disabled\n    }, getInputProps(_objectSpread(_objectSpread({}, inputProps), {}, {\n      placeholder: placeholder,\n      onFocus: function onFocus() {\n        if (openOnFocus) openMenu();\n      },\n      onChange: function onChange(e) {\n        if (isOpenedByButton) {\n          setIsOpenedByButton(false);\n        }\n\n        if (e.target.value.trim() === '') {\n          // Prevent the selected item from sticking around\n          clearSelection();\n        }\n      }\n    })))), /*#__PURE__*/React.createElement(IconButton, _extends({\n      color: \"muted\",\n      icon: isLoading ? undefined : CaretDownIcon,\n      appearance: \"default\",\n      height: height,\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: -1,\n      paddingLeft: isLoading ? 12 : 0,\n      paddingRight: 0,\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n      disabled: disabled,\n      isLoading: isLoading\n    }, getToggleButtonProps(_objectSpread(_objectSpread({}, buttonProps), {}, {\n      onClick: function onClick() {\n        if (!isShown) {\n          setIsOpenedByButton(true);\n        }\n      }\n    })))));\n  });\n});\nCombobox.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {\n  /**\n   * The options to show in the menu.\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * The selected item when controlled.\n   */\n  selectedItem: PropTypes.any,\n\n  /**\n   * Function called when value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * When true, open the autocomplete on focus.\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Default selected item when uncontrolled.\n   */\n  initialSelectedItem: PropTypes.any,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * In case the array of items is not an array of strings,\n   * this function is used on each item to return the string that will be shown on the filter\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Properties forwarded to the input. Use with caution.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the button. Use with caution.\n   */\n  buttonProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the autocomplete component. Use with caution.\n   */\n  autocompleteProps: PropTypes.object,\n\n  /**\n   * Makes the input element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * When true, show a loading spinner. This also disables the button.\n   */\n  isLoading: PropTypes.bool,\n  size: PropTypes.oneOf(['small', 'medium', 'large'])\n});\nexport default Combobox;","map":{"version":3,"sources":["../../../src/combobox/src/Combobox.js"],"names":["Combobox","memo","autocompleteProps","buttonProps","height","initialSelectedItem","inputProps","isLoading","itemToString","items","onChange","openOnFocus","placeholder","selectedItem","size","width","rest","props","disabled","isOpenedByButton","setIsOpenedByButton","useState","handleStateChange","useCallback","Object","changes","clearSelection","getInputProps","getRef","getToggleButtonProps","inputValue","isShown","openMenu","onFocus","e","onClick","dimensions","spacing","position","layout","PropTypes"],"mappings":"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","sourcesContent":["import React, { memo, useState, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { dimensions, spacing, position, layout } from 'ui-box'\nimport { Autocomplete } from '../../autocomplete'\nimport { IconButton } from '../../buttons'\nimport { Group } from '../../group'\nimport { CaretDownIcon } from '../../icons'\nimport { TextInput } from '../../text-input'\n\nconst Combobox = memo(function Combobox(props) {\n  const {\n    autocompleteProps,\n    buttonProps,\n    height,\n    initialSelectedItem,\n    inputProps,\n    isLoading = false,\n    itemToString,\n    items,\n    onChange,\n    openOnFocus = false,\n    placeholder,\n    selectedItem,\n    size = 'medium',\n    width = 240,\n    ...rest\n  } = props\n\n  const disabled = props.disabled || isLoading\n\n  const [isOpenedByButton, setIsOpenedByButton] = useState(false)\n\n  const handleStateChange = useCallback(\n    (changes, stateAndHelpers) => {\n      if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {\n        if (!changes.isOpen) {\n          setIsOpenedByButton(false)\n        }\n      }\n\n      if (autocompleteProps && typeof autocompleteProps.onStateChange === 'function') {\n        autocompleteProps.onStateChange(changes, stateAndHelpers)\n      }\n    },\n    [autocompleteProps]\n  )\n\n  return (\n    <Autocomplete\n      items={items}\n      selectedItem={selectedItem}\n      initialSelectedItem={initialSelectedItem}\n      itemToString={itemToString}\n      onChange={onChange}\n      isFilterDisabled={isOpenedByButton}\n      {...autocompleteProps}\n      onStateChange={handleStateChange}\n    >\n      {({ clearSelection, getInputProps, getRef, getToggleButtonProps, inputValue, isShown, openMenu }) => (\n        <Group ref={getRef} size={size} width={width} {...rest}>\n          <TextInput\n            width={0}\n            flex={1}\n            height={height}\n            value={inputValue}\n            borderTopRightRadius={0}\n            borderBottomRightRadius={0}\n            disabled={disabled}\n            {...getInputProps({\n              ...inputProps,\n              placeholder,\n              onFocus: () => {\n                if (openOnFocus) openMenu()\n              },\n              onChange: e => {\n                if (isOpenedByButton) {\n                  setIsOpenedByButton(false)\n                }\n\n                if (e.target.value.trim() === '') {\n                  // Prevent the selected item from sticking around\n                  clearSelection()\n                }\n              }\n            })}\n          />\n          <IconButton\n            color=\"muted\"\n            icon={isLoading ? undefined : CaretDownIcon}\n            appearance=\"default\"\n            height={height}\n            marginTop={0}\n            marginBottom={0}\n            marginLeft={-1}\n            paddingLeft={isLoading ? 12 : 0}\n            paddingRight={0}\n            borderTopLeftRadius={0}\n            borderBottomLeftRadius={0}\n            disabled={disabled}\n            isLoading={isLoading}\n            {...getToggleButtonProps({\n              ...buttonProps,\n              onClick: () => {\n                if (!isShown) {\n                  setIsOpenedByButton(true)\n                }\n              }\n            })}\n          />\n        </Group>\n      )}\n    </Autocomplete>\n  )\n})\n\nCombobox.propTypes = {\n  /**\n   * Implements some APIs from ui-box.\n   */\n  ...dimensions.propTypes,\n  ...spacing.propTypes,\n  ...position.propTypes,\n  ...layout.propTypes,\n\n  /**\n   * The options to show in the menu.\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * The selected item when controlled.\n   */\n  selectedItem: PropTypes.any,\n\n  /**\n   * Function called when value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * When true, open the autocomplete on focus.\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Default selected item when uncontrolled.\n   */\n  initialSelectedItem: PropTypes.any,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * In case the array of items is not an array of strings,\n   * this function is used on each item to return the string that will be shown on the filter\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Properties forwarded to the input. Use with caution.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the button. Use with caution.\n   */\n  buttonProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the autocomplete component. Use with caution.\n   */\n  autocompleteProps: PropTypes.object,\n\n  /**\n   * Makes the input element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * When true, show a loading spinner. This also disables the button.\n   */\n  isLoading: PropTypes.bool,\n\n  size: PropTypes.oneOf(['small', 'medium', 'large'])\n}\n\nexport default Combobox\n"]},"metadata":{},"sourceType":"module"}