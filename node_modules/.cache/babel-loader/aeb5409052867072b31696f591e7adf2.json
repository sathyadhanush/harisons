{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"className\", \"hasIcon\", \"intent\", \"size\"],\n    _excluded2 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { spacing, dimensions, position, layout } from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport { getIconForIntent } from './getIconForIntent';\nvar pseudoSelectors = {};\nvar internalStyles = {\n  display: 'flex',\n  alignItems: 'center'\n};\nvar InlineAlert = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function InlineAlert(props, ref) {\n  var children = props.children,\n      className = props.className,\n      _props$hasIcon = props.hasIcon,\n      hasIcon = _props$hasIcon === void 0 ? true : _props$hasIcon,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'info' : _props$intent,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 400 : _props$size,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var intentToken = intent === 'none' ? 'info' : intent;\n\n  var _useStyleConfig = useStyleConfig('InlineAlert', {\n    intent: intentToken\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    ref: ref,\n    className: cx(className, themedClassName)\n  }, styleProps, restProps), hasIcon && /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    marginRight: 16\n  }, getIconForIntent(intent, {\n    size: 16\n  })), /*#__PURE__*/React.createElement(Text, {\n    size: size,\n    lineHeight: 1,\n    fontWeight: 500,\n    color: \"inherit\"\n  }, children));\n}));\nInlineAlert.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {\n  /**\n   * The content of the alert.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The intent of the alert. This should always be set explicitly.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * When true, show a icon on the left matching the type.\n   * There is no point not showing this.\n   */\n  hasIcon: PropTypes.bool,\n\n  /**\n   * The size of the Text.\n   */\n  size: PropTypes.number\n});\nexport default InlineAlert;","map":{"version":3,"sources":["../../../src/alert/src/InlineAlert.js"],"names":["pseudoSelectors","internalStyles","display","alignItems","InlineAlert","memo","forwardRef","children","className","hasIcon","intent","size","restProps","props","intentToken","themedClassName","styleProps","useStyleConfig","cx","getIconForIntent","spacing","position","layout","dimensions","PropTypes","number"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { spacing, dimensions, position, layout } from 'ui-box'\nimport { useStyleConfig } from '../../hooks'\nimport { Pane } from '../../layers'\nimport { Text } from '../../typography'\nimport { getIconForIntent } from './getIconForIntent'\n\nconst pseudoSelectors = {}\n\nconst internalStyles = {\n  display: 'flex',\n  alignItems: 'center'\n}\n\nconst InlineAlert = memo(\n  forwardRef(function InlineAlert(props, ref) {\n    const { children, className, hasIcon = true, intent = 'info', size = 400, ...restProps } = props\n\n    const intentToken = intent === 'none' ? 'info' : intent\n    const { className: themedClassName, ...styleProps } = useStyleConfig(\n      'InlineAlert',\n      { intent: intentToken },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    return (\n      <Pane ref={ref} className={cx(className, themedClassName)} {...styleProps} {...restProps}>\n        {hasIcon && (\n          <Pane display=\"flex\" marginRight={16}>\n            {getIconForIntent(intent, { size: 16 })}\n          </Pane>\n        )}\n        <Text size={size} lineHeight={1} fontWeight={500} color=\"inherit\">\n          {children}\n        </Text>\n      </Pane>\n    )\n  })\n)\n\nInlineAlert.propTypes = {\n  /**\n   * Composes some Box APIs.\n   */\n  ...spacing.propTypes,\n  ...position.propTypes,\n  ...layout.propTypes,\n  ...dimensions.propTypes,\n\n  /**\n   * The content of the alert.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The intent of the alert. This should always be set explicitly.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * When true, show a icon on the left matching the type.\n   * There is no point not showing this.\n   */\n  hasIcon: PropTypes.bool,\n\n  /**\n   * The size of the Text.\n   */\n  size: PropTypes.number\n}\n\nexport default InlineAlert\n"]},"metadata":{},"sourceType":"module"}