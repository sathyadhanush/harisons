{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"color\", \"fontFamily\", \"size\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { useTheme } from '../../theme';\nvar emptyObject = {};\nvar Text = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Text(props, ref) {\n  var className = props.className,\n      _props$color = props.color,\n      colorProp = _props$color === void 0 ? 'default' : _props$color,\n      _props$fontFamily = props.fontFamily,\n      fontFamily = _props$fontFamily === void 0 ? 'ui' : _props$fontFamily,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 400 : _props$size,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var theme = useTheme();\n  var colors = theme.colors,\n      fontFamilies = theme.fontFamilies;\n  var color = colorProp === 'none' || colorProp === 'default' ? 'default' : colorProp;\n  var themedFontFamily = fontFamilies[fontFamily] || fontFamily;\n  var themedColor = colors[color] || colors.text && colors.text[color] || color;\n  var textStyle = useStyleConfig('Text', {\n    size: size\n  }, emptyObject, emptyObject);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    is: \"span\",\n    ref: ref\n  }, textStyle, {\n    fontFamily: themedFontFamily,\n    color: themedColor,\n    className: className\n  }, restProps));\n}));\nText.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {\n  /**\n   * Size of the text style.\n   * Can be: 300, 400, 500, 600.\n   */\n  size: PropTypes.oneOf([300, 400, 500, 600]),\n\n  /**\n   * Font family.\n   * Can be: `ui`, `display` or `mono` or a custom font family.\n   */\n  fontFamily: PropTypes.string\n});\nexport default Text;","map":{"version":3,"sources":["../../../src/typography/src/Text.js"],"names":["emptyObject","Text","memo","forwardRef","className","colorProp","fontFamily","size","restProps","props","theme","useTheme","colors","fontFamilies","color","themedFontFamily","themedColor","textStyle","useStyleConfig","ref","Box","PropTypes","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,GAAA,MAAA,QAAA;AACA,SAAA,cAAA,QAAA,aAAA;AACA,SAAA,QAAA,QAAA,aAAA;AAEA,IAAMA,WAAW,GAAjB,EAAA;AAEA,IAAMC,IAAI,GAAA,aAAGC,IAAI,EAAA,aACfC,UAAU,CAAC,SAAA,IAAA,CAAA,KAAA,EAAA,GAAA,EAA0B;AACnC,MAAQC,SAAR,GAAiGK,KAAjG,CAAA,SAAA;AAAA,MAAA,YAAA,GAAiGA,KAAjG,CAAA,KAAA;AAAA,MAA0BJ,SAA1B,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,YAAA;AAAA,MAAA,iBAAA,GAAiGI,KAAjG,CAAA,UAAA;AAAA,MAAiDH,UAAjD,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,iBAAA;AAAA,MAAA,WAAA,GAAiGG,KAAjG,CAAA,IAAA;AAAA,MAAoEF,IAApE,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,WAAA;AAAA,MAAmFC,SAAnF,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AAEA,MAAME,KAAK,GAAGC,QAAd,EAAA;AACA,MAAQC,MAAR,GAAiCF,KAAjC,CAAA,MAAA;AAAA,MAAgBG,YAAhB,GAAiCH,KAAjC,CAAA,YAAA;AAEA,MAAMI,KAAK,GAAGT,SAAS,KAATA,MAAAA,IAAwBA,SAAS,KAAjCA,SAAAA,GAAAA,SAAAA,GAAd,SAAA;AAEA,MAAMU,gBAAgB,GAAGF,YAAY,CAAZA,UAAY,CAAZA,IAAzB,UAAA;AACA,MAAMG,WAAW,GAAGJ,MAAM,CAANA,KAAM,CAANA,IAAkBA,MAAM,CAANA,IAAAA,IAAeA,MAAM,CAANA,IAAAA,CAAjCA,KAAiCA,CAAjCA,IAApB,KAAA;AAEA,MAAMK,SAAS,GAAGC,cAAc,CAAA,MAAA,EAAS;AAAEX,IAAAA,IAAI,EAAJA;AAAF,GAAT,EAAA,WAAA,EAAhC,WAAgC,CAAhC;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,EAAE,EADJ,MAAA;AAEE,IAAA,GAAG,EAAEY;AAFP,GAAA,EAAA,SAAA,EAAA;AAIE,IAAA,UAAU,EAJZ,gBAAA;AAKE,IAAA,KAAK,EALP,WAAA;AAME,IAAA,SAAS,EAAEf;AANb,GAAA,EADF,SACE,CAAA,CADF;AAdJ,CACY,CADK,CAAjB;AA4BAH,IAAI,CAAJA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAIKmB,GAAG,CAJRnB,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAME;AACF;AACA;AACA;AACEM,EAAAA,IAAI,EAAEc,SAAS,CAATA,KAAAA,CAAgB,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAVxBpB,GAUwB,CAAhBoB,CAVRpB;;AAYE;AACF;AACA;AACA;AACEK,EAAAA,UAAU,EAAEe,SAAS,CAACC;AAhBxBrB,CAAAA,CAAAA;AAmBA,eAAA,IAAA","sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { useStyleConfig } from '../../hooks'\nimport { useTheme } from '../../theme'\n\nconst emptyObject = {}\n\nconst Text = memo(\n  forwardRef(function Text(props, ref) {\n    const { className, color: colorProp = 'default', fontFamily = 'ui', size = 400, ...restProps } = props\n\n    const theme = useTheme()\n    const { colors, fontFamilies } = theme\n\n    const color = colorProp === 'none' || colorProp === 'default' ? 'default' : colorProp\n\n    const themedFontFamily = fontFamilies[fontFamily] || fontFamily\n    const themedColor = colors[color] || (colors.text && colors.text[color]) || color\n\n    const textStyle = useStyleConfig('Text', { size }, emptyObject, emptyObject)\n\n    return (\n      <Box\n        is=\"span\"\n        ref={ref}\n        {...textStyle}\n        fontFamily={themedFontFamily}\n        color={themedColor}\n        className={className}\n        {...restProps}\n      />\n    )\n  })\n)\n\nText.propTypes = {\n  /**\n   * Composes the Box component as the base.\n   */\n  ...Box.propTypes,\n\n  /**\n   * Size of the text style.\n   * Can be: 300, 400, 500, 600.\n   */\n  size: PropTypes.oneOf([300, 400, 500, 600]),\n\n  /**\n   * Font family.\n   * Can be: `ui`, `display` or `mono` or a custom font family.\n   */\n  fontFamily: PropTypes.string\n}\n\nexport default Text\n"]},"metadata":{},"sourceType":"module"}