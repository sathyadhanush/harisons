{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"color\", \"name\", \"size\", \"svgPaths16\", \"svgPaths20\", \"title\"],\n    _excluded2 = [\"className\"];\nimport React, { forwardRef } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nvar pseudoSelectors = {};\nvar internalStyles = {};\nvar Icon = /*#__PURE__*/forwardRef(function Icon(_ref, ref) {\n  var className = _ref.className,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      name = _ref.name,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 16 : _ref$size,\n      svgPaths16 = _ref.svgPaths16,\n      svgPaths20 = _ref.svgPaths20,\n      title = _ref.title,\n      svgProps = _objectWithoutProperties(_ref, _excluded);\n\n  var _useStyleConfig = useStyleConfig('Icon', {\n    color: color\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var SIZE_STANDARD = 16;\n  var SIZE_LARGE = 20; // Choose which pixel grid is most appropriate for given icon size\n\n  var pixelGridSize = size >= SIZE_LARGE ? SIZE_LARGE : SIZE_STANDARD;\n  var pathStrings = pixelGridSize === SIZE_STANDARD ? svgPaths16 : svgPaths20;\n  var paths = pathStrings.map(function (d, i) {\n    return (\n      /*#__PURE__*/\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(\"path\", {\n        key: i,\n        d: d,\n        fillRule: \"evenodd\"\n      })\n    );\n  });\n  var viewBox = \"0 0 \".concat(pixelGridSize, \" \").concat(pixelGridSize);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    is: \"svg\",\n    ref: ref,\n    className: cx(className, themedClassName)\n  }, styleProps, svgProps, {\n    \"data-icon\": name,\n    width: size,\n    height: size,\n    viewBox: viewBox\n  }), title && /*#__PURE__*/React.createElement(\"title\", null, title), paths);\n});\nIcon.propTypes = {\n  /**\n   * Class name passed to the component.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Color of icon. Equivalent to setting CSS `fill` property.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Size of the icon, in pixels.\n   * Blueprint contains 16px and 20px SVG icon images,\n   * and chooses the appropriate resolution based on this prop.\n   */\n  size: PropTypes.number,\n\n  /**\n   * Name of the icon\n   */\n  name: PropTypes.string,\n\n  /**\n   * Description string.\n   * Browsers usually render this as a tooltip on hover, whereas screen\n   * readers will use it for aural feedback.\n   * By default, this is set to the icon's name for accessibility.\n   */\n  title: PropTypes.string,\n  svgPaths16: PropTypes.arrayOf(PropTypes.string).isRequired,\n  svgPaths20: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default Icon;","map":{"version":3,"sources":["../../../src/icons/src/Icon.js"],"names":["pseudoSelectors","internalStyles","Icon","forwardRef","className","color","name","size","svgPaths16","svgPaths20","title","svgProps","themedClassName","styleProps","useStyleConfig","SIZE_STANDARD","SIZE_LARGE","pixelGridSize","pathStrings","paths","viewBox","cx","PropTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { useStyleConfig } from '../../hooks'\n\nconst pseudoSelectors = {}\nconst internalStyles = {}\n\nconst Icon = forwardRef(function Icon(\n  { className, color = 'currentColor', name, size = 16, svgPaths16, svgPaths20, title, ...svgProps },\n  ref\n) {\n  const { className: themedClassName, ...styleProps } = useStyleConfig(\n    'Icon',\n    { color },\n    pseudoSelectors,\n    internalStyles\n  )\n  const SIZE_STANDARD = 16\n  const SIZE_LARGE = 20\n\n  // Choose which pixel grid is most appropriate for given icon size\n  const pixelGridSize = size >= SIZE_LARGE ? SIZE_LARGE : SIZE_STANDARD\n  const pathStrings = pixelGridSize === SIZE_STANDARD ? svgPaths16 : svgPaths20\n  const paths = pathStrings.map((d, i) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <path key={i} d={d} fillRule=\"evenodd\" />\n  ))\n\n  const viewBox = `0 0 ${pixelGridSize} ${pixelGridSize}`\n\n  return (\n    <Box\n      is=\"svg\"\n      ref={ref}\n      className={cx(className, themedClassName)}\n      {...styleProps}\n      {...svgProps}\n      data-icon={name}\n      width={size}\n      height={size}\n      viewBox={viewBox}\n    >\n      {title && <title>{title}</title>}\n      {paths}\n    </Box>\n  )\n})\n\nIcon.propTypes = {\n  /**\n   * Class name passed to the component.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Color of icon. Equivalent to setting CSS `fill` property.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Size of the icon, in pixels.\n   * Blueprint contains 16px and 20px SVG icon images,\n   * and chooses the appropriate resolution based on this prop.\n   */\n  size: PropTypes.number,\n\n  /**\n   * Name of the icon\n   */\n  name: PropTypes.string,\n\n  /**\n   * Description string.\n   * Browsers usually render this as a tooltip on hover, whereas screen\n   * readers will use it for aural feedback.\n   * By default, this is set to the icon's name for accessibility.\n   */\n  title: PropTypes.string,\n\n  svgPaths16: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n  svgPaths20: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Icon\n"]},"metadata":{},"sourceType":"module"}