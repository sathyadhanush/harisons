{"ast":null,"code":"var baseStyle = {\n  fontFamily: 'fontFamilies.ui',\n  border: '1px solid transparent',\n  borderRadius: 'radii.1',\n  color: function color(theme, _ref) {\n    var _color = _ref.color;\n    return theme.colors[_color] || _color || 'colors.default';\n  },\n  transition: 'box-shadow 80ms ease-in-out',\n  _focus: {\n    boxShadow: 'shadows.focusRing'\n  },\n  _disabled: {\n    cursor: 'not-allowed',\n    pointerEvents: 'none'\n  }\n};\n\nvar colorKeyForAppearanceOrIntent = function colorKeyForAppearanceOrIntent(appearance, intent) {\n  if (appearance === 'destructive') {\n    return 'red';\n  }\n\n  switch (intent) {\n    case 'success':\n      return 'green';\n\n    case 'danger':\n      return 'red';\n\n    default:\n      return 'blue';\n  }\n};\n\nvar colorKeyForIntent = function colorKeyForIntent(intent) {\n  if (intent === 'danger') {\n    return \"red500\";\n  } else if (intent === 'success') {\n    return \"green500\";\n  } else {\n    return \"gray800\";\n  }\n};\n\nvar borderColorForIntent = function borderColorForIntent(intent, isHover) {\n  if (intent === 'danger') {\n    return \"red\".concat(isHover ? 500 : 300);\n  } else if (intent === 'success') {\n    return \"green\".concat(isHover ? 400 : 300);\n  } else {\n    return \"gray\".concat(isHover ? 600 : 500);\n  }\n};\n\nvar getPrimaryButtonAppearance = function getPrimaryButtonAppearance(appearance, intent, textColor, theme) {\n  var color = colorKeyForAppearanceOrIntent(appearance, intent);\n  return {\n    backgroundColor: \"colors.\".concat(color, \"500\"),\n    borderColor: \"colors.\".concat(color, \"500\"),\n    color: textColor || 'white',\n    _hover: {\n      backgroundColor: \"colors.\".concat(color, \"600\"),\n      borderColor: \"colors.\".concat(color, \"600\")\n    },\n    _disabled: {\n      backgroundColor: \"colors.\".concat(color, \"100\"),\n      borderColor: \"colors.\".concat(color, \"100\")\n    },\n    _focus: {\n      backgroundColor: \"colors.\".concat(color, \"500\"),\n      boxShadow: \"0 0 0 2px \".concat(theme && theme.colors[\"\".concat(color, \"100\")]),\n      borderColor: \"colors.\".concat(color, \"500\")\n    },\n    _active: {\n      backgroundColor: \"colors.\".concat(color, \"700\"),\n      borderColor: \"colors.\".concat(color, \"700\")\n    }\n  };\n};\n\nvar appearances = {\n  primary: function primary(theme, _ref2) {\n    var appearance = _ref2.appearance,\n        color = _ref2.color,\n        intent = _ref2.intent;\n    return getPrimaryButtonAppearance(appearance, intent, color, theme);\n  },\n  \"default\": {\n    backgroundColor: 'white',\n    border: function border(theme, props) {\n      return \"1px solid \".concat(theme.colors[borderColorForIntent(props.intent)]);\n    },\n    color: function color(theme, props) {\n      return props.color || theme.colors[colorKeyForIntent(props.intent)];\n    },\n    _disabled: {\n      color: 'colors.gray500',\n      borderColor: 'colors.gray300'\n    },\n    _hover: {\n      border: function border(theme, props) {\n        return \"1px solid \".concat(theme.colors[borderColorForIntent(props.intent, true)]);\n      },\n      backgroundColor: 'colors.gray50'\n    },\n    _active: {\n      backgroundColor: 'colors.gray100'\n    }\n  },\n  minimal: {\n    backgroundColor: 'transparent',\n    color: function color(theme, props) {\n      return props.color || theme.colors[colorKeyForIntent(props.intent)];\n    },\n    _disabled: {\n      color: 'colors.gray500',\n      opacity: 0.6\n    },\n    _hover: {\n      backgroundColor: 'colors.gray100'\n    },\n    _active: {\n      backgroundColor: 'colors.gray200'\n    }\n  },\n  destructive: getPrimaryButtonAppearance('destructive')\n};\nvar sizes = {\n  small: {\n    height: 24,\n    minWidth: 24,\n    fontSize: 'fontSizes.1',\n    lineHeight: '24px',\n    paddingLeft: 12,\n    paddingRight: 12\n  },\n  medium: {\n    height: 32,\n    minWidth: 32,\n    fontSize: 'fontSizes.1',\n    lineHeight: '32px',\n    paddingLeft: 16,\n    paddingRight: 16\n  },\n  large: {\n    height: 40,\n    minWidth: 40,\n    fontSize: 'fontSizes.2',\n    lineHeight: '40px',\n    paddingLeft: 20,\n    paddingRight: 20\n  }\n};\nexport default {\n  baseStyle: baseStyle,\n  appearances: appearances,\n  sizes: sizes\n};","map":{"version":3,"sources":["../../../../src/themes/default/components/button.js"],"names":["baseStyle","fontFamily","border","borderRadius","color","theme","transition","_focus","boxShadow","_disabled","cursor","pointerEvents","colorKeyForAppearanceOrIntent","appearance","colorKeyForIntent","intent","borderColorForIntent","isHover","getPrimaryButtonAppearance","backgroundColor","borderColor","textColor","_hover","_active","appearances","primary","props","minimal","opacity","destructive","sizes","small","height","minWidth","fontSize","lineHeight","paddingLeft","paddingRight","medium","large"],"mappings":"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","sourcesContent":["const baseStyle = {\n  fontFamily: 'fontFamilies.ui',\n  border: '1px solid transparent',\n  borderRadius: 'radii.1',\n  color: (theme, { color }) => theme.colors[color] || color || 'colors.default',\n  transition: 'box-shadow 80ms ease-in-out',\n\n  _focus: {\n    boxShadow: 'shadows.focusRing'\n  },\n\n  _disabled: {\n    cursor: 'not-allowed',\n    pointerEvents: 'none'\n  }\n}\n\nconst colorKeyForAppearanceOrIntent = (appearance, intent) => {\n  if (appearance === 'destructive') {\n    return 'red'\n  }\n\n  switch (intent) {\n    case 'success':\n      return 'green'\n    case 'danger':\n      return 'red'\n    default:\n      return 'blue'\n  }\n}\n\nconst colorKeyForIntent = intent => {\n  if (intent === 'danger') {\n    return `red500`\n  } else if (intent === 'success') {\n    return `green500`\n  } else {\n    return `gray800`\n  }\n}\n\nconst borderColorForIntent = (intent, isHover) => {\n  if (intent === 'danger') {\n    return `red${isHover ? 500 : 300}`\n  } else if (intent === 'success') {\n    return `green${isHover ? 400 : 300}`\n  } else {\n    return `gray${isHover ? 600 : 500}`\n  }\n}\n\nconst getPrimaryButtonAppearance = (appearance, intent, textColor, theme) => {\n  const color = colorKeyForAppearanceOrIntent(appearance, intent)\n  return {\n    backgroundColor: `colors.${color}500`,\n    borderColor: `colors.${color}500`,\n    color: textColor || 'white',\n    _hover: {\n      backgroundColor: `colors.${color}600`,\n      borderColor: `colors.${color}600`\n    },\n    _disabled: {\n      backgroundColor: `colors.${color}100`,\n      borderColor: `colors.${color}100`\n    },\n    _focus: {\n      backgroundColor: `colors.${color}500`,\n      boxShadow: `0 0 0 2px ${theme && theme.colors[`${color}100`]}`,\n      borderColor: `colors.${color}500`\n    },\n    _active: {\n      backgroundColor: `colors.${color}700`,\n      borderColor: `colors.${color}700`\n    }\n  }\n}\n\nconst appearances = {\n  primary: (theme, { appearance, color, intent }) => getPrimaryButtonAppearance(appearance, intent, color, theme),\n  default: {\n    backgroundColor: 'white',\n    border: (theme, props) => `1px solid ${theme.colors[borderColorForIntent(props.intent)]}`,\n    color: (theme, props) => props.color || theme.colors[colorKeyForIntent(props.intent)],\n\n    _disabled: {\n      color: 'colors.gray500',\n      borderColor: 'colors.gray300'\n    },\n\n    _hover: {\n      border: (theme, props) => `1px solid ${theme.colors[borderColorForIntent(props.intent, true)]}`,\n      backgroundColor: 'colors.gray50'\n    },\n\n    _active: {\n      backgroundColor: 'colors.gray100'\n    }\n  },\n  minimal: {\n    backgroundColor: 'transparent',\n    color: (theme, props) => props.color || theme.colors[colorKeyForIntent(props.intent)],\n\n    _disabled: {\n      color: 'colors.gray500',\n      opacity: 0.6\n    },\n\n    _hover: {\n      backgroundColor: 'colors.gray100'\n    },\n\n    _active: {\n      backgroundColor: 'colors.gray200'\n    }\n  },\n  destructive: getPrimaryButtonAppearance('destructive')\n}\n\nconst sizes = {\n  small: {\n    height: 24,\n    minWidth: 24,\n    fontSize: 'fontSizes.1',\n    lineHeight: '24px',\n    paddingLeft: 12,\n    paddingRight: 12\n  },\n  medium: {\n    height: 32,\n    minWidth: 32,\n    fontSize: 'fontSizes.1',\n    lineHeight: '32px',\n    paddingLeft: 16,\n    paddingRight: 16\n  },\n  large: {\n    height: 40,\n    minWidth: 40,\n    fontSize: 'fontSizes.2',\n    lineHeight: '40px',\n    paddingLeft: 20,\n    paddingRight: 20\n  }\n}\n\nexport default {\n  baseStyle,\n  appearances,\n  sizes\n}\n"]},"metadata":{},"sourceType":"module"}