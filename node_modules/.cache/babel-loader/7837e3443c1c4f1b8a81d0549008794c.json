{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { memo, useRef, useState, useMemo, useCallback, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLatest } from '../../hooks';\nimport { Textarea } from '../../textarea';\n\nfunction getTableBodyRef(currentRef) {\n  var ref = currentRef;\n  if (!ref) return;\n\n  while (ref) {\n    var isTableBody = ref.hasAttribute('data-evergreen-table-body');\n\n    if (isTableBody) {\n      return ref;\n    }\n\n    if (ref.parentElement) {\n      ref = ref.parentElement;\n    } else {\n      return null;\n    }\n  }\n\n  return ref;\n}\n\nvar EditableCellField = /*#__PURE__*/memo(function EditableCellField(props) {\n  var _props$minHeight = props.minHeight,\n      minHeight = _props$minHeight === void 0 ? 40 : _props$minHeight,\n      _props$minWidth = props.minWidth,\n      minWidth = _props$minWidth === void 0 ? 80 : _props$minWidth,\n      size = props.size,\n      value = props.value,\n      zIndex = props.zIndex;\n  var latestAnimationFrame = useRef();\n  var textareaRef = useRef();\n  var tableBodyRef = useRef();\n  var onCancelRef = useLatest(props.onCancel);\n  var onChangeCompleteRef = useLatest(props.onChangeComplete);\n  var getTargetRef = useLatest(props.getTargetRef);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      height = _useState2[0],\n      setHeight = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      width = _useState4[0],\n      setWidth = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      left = _useState6[0],\n      setLeft = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      top = _useState8[0],\n      setTop = _useState8[1];\n\n  var update = useCallback(function () {\n    function updater() {\n      var targetRef = getTargetRef.current();\n      if (!targetRef) return;\n      tableBodyRef.current = getTableBodyRef(targetRef);\n\n      var _targetRef$getBoundin = targetRef.getBoundingClientRect(),\n          targetHeight = _targetRef$getBoundin.height,\n          targetLeft = _targetRef$getBoundin.left,\n          targetTop = _targetRef$getBoundin.top,\n          targetWidth = _targetRef$getBoundin.width;\n\n      var calculatedTop;\n\n      if (tableBodyRef.current) {\n        var bounds = tableBodyRef.current.getBoundingClientRect();\n        calculatedTop = Math.min(Math.max(targetTop, bounds.top), bounds.bottom - targetHeight);\n      } else {\n        calculatedTop = targetTop;\n      }\n\n      setHeight(targetHeight);\n      setWidth(targetWidth);\n      setLeft(targetLeft);\n      setTop(calculatedTop); // recursively run the updater\n\n      latestAnimationFrame.current = requestAnimationFrame(function () {\n        return updater();\n      });\n    } // kick off the updater\n\n\n    updater(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Mirrors functionality of componentDidMount and componentWillUnmount.\n  // Focus on mount\n\n  useLayoutEffect(function () {\n    update();\n    var requestId = requestAnimationFrame(function () {\n      if (textareaRef.current) {\n        textareaRef.current.focus();\n      }\n    });\n    return function () {\n      cancelAnimationFrame(requestId);\n\n      if (latestAnimationFrame.current) {\n        cancelAnimationFrame(latestAnimationFrame.current);\n      } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n      onCancelRef.current();\n    }; // we only want `update` to run once, and `onCancelRef` is a ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleFocus = useCallback(function (e) {\n    e.target.selectionStart = e.target.value.length;\n  }, []);\n  var handleBlur = useCallback(function () {\n    if (textareaRef.current) {\n      onChangeCompleteRef.current(textareaRef.current.value);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var handleKeyDown = useCallback(function (e) {\n    switch (e.key) {\n      case 'Escape':\n        onCancelRef.current();\n        if (textareaRef.current) textareaRef.current.blur();\n        break;\n\n      case 'Enter':\n        if (textareaRef.current) textareaRef.current.blur();\n        e.preventDefault();\n        break;\n\n      case 'Tab':\n        if (textareaRef.current) textareaRef.current.blur();\n        break;\n\n      default:\n        break;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var style = useMemo(function () {\n    return {\n      left: left,\n      top: top,\n      height: height,\n      minHeight: Math.max(height, minHeight),\n      width: width,\n      minWidth: Math.max(width, minWidth),\n      zIndex: zIndex\n    };\n  }, [left, top, height, width, minHeight, minWidth, zIndex]);\n  return /*#__PURE__*/React.createElement(Textarea, {\n    ref: textareaRef,\n    onKeyDown: handleKeyDown,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    appearance: \"editable-cell\",\n    size: size,\n    style: style,\n    height: null,\n    width: null,\n    minHeight: null,\n    position: \"fixed\",\n    defaultValue: value\n  });\n});\nEditableCellField.propTypes = {\n  /**\n   * Used as the defaultValue of the textarea.\n   */\n  value: PropTypes.string.isRequired,\n\n  /**\n   * The z-index placed on the element.\n   */\n  zIndex: PropTypes.number.isRequired,\n\n  /**\n   * Function to get the target ref of the parent.\n   * Used to mirror the position.\n   */\n  getTargetRef: PropTypes.func.isRequired,\n\n  /**\n   * Min width of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minWidth: PropTypes.number,\n\n  /**\n   * Min height of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minHeight: PropTypes.number,\n\n  /**\n   * Called when the textarea is blurred, pass the value back to the cell.\n   */\n  onChangeComplete: PropTypes.func.isRequired,\n\n  /**\n   * Called when Escape is hit or componentWillUnmount.\n   */\n  onCancel: PropTypes.func.isRequired,\n\n  /**\n   * Text size of the textarea.\n   */\n  size: PropTypes.number\n};\nexport default EditableCellField;","map":{"version":3,"sources":["../../../src/table/src/EditableCellField.js"],"names":["ref","isTableBody","EditableCellField","memo","minHeight","minWidth","size","value","zIndex","props","latestAnimationFrame","useRef","textareaRef","tableBodyRef","onCancelRef","useLatest","onChangeCompleteRef","getTargetRef","height","setHeight","useState","width","setWidth","left","setLeft","top","setTop","update","useCallback","targetRef","getTableBodyRef","targetHeight","targetLeft","targetTop","targetWidth","bounds","calculatedTop","Math","requestAnimationFrame","updater","useLayoutEffect","requestId","cancelAnimationFrame","handleFocus","e","handleBlur","handleKeyDown","style","useMemo","PropTypes","onChangeComplete","onCancel","number"],"mappings":"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","sourcesContent":["import React, { memo, useRef, useState, useMemo, useCallback, useLayoutEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useLatest } from '../../hooks'\nimport { Textarea } from '../../textarea'\n\nfunction getTableBodyRef(currentRef) {\n  let ref = currentRef\n\n  if (!ref) return\n\n  while (ref) {\n    const isTableBody = ref.hasAttribute('data-evergreen-table-body')\n    if (isTableBody) {\n      return ref\n    }\n\n    if (ref.parentElement) {\n      ref = ref.parentElement\n    } else {\n      return null\n    }\n  }\n\n  return ref\n}\n\nconst EditableCellField = memo(function EditableCellField(props) {\n  const { minHeight = 40, minWidth = 80, size, value, zIndex } = props\n\n  const latestAnimationFrame = useRef()\n  const textareaRef = useRef()\n  const tableBodyRef = useRef()\n  const onCancelRef = useLatest(props.onCancel)\n  const onChangeCompleteRef = useLatest(props.onChangeComplete)\n  const getTargetRef = useLatest(props.getTargetRef)\n  const [height, setHeight] = useState(0)\n  const [width, setWidth] = useState(0)\n  const [left, setLeft] = useState(0)\n  const [top, setTop] = useState(0)\n\n  const update = useCallback(() => {\n    function updater() {\n      const targetRef = getTargetRef.current()\n      if (!targetRef) return\n      tableBodyRef.current = getTableBodyRef(targetRef)\n\n      const {\n        height: targetHeight,\n        left: targetLeft,\n        top: targetTop,\n        width: targetWidth\n      } = targetRef.getBoundingClientRect()\n\n      let calculatedTop\n      if (tableBodyRef.current) {\n        const bounds = tableBodyRef.current.getBoundingClientRect()\n        calculatedTop = Math.min(Math.max(targetTop, bounds.top), bounds.bottom - targetHeight)\n      } else {\n        calculatedTop = targetTop\n      }\n\n      setHeight(targetHeight)\n      setWidth(targetWidth)\n      setLeft(targetLeft)\n      setTop(calculatedTop)\n\n      // recursively run the updater\n      latestAnimationFrame.current = requestAnimationFrame(() => updater())\n    }\n\n    // kick off the updater\n    updater()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  // Mirrors functionality of componentDidMount and componentWillUnmount.\n  // Focus on mount\n  useLayoutEffect(() => {\n    update()\n\n    const requestId = requestAnimationFrame(() => {\n      if (textareaRef.current) {\n        textareaRef.current.focus()\n      }\n    })\n\n    return () => {\n      cancelAnimationFrame(requestId)\n\n      if (latestAnimationFrame.current) {\n        cancelAnimationFrame(latestAnimationFrame.current)\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      onCancelRef.current()\n    }\n    // we only want `update` to run once, and `onCancelRef` is a ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleFocus = useCallback(e => {\n    e.target.selectionStart = e.target.value.length\n  }, [])\n\n  const handleBlur = useCallback(() => {\n    if (textareaRef.current) {\n      onChangeCompleteRef.current(textareaRef.current.value)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleKeyDown = useCallback(e => {\n    switch (e.key) {\n      case 'Escape':\n        onCancelRef.current()\n        if (textareaRef.current) textareaRef.current.blur()\n        break\n      case 'Enter':\n        if (textareaRef.current) textareaRef.current.blur()\n        e.preventDefault()\n        break\n      case 'Tab':\n        if (textareaRef.current) textareaRef.current.blur()\n        break\n      default:\n        break\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const style = useMemo(\n    () => ({\n      left,\n      top,\n      height,\n      minHeight: Math.max(height, minHeight),\n      width,\n      minWidth: Math.max(width, minWidth),\n      zIndex\n    }),\n    [left, top, height, width, minHeight, minWidth, zIndex]\n  )\n\n  return (\n    <Textarea\n      ref={textareaRef}\n      onKeyDown={handleKeyDown}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      appearance=\"editable-cell\"\n      size={size}\n      style={style}\n      height={null}\n      width={null}\n      minHeight={null}\n      position=\"fixed\"\n      defaultValue={value}\n    />\n  )\n})\n\nEditableCellField.propTypes = {\n  /**\n   * Used as the defaultValue of the textarea.\n   */\n  value: PropTypes.string.isRequired,\n\n  /**\n   * The z-index placed on the element.\n   */\n  zIndex: PropTypes.number.isRequired,\n\n  /**\n   * Function to get the target ref of the parent.\n   * Used to mirror the position.\n   */\n  getTargetRef: PropTypes.func.isRequired,\n\n  /**\n   * Min width of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minWidth: PropTypes.number,\n\n  /**\n   * Min height of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minHeight: PropTypes.number,\n\n  /**\n   * Called when the textarea is blurred, pass the value back to the cell.\n   */\n  onChangeComplete: PropTypes.func.isRequired,\n\n  /**\n   * Called when Escape is hit or componentWillUnmount.\n   */\n  onCancel: PropTypes.func.isRequired,\n\n  /**\n   * Text size of the textarea.\n   */\n  size: PropTypes.number\n}\n\nexport default EditableCellField\n"]},"metadata":{},"sourceType":"module"}