{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Positions from '../../constants/src/Position';\nimport { Pane } from '../../layers';\nimport warning from '../../lib/warning';\nimport { Popover } from '../../popover';\nimport { minorScale } from '../../scales';\nimport { Text } from '../../typography';\nimport { Pulsar } from './Pulsar';\nexport var Nudge = function Nudge(_ref) {\n  var children = _ref.children,\n      _ref$isShown = _ref.isShown,\n      isShown = _ref$isShown === void 0 ? false : _ref$isShown,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? Positions.TOP_RIGHT : _ref$position,\n      size = _ref.size,\n      tooltipContentProp = _ref.tooltipContent,\n      onClick = _ref.onClick;\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(true, '<Nudge> is deprecated and will be renamed to Pulsar in the next major version of Evergreen.');\n  }\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isHovered = _useState2[0],\n      setIsHovered = _useState2[1];\n\n  var handleMouseEnter = useCallback(function () {\n    return setIsHovered(true);\n  }, [setIsHovered]);\n  var handleMouseLeave = useCallback(function () {\n    return setIsHovered(false);\n  }, [setIsHovered]);\n  var isTooltipContentString = typeof tooltipContentProp === 'string';\n  var innerContent = isTooltipContentString ? /*#__PURE__*/React.createElement(Text, null, tooltipContentProp) : tooltipContentProp;\n  var tooltipContent = /*#__PURE__*/React.createElement(Pane, {\n    maxWidth: 240,\n    padding: isTooltipContentString ? minorScale(2) : undefined\n  }, innerContent);\n  return /*#__PURE__*/React.createElement(Popover, {\n    content: tooltipContent,\n    position: position,\n    isShown: isShown && isHovered && !!tooltipContentProp,\n    trigger: \"hover\",\n    onOpen: handleMouseEnter,\n    maxWidth: 240\n  }, /*#__PURE__*/React.createElement(Pane, {\n    position: \"relative\",\n    onMouseLeave: handleMouseLeave\n  }, isShown && /*#__PURE__*/React.createElement(Pulsar, {\n    onClick: onClick,\n    position: position,\n    size: size\n  }), children));\n};\nNudge.displayName = \"Nudge\";\nNudge.propTypes = {\n  /**\n   * The position for the Pulsar and the Tooltip\n   */\n  position: PropTypes.oneOf([Positions.TOP_LEFT, Positions.TOP_RIGHT, Positions.BOTTOM_LEFT, Positions.BOTTOM_RIGHT]),\n\n  /**\n   * Size of the Pulsar\n   */\n  size: Pulsar.propTypes.size,\n\n  /**\n   * Wether or not the Pulsar/Tooltip is shown\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Content for the tooltip\n   */\n  tooltipContent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * Content for the pulsar/tooltip to be anchored too\n   */\n  children: PropTypes.node,\n\n  /**\n   * Called when the Pulsar is clicked\n   */\n  onClick: PropTypes.func\n};","map":{"version":3,"sources":["../../../src/pulsar/src/Nudge.js"],"names":["Nudge","children","isShown","position","Positions","TOP_RIGHT","size","tooltipContent","tooltipContentProp","onClick","process","warning","isHovered","setIsHovered","useState","handleMouseEnter","useCallback","handleMouseLeave","isTooltipContentString","innerContent","minorScale","undefined","PropTypes","Pulsar","func"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Positions from '../../constants/src/Position'\nimport { Pane } from '../../layers'\nimport warning from '../../lib/warning'\nimport { Popover } from '../../popover'\nimport { minorScale } from '../../scales'\nimport { Text } from '../../typography'\nimport { Pulsar } from './Pulsar'\n\nexport const Nudge = ({\n  children,\n  isShown = false,\n  position = Positions.TOP_RIGHT,\n  size,\n  tooltipContent: tooltipContentProp,\n  onClick\n}) => {\n  if (process.env.NODE_ENV !== 'production') {\n    warning(true, '<Nudge> is deprecated and will be renamed to Pulsar in the next major version of Evergreen.')\n  }\n\n  const [isHovered, setIsHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setIsHovered(true), [setIsHovered])\n  const handleMouseLeave = useCallback(() => setIsHovered(false), [setIsHovered])\n\n  const isTooltipContentString = typeof tooltipContentProp === 'string'\n  const innerContent = isTooltipContentString ? <Text>{tooltipContentProp}</Text> : tooltipContentProp\n  const tooltipContent = (\n    <Pane maxWidth={240} padding={isTooltipContentString ? minorScale(2) : undefined}>\n      {innerContent}\n    </Pane>\n  )\n\n  return (\n    <Popover\n      content={tooltipContent}\n      position={position}\n      isShown={isShown && isHovered && !!tooltipContentProp}\n      trigger=\"hover\"\n      onOpen={handleMouseEnter}\n      maxWidth={240}\n    >\n      <Pane position=\"relative\" onMouseLeave={handleMouseLeave}>\n        {isShown && <Pulsar onClick={onClick} position={position} size={size} />}\n        {children}\n      </Pane>\n    </Popover>\n  )\n}\n\nNudge.propTypes = {\n  /**\n   * The position for the Pulsar and the Tooltip\n   */\n  position: PropTypes.oneOf([Positions.TOP_LEFT, Positions.TOP_RIGHT, Positions.BOTTOM_LEFT, Positions.BOTTOM_RIGHT]),\n\n  /**\n   * Size of the Pulsar\n   */\n  size: Pulsar.propTypes.size,\n\n  /**\n   * Wether or not the Pulsar/Tooltip is shown\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Content for the tooltip\n   */\n  tooltipContent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * Content for the pulsar/tooltip to be anchored too\n   */\n  children: PropTypes.node,\n\n  /**\n   * Called when the Pulsar is clicked\n   */\n  onClick: PropTypes.func\n}\n"]},"metadata":{},"sourceType":"module"}