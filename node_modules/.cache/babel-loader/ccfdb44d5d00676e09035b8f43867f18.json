{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"addOnBlur\", \"disabled\", \"height\", \"separator\", \"values\", \"tagSubmitKey\", \"tagProps\", \"onAdd\", \"onChange\", \"onRemove\", \"onBlur\", \"onFocus\", \"onInputChange\", \"className\", \"inputProps\", \"inputRef\", \"isInvalid\", \"autocompleteItems\"],\n    _excluded2 = [\"className\"],\n    _excluded3 = [\"onBlur\", \"onChange\", \"onKeyDown\"];\n/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React, { memo, forwardRef, useState } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { Autocomplete } from '../../autocomplete';\nimport { Button } from '../../buttons';\nimport { useId, useStyleConfig } from '../../hooks';\nimport { CaretDownIcon } from '../../icons';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { majorScale, minorScale } from '../../scales';\nimport { TextInput } from '../../text-input';\nimport Tag from './Tag';\nvar GET_KEY_FOR_TAG_DELIMITER = {\n  enter: 'Enter',\n  space: ' '\n};\nvar emptyProps = {};\nvar emptyArray = [];\nvar internalStyles = {\n  alignItems: 'center',\n  display: 'inline-flex',\n  flexWrap: 'wrap',\n  position: 'relative'\n};\nvar pseudoSelectors = {\n  _focused: '&[aria-activedescendant]',\n  _disabled: '&[aria-disabled=\"true\"]',\n  _invalid: '&[aria-invalid=\"true\"]:not(:focus)'\n};\nvar TagInput = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TagInput(props, ref) {\n  var _props$addOnBlur = props.addOnBlur,\n      addOnBlur = _props$addOnBlur === void 0 ? false : _props$addOnBlur,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 32 : _props$height,\n      _props$separator = props.separator,\n      separator = _props$separator === void 0 ? /[,\\n\\r]/ : _props$separator,\n      _props$values = props.values,\n      values = _props$values === void 0 ? emptyArray : _props$values,\n      _props$tagSubmitKey = props.tagSubmitKey,\n      tagSubmitKey = _props$tagSubmitKey === void 0 ? 'enter' : _props$tagSubmitKey,\n      _props$tagProps = props.tagProps,\n      tagProps = _props$tagProps === void 0 ? emptyProps : _props$tagProps,\n      onAdd = props.onAdd,\n      onChange = props.onChange,\n      onRemove = props.onRemove,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      onInputChange = props.onInputChange,\n      className = props.className,\n      _props$inputProps = props.inputProps,\n      inputProps = _props$inputProps === void 0 ? emptyProps : _props$inputProps,\n      inputRef = props.inputRef,\n      isInvalid = props.isInvalid,\n      autocompleteItems = props.autocompleteItems,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFocused = _useState4[0],\n      setIsFocused = _useState4[1];\n\n  var id = useId('TagInput');\n  var inputId = inputProps && inputProps.id ? inputProps.id : id;\n  var hasAutocomplete = Array.isArray(autocompleteItems) && autocompleteItems.length > 0;\n\n  var getValues = function getValues() {\n    var inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return separator ? inputValue.split(separator).map(function (v) {\n      return v.trim();\n    }).filter(function (v) {\n      return v.length > 0;\n    }) : [inputValue];\n  };\n\n  var addTags = function addTags() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var newValues = getValues(value);\n    var shouldClearInput = safeInvoke(onAdd, newValues);\n\n    if (typeof onChange === 'function') {\n      shouldClearInput = shouldClearInput || onChange(values.concat(newValues));\n    }\n\n    if (shouldClearInput !== false) {\n      setInputValue('');\n    }\n  };\n\n  var removeTagAtIndex = function removeTagAtIndex(index) {\n    safeInvoke(onRemove, values[index], index); // Remove item at index as a new array\n\n    var newValues = values.filter(function (_, i) {\n      return i !== index;\n    });\n    safeInvoke(onChange, newValues);\n  };\n\n  var handleBackspaceToRemove = function handleBackspaceToRemove() {\n    removeTagAtIndex(values.length - 1);\n  };\n\n  var handleBlur = function handleBlur(event) {\n    var container = event.target;\n    requestAnimationFrame(function () {\n      if (!container.contains(document.activeElement)) {\n        if (addOnBlur && inputValue) {\n          addTags(inputValue);\n          setInputValue('');\n        }\n\n        setIsFocused(false);\n      }\n    });\n    safeInvoke(onBlur, event);\n  };\n\n  var handleInputChange = function handleInputChange(event) {\n    setInputValue(event.target.value);\n    safeInvoke(onInputChange, event);\n  };\n\n  var handleInputFocus = function handleInputFocus(event) {\n    setIsFocused(true);\n    safeInvoke(onFocus, event);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var _event$target = event.target,\n        selectionEnd = _event$target.selectionEnd,\n        value = _event$target.value;\n    var key = GET_KEY_FOR_TAG_DELIMITER[tagSubmitKey];\n\n    if (event.key === key) {\n      event.preventDefault();\n      addTags(value);\n    } else if (event.key === 'Backspace' && selectionEnd === 0) {\n      handleBackspaceToRemove(event);\n    }\n  };\n\n  var handleRemoveTag = function handleRemoveTag(event) {\n    // Using data attribute to simplify callback logic -- one handler for all children\n    var index = Number(event.currentTarget.parentElement.getAttribute('data-tag-index'));\n    removeTagAtIndex(index);\n  };\n\n  var maybeRenderTag = function maybeRenderTag(tag, index) {\n    if (!tag) {\n      return null;\n    }\n\n    var propsForElement = safeInvoke(tagProps, tag, index) || tagProps;\n    return /*#__PURE__*/React.createElement(Tag, _extends({\n      key: \"\".concat(tag, \":\").concat(index),\n      \"data-tag-index\": index,\n      marginX: majorScale(1),\n      marginY: minorScale(1) * 1.5,\n      onRemove: disabled ? null : handleRemoveTag,\n      isRemovable: !disabled\n    }, propsForElement), tag);\n  };\n\n  var _useStyleConfig = useStyleConfig('TagInput', {\n    appearance: 'default',\n    height: height\n  }, pseudoSelectors, internalStyles),\n      themedContainerClassName = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    \"aria-disabled\": disabled || undefined,\n    \"aria-activedescendant\": isFocused ? inputId : undefined,\n    \"aria-invalid\": isInvalid,\n    className: cx(themedContainerClassName, className),\n    ref: ref,\n    onBlur: handleBlur\n  }, boxProps, rest, {\n    paddingRight: hasAutocomplete ? majorScale(3) : undefined\n  }), values.map(maybeRenderTag), /*#__PURE__*/React.createElement(Box, {\n    flexGrow: \"1\",\n    display: \"inline-block\"\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    onChange: function onChange(changedItem) {\n      addTags(changedItem);\n      setInputValue('');\n    },\n    items: hasAutocomplete ? autocompleteItems : [],\n    id: inputId,\n    selectedItem: \"\",\n    inputValue: inputValue\n  }, function (autocompleteProps) {\n    var closeMenu = autocompleteProps.closeMenu,\n        getInputProps = autocompleteProps.getInputProps,\n        autocompleteGetRef = autocompleteProps.getRef,\n        getToggleButtonProps = autocompleteProps.getToggleButtonProps,\n        highlightedIndex = autocompleteProps.highlightedIndex;\n\n    var _getInputProps = getInputProps(),\n        autocompleteOnBlur = _getInputProps.onBlur,\n        autocompleteOnChange = _getInputProps.onChange,\n        autocompleteKeyDown = _getInputProps.onKeyDown,\n        autocompleteRestProps = _objectWithoutProperties(_getInputProps, _excluded3);\n\n    var handleAutocompleteKeydown = function handleAutocompleteKeydown(e) {\n      autocompleteKeyDown(e);\n\n      if (e.key === 'Backspace' || !(highlightedIndex > -1)) {\n        handleKeyDown(e);\n\n        if (e.key === GET_KEY_FOR_TAG_DELIMITER[tagSubmitKey]) {\n          closeMenu();\n          setInputValue('');\n        }\n      }\n\n      if (e.key === 'Backspace' && e.target.selectionEnd === 0) {\n        closeMenu();\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, _extends({\n      appearance: \"none\",\n      disabled: disabled,\n      height: height - 4,\n      width: \"100%\",\n      type: \"text\"\n    }, inputProps, autocompleteRestProps, {\n      value: inputValue,\n      id: inputId,\n      ref: function ref(textInputRef) {\n        autocompleteGetRef(textInputRef);\n\n        if (inputRef instanceof Function) {\n          inputRef(textInputRef);\n        } else if (inputRef) {\n          inputRef.current = textInputRef;\n        }\n      },\n      onBlur: function onBlur(e) {\n        autocompleteOnBlur(e);\n        safeInvoke(inputProps.onBlur, e);\n      },\n      onFocus: function onFocus(e) {\n        handleInputFocus(e);\n        safeInvoke(inputProps.onFocus, e);\n      },\n      onChange: function onChange(e) {\n        handleInputChange(e);\n        autocompleteOnChange(e);\n      },\n      onKeyDown: handleAutocompleteKeydown\n    })), hasAutocomplete && /*#__PURE__*/React.createElement(Button, _extends({\n      appearance: \"none\",\n      background: \"gray100\",\n      position: \"absolute\",\n      top: minorScale(1) * 1.5,\n      right: minorScale(1),\n      height: minorScale(5),\n      padding: 0,\n      width: minorScale(5),\n      minWidth: minorScale(5),\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      borderRadius: minorScale(1),\n      cursor: disabled ? undefined : 'pointer',\n      \"data-testid\": \"TagInput-autocomplete-toggle\"\n    }, getToggleButtonProps()), /*#__PURE__*/React.createElement(CaretDownIcon, {\n      color: \"muted\"\n    })));\n  })));\n}));\nTagInput.propTypes = {\n  /** Whether or not the inputValue should be added to the tags when the input blurs. */\n  addOnBlur: PropTypes.bool,\n\n  /** Autocomplete options to show when typing in a new value */\n  autocompleteItems: PropTypes.array,\n\n  /** The class name to apply to the container component. */\n  className: PropTypes.string,\n\n  /** Whether or not the input should be disabled. */\n  disabled: PropTypes.bool,\n\n  /** Whether or not the input is invalid. */\n  isInvalid: PropTypes.bool,\n\n  /** The vertical size of the input */\n  height: PropTypes.number,\n\n  /** Props to pass to the input component. Note that `ref` and `key` are not supported. See `inputRef`. */\n  inputProps: PropTypes.object,\n\n  /**\n   * Ref handler for the input element.\n   * (input: HTMLInputElement | null) => void\n   */\n  inputRef: PropTypes.func,\n\n  /**\n   * Callback invoked when new tags are added.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onAdd: PropTypes.func,\n\n  /**\n   * Callback invoked when focus on the input blurs.\n   * (event) => void\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback invoked when the tag values change.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback invoked when the input receives focus.\n   * (event) => void\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback invoked when the value of the input is changed. Shorthand for `inputProps={{ onChange }}`.\n   * (event) => void\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback invoked when a tag is removed.\n   * Receives value and index of removed tag.\n   * (value: string | node, index: number) => void\n   */\n  onRemove: PropTypes.func,\n\n  /** Value or RegExp to split on pasted text or on enter keypress */\n  separator: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([false])]),\n\n  /** Provide props to tag component (actually `Badge`, for now). */\n  tagProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /** Key to press in order to submit a new tag while typing.  */\n  tagSubmitKey: PropTypes.oneOf(['enter', 'space']),\n\n  /** Controlled tag values. Each value is rendered inside a tag. */\n  values: PropTypes.arrayOf(PropTypes.node)\n};\nexport default TagInput;","map":{"version":3,"sources":["../../../src/tag-input/src/TagInput.js"],"names":["GET_KEY_FOR_TAG_DELIMITER","enter","space","emptyProps","emptyArray","internalStyles","alignItems","display","flexWrap","position","pseudoSelectors","_focused","_disabled","_invalid","TagInput","memo","forwardRef","addOnBlur","disabled","height","separator","values","tagSubmitKey","tagProps","onAdd","onChange","onRemove","onBlur","onFocus","onInputChange","className","inputProps","inputRef","isInvalid","autocompleteItems","rest","props","inputValue","setInputValue","useState","isFocused","setIsFocused","id","useId","inputId","hasAutocomplete","Array","getValues","v","addTags","value","newValues","shouldClearInput","safeInvoke","removeTagAtIndex","i","handleBackspaceToRemove","handleBlur","container","event","requestAnimationFrame","document","handleInputChange","handleInputFocus","handleKeyDown","selectionEnd","key","handleRemoveTag","index","Number","maybeRenderTag","propsForElement","majorScale","minorScale","themedContainerClassName","boxProps","useStyleConfig","appearance","cx","undefined","closeMenu","getInputProps","autocompleteGetRef","getToggleButtonProps","highlightedIndex","autocompleteProps","autocompleteOnBlur","autocompleteOnChange","autocompleteKeyDown","autocompleteRestProps","handleAutocompleteKeydown","e","PropTypes"],"mappings":"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","sourcesContent":["/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React, { memo, forwardRef, useState } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { Autocomplete } from '../../autocomplete'\nimport { Button } from '../../buttons'\nimport { useId, useStyleConfig } from '../../hooks'\nimport { CaretDownIcon } from '../../icons'\nimport safeInvoke from '../../lib/safe-invoke'\nimport { majorScale, minorScale } from '../../scales'\nimport { TextInput } from '../../text-input'\nimport Tag from './Tag'\n\nconst GET_KEY_FOR_TAG_DELIMITER = {\n  enter: 'Enter',\n  space: ' '\n}\n\nconst emptyProps = {}\nconst emptyArray = []\n\nconst internalStyles = {\n  alignItems: 'center',\n  display: 'inline-flex',\n  flexWrap: 'wrap',\n  position: 'relative'\n}\n\nconst pseudoSelectors = {\n  _focused: '&[aria-activedescendant]',\n  _disabled: '&[aria-disabled=\"true\"]',\n  _invalid: '&[aria-invalid=\"true\"]:not(:focus)'\n}\n\nconst TagInput = memo(\n  forwardRef(function TagInput(props, ref) {\n    const {\n      addOnBlur = false,\n      disabled = false,\n      height = 32,\n      separator = /[,\\n\\r]/,\n      values = emptyArray,\n      tagSubmitKey = 'enter',\n      tagProps = emptyProps,\n      onAdd,\n      onChange,\n      onRemove,\n      onBlur,\n      onFocus,\n      onInputChange,\n      className,\n      inputProps = emptyProps,\n      inputRef,\n      isInvalid,\n      autocompleteItems,\n      ...rest\n    } = props\n    const [inputValue, setInputValue] = useState('')\n    const [isFocused, setIsFocused] = useState(false)\n    const id = useId('TagInput')\n\n    const inputId = inputProps && inputProps.id ? inputProps.id : id\n    const hasAutocomplete = Array.isArray(autocompleteItems) && autocompleteItems.length > 0\n\n    const getValues = (inputValue = '') =>\n      separator\n        ? inputValue\n            .split(separator)\n            .map(v => v.trim())\n            .filter(v => v.length > 0)\n        : [inputValue]\n\n    const addTags = (value = '') => {\n      const newValues = getValues(value)\n      let shouldClearInput = safeInvoke(onAdd, newValues)\n\n      if (typeof onChange === 'function') {\n        shouldClearInput = shouldClearInput || onChange(values.concat(newValues))\n      }\n\n      if (shouldClearInput !== false) {\n        setInputValue('')\n      }\n    }\n\n    const removeTagAtIndex = index => {\n      safeInvoke(onRemove, values[index], index)\n\n      // Remove item at index as a new array\n      const newValues = values.filter((_, i) => i !== index)\n      safeInvoke(onChange, newValues)\n    }\n\n    const handleBackspaceToRemove = () => {\n      removeTagAtIndex(values.length - 1)\n    }\n\n    const handleBlur = event => {\n      const container = event.target\n\n      requestAnimationFrame(() => {\n        if (!container.contains(document.activeElement)) {\n          if (addOnBlur && inputValue) {\n            addTags(inputValue)\n            setInputValue('')\n          }\n\n          setIsFocused(false)\n        }\n      })\n\n      safeInvoke(onBlur, event)\n    }\n\n    const handleInputChange = event => {\n      setInputValue(event.target.value)\n      safeInvoke(onInputChange, event)\n    }\n\n    const handleInputFocus = event => {\n      setIsFocused(true)\n      safeInvoke(onFocus, event)\n    }\n\n    const handleKeyDown = event => {\n      const { selectionEnd, value } = event.target\n      const key = GET_KEY_FOR_TAG_DELIMITER[tagSubmitKey]\n\n      if (event.key === key) {\n        event.preventDefault()\n        addTags(value)\n      } else if (event.key === 'Backspace' && selectionEnd === 0) {\n        handleBackspaceToRemove(event)\n      }\n    }\n\n    const handleRemoveTag = event => {\n      // Using data attribute to simplify callback logic -- one handler for all children\n      const index = Number(event.currentTarget.parentElement.getAttribute('data-tag-index'))\n      removeTagAtIndex(index)\n    }\n\n    const maybeRenderTag = (tag, index) => {\n      if (!tag) {\n        return null\n      }\n\n      const propsForElement = safeInvoke(tagProps, tag, index) || tagProps\n\n      return (\n        <Tag\n          key={`${tag}:${index}`}\n          data-tag-index={index}\n          marginX={majorScale(1)}\n          marginY={minorScale(1) * 1.5}\n          onRemove={disabled ? null : handleRemoveTag}\n          isRemovable={!disabled}\n          {...propsForElement}\n        >\n          {tag}\n        </Tag>\n      )\n    }\n\n    const { className: themedContainerClassName, ...boxProps } = useStyleConfig(\n      'TagInput',\n      { appearance: 'default', height },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    return (\n      <Box\n        aria-disabled={disabled || undefined}\n        aria-activedescendant={isFocused ? inputId : undefined}\n        aria-invalid={isInvalid}\n        className={cx(themedContainerClassName, className)}\n        ref={ref}\n        onBlur={handleBlur}\n        {...boxProps}\n        {...rest}\n        paddingRight={hasAutocomplete ? majorScale(3) : undefined}\n      >\n        {values.map(maybeRenderTag)}\n        <Box flexGrow=\"1\" display=\"inline-block\">\n          <Autocomplete\n            onChange={changedItem => {\n              addTags(changedItem)\n              setInputValue('')\n            }}\n            items={hasAutocomplete ? autocompleteItems : []}\n            id={inputId}\n            selectedItem=\"\"\n            inputValue={inputValue}\n          >\n            {autocompleteProps => {\n              const {\n                closeMenu,\n                getInputProps,\n                getRef: autocompleteGetRef,\n                getToggleButtonProps,\n                highlightedIndex\n              } = autocompleteProps\n\n              const {\n                onBlur: autocompleteOnBlur,\n                onChange: autocompleteOnChange,\n                onKeyDown: autocompleteKeyDown,\n                ...autocompleteRestProps\n              } = getInputProps()\n\n              const handleAutocompleteKeydown = e => {\n                autocompleteKeyDown(e)\n                if (e.key === 'Backspace' || !(highlightedIndex > -1)) {\n                  handleKeyDown(e)\n                  if (e.key === GET_KEY_FOR_TAG_DELIMITER[tagSubmitKey]) {\n                    closeMenu()\n                    setInputValue('')\n                  }\n                }\n                if (e.key === 'Backspace' && e.target.selectionEnd === 0) {\n                  closeMenu()\n                }\n              }\n\n              return (\n                <>\n                  <TextInput\n                    appearance=\"none\"\n                    disabled={disabled}\n                    height={height - 4}\n                    width=\"100%\"\n                    type=\"text\"\n                    {...inputProps}\n                    {...autocompleteRestProps}\n                    value={inputValue}\n                    id={inputId}\n                    ref={textInputRef => {\n                      autocompleteGetRef(textInputRef)\n                      if (inputRef instanceof Function) {\n                        inputRef(textInputRef)\n                      } else if (inputRef) {\n                        inputRef.current = textInputRef\n                      }\n                    }}\n                    onBlur={e => {\n                      autocompleteOnBlur(e)\n                      safeInvoke(inputProps.onBlur, e)\n                    }}\n                    onFocus={e => {\n                      handleInputFocus(e)\n                      safeInvoke(inputProps.onFocus, e)\n                    }}\n                    onChange={e => {\n                      handleInputChange(e)\n                      autocompleteOnChange(e)\n                    }}\n                    onKeyDown={handleAutocompleteKeydown}\n                  />\n                  {hasAutocomplete && (\n                    <Button\n                      appearance=\"none\"\n                      background=\"gray100\"\n                      position=\"absolute\"\n                      top={minorScale(1) * 1.5}\n                      right={minorScale(1)}\n                      height={minorScale(5)}\n                      padding={0}\n                      width={minorScale(5)}\n                      minWidth={minorScale(5)}\n                      display=\"flex\"\n                      alignItems=\"center\"\n                      justifyContent=\"center\"\n                      borderRadius={minorScale(1)}\n                      cursor={disabled ? undefined : 'pointer'}\n                      data-testid=\"TagInput-autocomplete-toggle\"\n                      {...getToggleButtonProps()}\n                    >\n                      <CaretDownIcon color=\"muted\" />\n                    </Button>\n                  )}\n                </>\n              )\n            }}\n          </Autocomplete>\n        </Box>\n      </Box>\n    )\n  })\n)\n\nTagInput.propTypes = {\n  /** Whether or not the inputValue should be added to the tags when the input blurs. */\n  addOnBlur: PropTypes.bool,\n  /** Autocomplete options to show when typing in a new value */\n  autocompleteItems: PropTypes.array,\n  /** The class name to apply to the container component. */\n  className: PropTypes.string,\n  /** Whether or not the input should be disabled. */\n  disabled: PropTypes.bool,\n  /** Whether or not the input is invalid. */\n  isInvalid: PropTypes.bool,\n  /** The vertical size of the input */\n  height: PropTypes.number,\n  /** Props to pass to the input component. Note that `ref` and `key` are not supported. See `inputRef`. */\n  inputProps: PropTypes.object,\n  /**\n   * Ref handler for the input element.\n   * (input: HTMLInputElement | null) => void\n   */\n  inputRef: PropTypes.func,\n  /**\n   * Callback invoked when new tags are added.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onAdd: PropTypes.func,\n  /**\n   * Callback invoked when focus on the input blurs.\n   * (event) => void\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback invoked when the tag values change.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback invoked when the input receives focus.\n   * (event) => void\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Callback invoked when the value of the input is changed. Shorthand for `inputProps={{ onChange }}`.\n   * (event) => void\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback invoked when a tag is removed.\n   * Receives value and index of removed tag.\n   * (value: string | node, index: number) => void\n   */\n  onRemove: PropTypes.func,\n  /** Value or RegExp to split on pasted text or on enter keypress */\n  separator: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([false])]),\n  /** Provide props to tag component (actually `Badge`, for now). */\n  tagProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /** Key to press in order to submit a new tag while typing.  */\n  tagSubmitKey: PropTypes.oneOf(['enter', 'space']),\n  /** Controlled tag values. Each value is rendered inside a tag. */\n  values: PropTypes.arrayOf(PropTypes.node)\n}\n\nexport default TagInput\n"]},"metadata":{},"sourceType":"module"}