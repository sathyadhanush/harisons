{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"appearance\", \"className\", \"color\", \"isInteractive\"],\n    _excluded2 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport cx from 'classnames';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { useStyleConfig } from '../../hooks';\nimport { Strong } from '../../typography';\nvar pseudoSelectors = {};\nvar internalStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n  verticalAlign: 'middle'\n};\nvar hoverClassName = css({\n  '&:hover': {\n    opacity: 0.8\n  },\n  cursor: 'pointer'\n});\nvar Badge = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Badge(props, ref) {\n  var _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'subtle' : _props$appearance,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'neutral' : _props$color,\n      _props$isInteractive = props.isInteractive,\n      isInteractive = _props$isInteractive === void 0 ? false : _props$isInteractive,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var _useStyleConfig = useStyleConfig('Badge', {\n    appearance: appearance,\n    color: color\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Strong, _extends({\n    ref: ref,\n    size: 300,\n    className: cx(className, themedClassName, isInteractive && hoverClassName)\n  }, styleProps, restProps));\n}));\nBadge.propTypes = _objectSpread(_objectSpread({}, Strong.propTypes), {}, {\n  /**\n   * The color used for the badge.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Whether or not to apply hover/focus/active styles\n   */\n  isInteractive: PropTypes.bool\n});\nexport default Badge;","map":{"version":3,"sources":["../../../src/badges/src/Badge.js"],"names":["pseudoSelectors","internalStyles","display","boxSizing","verticalAlign","hoverClassName","css","opacity","cursor","Badge","memo","forwardRef","appearance","className","color","isInteractive","restProps","props","themedClassName","styleProps","useStyleConfig","cx","Strong","PropTypes","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,EAAA,MAAA,YAAA;AACA,SAAA,GAAA,QAAA,QAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,cAAA,QAAA,aAAA;AACA,SAAA,MAAA,QAAA,kBAAA;AAEA,IAAMA,eAAe,GAArB,EAAA;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EADc,cAAA;AAErBC,EAAAA,SAAS,EAFY,YAAA;AAGrBC,EAAAA,aAAa,EAAE;AAHM,CAAvB;AAMA,IAAMC,cAAc,GAAGC,GAAG,CAAC;AACzB,aAAW;AACTC,IAAAA,OAAO,EAAE;AADA,GADc;AAIzBC,EAAAA,MAAM,EAAE;AAJiB,CAAD,CAA1B;AAOA,IAAMC,KAAK,GAAA,aAAGC,IAAI,EAAA,aAChBC,UAAU,CAAC,SAAA,KAAA,CAAA,KAAA,EAAA,GAAA,EAA2B;AACpC,MAAA,iBAAA,GAAqGM,KAArG,CAAA,UAAA;AAAA,MAAQL,UAAR,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,QAAA,GAAA,iBAAA;AAAA,MAA+BC,SAA/B,GAAqGI,KAArG,CAAA,SAAA;AAAA,MAAA,YAAA,GAAqGA,KAArG,CAAA,KAAA;AAAA,MAA0CH,KAA1C,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,YAAA;AAAA,MAAA,oBAAA,GAAqGG,KAArG,CAAA,aAAA;AAAA,MAA6DF,aAA7D,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,oBAAA;AAAA,MAAuFC,SAAvF,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AAEA,MAAA,eAAA,GAAsDI,cAAc,CAAA,OAAA,EAElE;AAAER,IAAAA,UAAU,EAAZ,UAAA;AAAcE,IAAAA,KAAK,EAALA;AAAd,GAFkE,EAAA,eAAA,EAApE,cAAoE,CAApE;AAAA,MAAmBI,eAAnB,GAAA,eAAA,CAAA,SAAA;AAAA,MAAuCC,UAAvC,GAAA,wBAAA,CAAA,eAAA,EAAA,UAAA,CAAA;;AAOA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,IAAI,EAFN,GAAA;AAGE,IAAA,SAAS,EAAEE,EAAE,CAAA,SAAA,EAAA,eAAA,EAA6BN,aAAa,IAA1C,cAAA;AAHf,GAAA,EAAA,UAAA,EADF,SACE,CAAA,CADF;AAXJ,CACY,CADM,CAAlB;AAuBAN,KAAK,CAALA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKa,MAAM,CADXb,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAGE;AACF;AACA;AACEK,EAAAA,KAAK,EAAES,SAAS,CANlBd,MAAAA;;AAQE;AACF;AACA;AACEM,EAAAA,aAAa,EAAEQ,SAAS,CAACC;AAX3Bf,CAAAA,CAAAA;AAcA,eAAA,KAAA","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport cx from 'classnames'\nimport { css } from 'glamor'\nimport PropTypes from 'prop-types'\nimport { useStyleConfig } from '../../hooks'\nimport { Strong } from '../../typography'\n\nconst pseudoSelectors = {}\n\nconst internalStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n  verticalAlign: 'middle'\n}\n\nconst hoverClassName = css({\n  '&:hover': {\n    opacity: 0.8\n  },\n  cursor: 'pointer'\n})\n\nconst Badge = memo(\n  forwardRef(function Badge(props, ref) {\n    const { appearance = 'subtle', className, color = 'neutral', isInteractive = false, ...restProps } = props\n\n    const { className: themedClassName, ...styleProps } = useStyleConfig(\n      'Badge',\n      { appearance, color },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    return (\n      <Strong\n        ref={ref}\n        size={300}\n        className={cx(className, themedClassName, isInteractive && hoverClassName)}\n        {...styleProps}\n        {...restProps}\n      />\n    )\n  })\n)\n\nBadge.propTypes = {\n  ...Strong.propTypes,\n\n  /**\n   * The color used for the badge.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Whether or not to apply hover/focus/active styles\n   */\n  isInteractive: PropTypes.bool\n}\n\nexport default Badge\n"]},"metadata":{},"sourceType":"module"}