{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"size\", \"label\", \"defaultValue\", \"value\", \"options\", \"onChange\", \"isRequired\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { spacing, position, layout, dimensions } from 'ui-box';\nimport { useId } from '../../hooks';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport Radio from './Radio';\n\nvar noop = function noop() {};\n\nvar emptyArray = [];\nvar RadioGroup = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function RadioGroup(props, ref) {\n  var _props$size = props.size,\n      size = _props$size === void 0 ? 12 : _props$size,\n      label = props.label,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      _props$options = props.options,\n      options = _props$options === void 0 ? emptyArray : _props$options,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? noop : _props$onChange,\n      _props$isRequired = props.isRequired,\n      isRequired = _props$isRequired === void 0 ? false : _props$isRequired,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var name = useId('RadioGroup');\n  var selected = value || defaultValue || props.options[0].value;\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    role: \"group\",\n    \"aria-label\": label\n  }, rest, {\n    ref: ref\n  }), label && /*#__PURE__*/React.createElement(Text, {\n    color: \"muted\",\n    fontWeight: 500\n  }, label), options.map(function (item) {\n    return /*#__PURE__*/React.createElement(Radio, {\n      key: item.value,\n      size: size,\n      name: name,\n      value: item.value,\n      label: item.label,\n      checked: selected === item.value,\n      disabled: item.isDisabled,\n      onChange: onChange,\n      isRequired: isRequired\n    });\n  }));\n}));\nRadioGroup.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {\n  /**\n   * The options for the radios of the Radio Group.\n   */\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.node.isRequired,\n    value: PropTypes.string.isRequired,\n    isDisabled: PropTypes.bool\n  })).isRequired,\n\n  /**\n   * The selected item value when controlled.\n   */\n  value: PropTypes.string,\n\n  /**\n   * The default value of the Radio Group when uncontrolled.\n   */\n  defaultValue: PropTypes.string,\n\n  /**\n   * Function called when state changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Label to display above the radio button options.\n   */\n  label: PropTypes.string,\n\n  /**\n   * The size of the radio circle. This also informs the text size and spacing.\n   */\n  size: PropTypes.oneOf([12, 16]),\n\n  /**\n   * When true, the radio get the required attribute.\n   */\n  isRequired: PropTypes.bool\n});\nexport default RadioGroup;","map":{"version":3,"sources":["../../../src/radio/src/RadioGroup.js"],"names":["noop","emptyArray","RadioGroup","memo","forwardRef","size","label","defaultValue","value","options","onChange","isRequired","rest","props","name","useId","selected","ref","item","spacing","position","layout","dimensions","PropTypes","isDisabled","bool"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { spacing, position, layout, dimensions } from 'ui-box'\nimport { useId } from '../../hooks'\nimport { Pane } from '../../layers'\nimport { Text } from '../../typography'\nimport Radio from './Radio'\n\nconst noop = () => {}\nconst emptyArray = []\n\nconst RadioGroup = memo(\n  forwardRef(function RadioGroup(props, ref) {\n    const {\n      size = 12,\n      label,\n      defaultValue,\n      value,\n      options = emptyArray,\n      onChange = noop,\n      isRequired = false,\n      ...rest\n    } = props\n\n    const name = useId('RadioGroup')\n    const selected = value || defaultValue || props.options[0].value\n\n    return (\n      <Pane role=\"group\" aria-label={label} {...rest} ref={ref}>\n        {label && (\n          <Text color=\"muted\" fontWeight={500}>\n            {label}\n          </Text>\n        )}\n        {options.map(item => (\n          <Radio\n            key={item.value}\n            size={size}\n            name={name}\n            value={item.value}\n            label={item.label}\n            checked={selected === item.value}\n            disabled={item.isDisabled}\n            onChange={onChange}\n            isRequired={isRequired}\n          />\n        ))}\n      </Pane>\n    )\n  })\n)\n\nRadioGroup.propTypes = {\n  /**\n   * Composes some Box APIs.\n   */\n  ...spacing.propTypes,\n  ...position.propTypes,\n  ...layout.propTypes,\n  ...dimensions.propTypes,\n\n  /**\n   * The options for the radios of the Radio Group.\n   */\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.node.isRequired,\n      value: PropTypes.string.isRequired,\n      isDisabled: PropTypes.bool\n    })\n  ).isRequired,\n\n  /**\n   * The selected item value when controlled.\n   */\n  value: PropTypes.string,\n\n  /**\n   * The default value of the Radio Group when uncontrolled.\n   */\n  defaultValue: PropTypes.string,\n\n  /**\n   * Function called when state changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Label to display above the radio button options.\n   */\n  label: PropTypes.string,\n\n  /**\n   * The size of the radio circle. This also informs the text size and spacing.\n   */\n  size: PropTypes.oneOf([12, 16]),\n\n  /**\n   * When true, the radio get the required attribute.\n   */\n  isRequired: PropTypes.bool\n}\n\nexport default RadioGroup\n"]},"metadata":{},"sourceType":"module"}