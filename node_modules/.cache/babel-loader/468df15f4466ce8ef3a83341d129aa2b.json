{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"color\"],\n    _excluded2 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useStyleConfig } from '../../hooks';\nimport Text from './Text';\nvar internalStyles = {\n  textDecoration: 'underline'\n};\nvar pseudoSelectors = {\n  _hover: '&:hover',\n  _active: '&:active',\n  _focus: '&:focus'\n};\nvar Link = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Link(props, ref) {\n  var className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var _useStyleConfig = useStyleConfig('Link', {\n    color: color\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Text, _extends({\n    is: \"a\",\n    ref: ref,\n    className: cx(className, themedClassName)\n  }, boxProps, restProps));\n}));\nLink.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  /**\n   * This attribute names a relationship of the linked document to the current document.\n   * Common use case is: rel=\"noopener noreferrer\".\n   */\n  rel: PropTypes.string,\n\n  /**\n   * Specifies the URL of the linked resource. A URL might be absolute or relative.\n   */\n  href: PropTypes.string,\n\n  /**\n   * Target atrribute, common use case is target=\"_blank.\"\n   */\n  target: PropTypes.string,\n\n  /**\n   * The color (and styling) of the Link. Can be default, blue, green or neutral.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Class name passed to the link.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default Link;","map":{"version":3,"sources":["../../../src/typography/src/Link.js"],"names":["internalStyles","textDecoration","pseudoSelectors","_hover","_active","_focus","Link","memo","forwardRef","className","color","restProps","props","themedClassName","boxProps","useStyleConfig","cx","Text","rel","PropTypes","href","target","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,QAAA,OAAA;AACA,OAAA,EAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,cAAA,QAAA,aAAA;AACA,OAAA,IAAA,MAAA,QAAA;AAEA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,cAAc,EAAE;AADK,CAAvB;AAIA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,MAAM,EADgB,SAAA;AAEtBC,EAAAA,OAAO,EAFe,UAAA;AAGtBC,EAAAA,MAAM,EAAE;AAHc,CAAxB;AAMA,IAAMC,IAAI,GAAA,aAAGC,IAAI,EAAA,aACfC,UAAU,CAAC,SAAA,IAAA,CAAA,KAAA,EAAA,GAAA,EAA0B;AACnC,MAAQC,SAAR,GAAuDG,KAAvD,CAAA,SAAA;AAAA,MAAA,YAAA,GAAuDA,KAAvD,CAAA,KAAA;AAAA,MAAmBF,KAAnB,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,YAAA;AAAA,MAAyCC,SAAzC,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AACA,MAAA,eAAA,GAAoDI,cAAc,CAAA,MAAA,EAEhE;AAAEL,IAAAA,KAAK,EAALA;AAAF,GAFgE,EAAA,eAAA,EAAlE,cAAkE,CAAlE;AAAA,MAAmBG,eAAnB,GAAA,eAAA,CAAA,SAAA;AAAA,MAAuCC,QAAvC,GAAA,wBAAA,CAAA,eAAA,EAAA,UAAA,CAAA;;AAOA,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,IAAA,EAAE,EAAR,GAAA;AAAa,IAAA,GAAG,EAAhB,GAAA;AAAuB,IAAA,SAAS,EAAEE,EAAE,CAAA,SAAA,EAAA,eAAA;AAApC,GAAA,EAAA,QAAA,EAAP,SAAO,CAAA,CAAP;AAVJ,CACY,CADK,CAAjB;AAcAV,IAAI,CAAJA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKW,IAAI,CADTX,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAGE;AACF;AACA;AACA;AACEY,EAAAA,GAAG,EAAEC,SAAS,CAPhBb,MAAAA;;AASE;AACF;AACA;AACEc,EAAAA,IAAI,EAAED,SAAS,CAZjBb,MAAAA;;AAcE;AACF;AACA;AACEe,EAAAA,MAAM,EAAEF,SAAS,CAjBnBb,MAAAA;;AAmBE;AACF;AACA;AACEI,EAAAA,KAAK,EAAES,SAAS,CAtBlBb,MAAAA;;AAwBE;AACF;AACA;AACA;AACEG,EAAAA,SAAS,EAAEU,SAAS,CAACG;AA5BvBhB,CAAAA,CAAAA;AA+BA,eAAA,IAAA","sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { useStyleConfig } from '../../hooks'\nimport Text from './Text'\n\nconst internalStyles = {\n  textDecoration: 'underline'\n}\n\nconst pseudoSelectors = {\n  _hover: '&:hover',\n  _active: '&:active',\n  _focus: '&:focus'\n}\n\nconst Link = memo(\n  forwardRef(function Link(props, ref) {\n    const { className, color = 'default', ...restProps } = props\n    const { className: themedClassName, ...boxProps } = useStyleConfig(\n      'Link',\n      { color },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    return <Text is=\"a\" ref={ref} className={cx(className, themedClassName)} {...boxProps} {...restProps} />\n  })\n)\n\nLink.propTypes = {\n  ...Text.propTypes,\n\n  /**\n   * This attribute names a relationship of the linked document to the current document.\n   * Common use case is: rel=\"noopener noreferrer\".\n   */\n  rel: PropTypes.string,\n\n  /**\n   * Specifies the URL of the linked resource. A URL might be absolute or relative.\n   */\n  href: PropTypes.string,\n\n  /**\n   * Target atrribute, common use case is target=\"_blank.\"\n   */\n  target: PropTypes.string,\n\n  /**\n   * The color (and styling) of the Link. Can be default, blue, green or neutral.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Class name passed to the link.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default Link\n"]},"metadata":{},"sourceType":"module"}