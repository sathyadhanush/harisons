{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useMemo, useRef } from 'react';\nimport { css } from 'glamor';\nimport merge from 'lodash.merge';\nimport isEqual from 'react-fast-compare';\nimport { splitBoxProps } from 'ui-box';\nimport { useTheme, get, resolveThemeTokens } from '../theme';\n/**\n * @typedef {object} StateStyles\n * @property {import('csstype').Properties} [_hover]\n * @property {import('csstype').Properties} [_active]\n * @property {import('csstype').Properties} [_disabled]\n * @property {import('csstype').Properties} [_focus]\n * @property {import('csstype').Properties} [_invalid]\n */\n\n/**\n * @typedef {{ [placeholder in keyof StateStyles]: string }} PseudoSelectors\n */\n\n/**\n * @typedef {object} StyleModifiers\n * @property {string} [appearance]\n * @property {string} [size]\n */\n\n/** @typedef {import('ui-box').EnhancerProps & StateStyles} Style */\n\n/** @typedef {import('ui-box').EnhancerProps & import('glamor').CSSProperties} GlamorAndBoxStyle */\n\n/**\n * @typedef {object} StyleConfig\n * @property {Style} baseStyle\n * @property {{ [appearance: string]: Style }} [appearances]\n * @property {{ [size: string]: Style }} [sizes]\n */\n\nfunction maybeRun(value) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return typeof value === 'function' ? value.apply(void 0, args) : value;\n}\n\nfunction maybeRunDeep(raw) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  if (raw && _typeof(raw) === 'object') {\n    var result = {};\n\n    for (var _i = 0, _Object$keys = Object.keys(raw); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      result[key] = maybeRunDeep.apply(void 0, [raw[key]].concat(args));\n    }\n\n    return result;\n  }\n\n  return maybeRun.apply(void 0, [raw].concat(args));\n}\n/**\n * Combines styles from a styleConfig, with the given style modifiers (appearance, size, etc) and internal styles\n * @param {object} theme\n * @param {StyleModifiers} props\n * @param {StyleConfig} styleConfig\n * @param {GlamorAndBoxStyle} [internalStyles]\n * @returns {StyleConfig}\n */\n\n\nfunction combineStyles(theme, props, styleConfig) {\n  var internalStyles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var config = maybeRun(styleConfig, theme, props);\n  var baseStyle = maybeRunDeep(config.baseStyle, theme, props);\n  var sizeStyle = maybeRunDeep(get(config, \"sizes.\".concat(props.size), {}), theme, props);\n  var appearanceStyle = maybeRunDeep(get(config, \"appearances.\".concat(props.appearance), {}), theme, props);\n  return merge({}, internalStyles, baseStyle, sizeStyle, appearanceStyle);\n}\n/**\n * Combines a styleConfig object with internal styles based on the theme + style modifiers (props)\n * and returns a memoized style object\n * @returns {StyleConfig}\n */\n\n\nfunction useMergedStyles(theme, props, styleConfig, internalStyles) {\n  var styleRef = useRef({});\n  return useMemo(function () {\n    var combinedStyles = combineStyles(theme, props, styleConfig, internalStyles);\n\n    if (!isEqual(styleRef.current, combinedStyles)) {\n      styleRef.current = combinedStyles;\n    }\n\n    return styleRef.current;\n  }, [theme, props, styleConfig, internalStyles]);\n}\n/**\n * Split up the style props into glamor-ready and box-ready props (className + spreadable props)\n */\n\n\nfunction useGlamorAndBox(styles, pseudoSelectors) {\n  var glamorStylesRef = useRef({});\n  var classNameRef = useRef();\n  return useMemo(function () {\n    // Split the resulting style object into ui-box-compatible props and the rest\n    var _splitBoxProps = splitBoxProps(styles),\n        matchedProps = _splitBoxProps.matchedProps,\n        remainingProps = _splitBoxProps.remainingProps;\n    /** @type {GlamorAndBoxStyle} */\n\n\n    var glamorStyles = {}; // Swap out pseudo selector placeholders for their actual css selector strings\n\n    for (var _i2 = 0, _Object$keys2 = Object.keys(remainingProps); _i2 < _Object$keys2.length; _i2++) {\n      var k = _Object$keys2[_i2];\n      var key = k in pseudoSelectors ? pseudoSelectors[k] : k;\n      glamorStyles[key] = remainingProps[k];\n    } // Take all the \"non-compatible\" props and give those to glamor (since ui-box doesn't know how to handle them yet)\n\n\n    if (!isEqual(glamorStylesRef.current, glamorStyles)) {\n      var className = css(glamorStyles).toString();\n      glamorStylesRef.current = glamorStyles;\n      classNameRef.current = className === 'css-nil' ? undefined : className;\n    }\n\n    return _objectSpread({\n      className: classNameRef.current\n    }, matchedProps);\n  }, [styles, pseudoSelectors]);\n}\n/**\n * Takes a styleConfig object and outputs a `className` and `boxProps` that can be spread on a Box component\n * @param {string} componentKey the name of the component in the theme\n * @param {StyleModifiers} props props that modify the resulting visual style (e.g. `size` or `appearance`)\n * @param {PseudoSelectors} pseudoSelectors mapping for the component between states and actual pseudo selectors\n * @param {GlamorAndBoxStyle} [internalStyles] additional styles that are specified internally, separate from the visual styles\n * @returns {{ className: string; boxProps: import('ui-box').EnhancerProps }}\n */\n\n\nexport function useStyleConfig(componentKey, props, pseudoSelectors, internalStyles) {\n  var theme = useTheme(); // Get the component style object from the theme\n\n  var componentStyles = get(theme, \"components.\".concat(componentKey)) || {}; // Merges the theme styles with the modifiers/props (appearance, size, etc)\n\n  var mergedStyles = useMergedStyles(theme, props, componentStyles, internalStyles); // Resolve theme token strings found throughout the style object\n\n  var styles = useMemo(function () {\n    return resolveThemeTokens(theme, mergedStyles);\n  }, [theme, mergedStyles]); // Finally, split up the styles based which ones Box supports and the rest construct a glamor className\n\n  return useGlamorAndBox(styles, pseudoSelectors);\n}","map":{"version":3,"sources":["../../src/hooks/use-style-config.js"],"names":["args","value","raw","result","key","Object","maybeRunDeep","maybeRun","internalStyles","config","baseStyle","sizeStyle","get","props","appearanceStyle","merge","styleRef","useRef","useMemo","combinedStyles","combineStyles","isEqual","glamorStylesRef","classNameRef","matchedProps","remainingProps","splitBoxProps","glamorStyles","k","pseudoSelectors","className","css","current","theme","useTheme","componentStyles","mergedStyles","useMergedStyles","styles","resolveThemeTokens","useGlamorAndBox"],"mappings":"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","sourcesContent":["import { useMemo, useRef } from 'react'\nimport { css } from 'glamor'\nimport merge from 'lodash.merge'\nimport isEqual from 'react-fast-compare'\nimport { splitBoxProps } from 'ui-box'\nimport { useTheme, get, resolveThemeTokens } from '../theme'\n\n/**\n * @typedef {object} StateStyles\n * @property {import('csstype').Properties} [_hover]\n * @property {import('csstype').Properties} [_active]\n * @property {import('csstype').Properties} [_disabled]\n * @property {import('csstype').Properties} [_focus]\n * @property {import('csstype').Properties} [_invalid]\n */\n\n/**\n * @typedef {{ [placeholder in keyof StateStyles]: string }} PseudoSelectors\n */\n\n/**\n * @typedef {object} StyleModifiers\n * @property {string} [appearance]\n * @property {string} [size]\n */\n\n/** @typedef {import('ui-box').EnhancerProps & StateStyles} Style */\n/** @typedef {import('ui-box').EnhancerProps & import('glamor').CSSProperties} GlamorAndBoxStyle */\n\n/**\n * @typedef {object} StyleConfig\n * @property {Style} baseStyle\n * @property {{ [appearance: string]: Style }} [appearances]\n * @property {{ [size: string]: Style }} [sizes]\n */\n\nfunction maybeRun(value, ...args) {\n  return typeof value === 'function' ? value(...args) : value\n}\n\nfunction maybeRunDeep(raw, ...args) {\n  if (raw && typeof raw === 'object') {\n    const result = {}\n\n    for (const key of Object.keys(raw)) {\n      result[key] = maybeRunDeep(raw[key], ...args)\n    }\n\n    return result\n  }\n\n  return maybeRun(raw, ...args)\n}\n\n/**\n * Combines styles from a styleConfig, with the given style modifiers (appearance, size, etc) and internal styles\n * @param {object} theme\n * @param {StyleModifiers} props\n * @param {StyleConfig} styleConfig\n * @param {GlamorAndBoxStyle} [internalStyles]\n * @returns {StyleConfig}\n */\nfunction combineStyles(theme, props, styleConfig, internalStyles = {}) {\n  const config = maybeRun(styleConfig, theme, props)\n  const baseStyle = maybeRunDeep(config.baseStyle, theme, props)\n  const sizeStyle = maybeRunDeep(get(config, `sizes.${props.size}`, {}), theme, props)\n\n  const appearanceStyle = maybeRunDeep(get(config, `appearances.${props.appearance}`, {}), theme, props)\n\n  return merge({}, internalStyles, baseStyle, sizeStyle, appearanceStyle)\n}\n\n/**\n * Combines a styleConfig object with internal styles based on the theme + style modifiers (props)\n * and returns a memoized style object\n * @returns {StyleConfig}\n */\nfunction useMergedStyles(theme, props, styleConfig, internalStyles) {\n  const styleRef = useRef({})\n\n  return useMemo(() => {\n    const combinedStyles = combineStyles(theme, props, styleConfig, internalStyles)\n    if (!isEqual(styleRef.current, combinedStyles)) {\n      styleRef.current = combinedStyles\n    }\n\n    return styleRef.current\n  }, [theme, props, styleConfig, internalStyles])\n}\n\n/**\n * Split up the style props into glamor-ready and box-ready props (className + spreadable props)\n */\nfunction useGlamorAndBox(styles, pseudoSelectors) {\n  const glamorStylesRef = useRef({})\n  const classNameRef = useRef()\n\n  return useMemo(() => {\n    // Split the resulting style object into ui-box-compatible props and the rest\n    const { matchedProps, remainingProps } = splitBoxProps(styles)\n\n    /** @type {GlamorAndBoxStyle} */\n    const glamorStyles = {}\n\n    // Swap out pseudo selector placeholders for their actual css selector strings\n    for (const k of Object.keys(remainingProps)) {\n      const key = k in pseudoSelectors ? pseudoSelectors[k] : k\n      glamorStyles[key] = remainingProps[k]\n    }\n\n    // Take all the \"non-compatible\" props and give those to glamor (since ui-box doesn't know how to handle them yet)\n    if (!isEqual(glamorStylesRef.current, glamorStyles)) {\n      const className = css(glamorStyles).toString()\n      glamorStylesRef.current = glamorStyles\n      classNameRef.current = className === 'css-nil' ? undefined : className\n    }\n\n    return {\n      className: classNameRef.current,\n      ...matchedProps\n    }\n  }, [styles, pseudoSelectors])\n}\n\n/**\n * Takes a styleConfig object and outputs a `className` and `boxProps` that can be spread on a Box component\n * @param {string} componentKey the name of the component in the theme\n * @param {StyleModifiers} props props that modify the resulting visual style (e.g. `size` or `appearance`)\n * @param {PseudoSelectors} pseudoSelectors mapping for the component between states and actual pseudo selectors\n * @param {GlamorAndBoxStyle} [internalStyles] additional styles that are specified internally, separate from the visual styles\n * @returns {{ className: string; boxProps: import('ui-box').EnhancerProps }}\n */\nexport function useStyleConfig(componentKey, props, pseudoSelectors, internalStyles) {\n  const theme = useTheme()\n\n  // Get the component style object from the theme\n  const componentStyles = get(theme, `components.${componentKey}`) || {}\n\n  // Merges the theme styles with the modifiers/props (appearance, size, etc)\n  const mergedStyles = useMergedStyles(theme, props, componentStyles, internalStyles)\n\n  // Resolve theme token strings found throughout the style object\n  const styles = useMemo(() => resolveThemeTokens(theme, mergedStyles), [theme, mergedStyles])\n\n  // Finally, split up the styles based which ones Box supports and the rest construct a glamor className\n  return useGlamorAndBox(styles, pseudoSelectors)\n}\n"]},"metadata":{},"sourceType":"module"}