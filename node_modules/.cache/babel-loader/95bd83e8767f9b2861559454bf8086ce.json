{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"accept\", \"capture\", \"className\", \"disabled\", \"height\", \"multiple\", \"name\", \"onBlur\", \"onChange\", \"placeholder\", \"required\"];\nimport React, { memo, forwardRef, useState, useRef, useCallback } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { Button } from '../../buttons';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { TextInput } from '../../text-input';\nexport var CLASS_PREFIX = 'evergreen-file-picker';\nvar FilePicker = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function FilePicker(props, ref) {\n  var accept = props.accept,\n      capture = props.capture,\n      className = props.className,\n      disabled = props.disabled,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 32 : _props$height,\n      multiple = props.multiple,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? 'Select a file to uploadâ€¦' : _props$placeholder,\n      required = props.required,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      files = _useState2[0],\n      setFiles = _useState2[1];\n\n  var fileInputRef = useRef();\n  var handleFileChange = useCallback(function (e) {\n    // Firefox returns the same array instance each time for some reason\n    var filesCopy = _toConsumableArray(e.target.files);\n\n    setFiles(filesCopy);\n    safeInvoke(onChange, filesCopy);\n  }, [onChange]);\n  var handleButtonClick = useCallback(function () {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  }, []);\n  var handleBlur = useCallback(function (e) {\n    // Setting e.target.files to an array fails. It must be a FileList\n    if (e && e.target) {\n      e.target.files = fileInputRef.current && fileInputRef.current.files;\n    }\n\n    safeInvoke(onBlur, e);\n  }, [onBlur]);\n  var inputValue;\n\n  if (files.length === 0) {\n    inputValue = '';\n  } else if (files.length === 1) {\n    inputValue = files[0].name;\n  } else {\n    inputValue = \"\".concat(files.length, \" files\");\n  }\n\n  var buttonText;\n\n  if (files.length === 0) {\n    buttonText = 'Select file';\n  } else if (files.length === 1) {\n    buttonText = 'Replace file';\n  } else {\n    buttonText = 'Replace files';\n  }\n\n  var rootClassNames = cx(\"\".concat(CLASS_PREFIX, \"-root\"), className);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    display: \"flex\",\n    className: rootClassNames,\n    ref: ref\n  }, rest), /*#__PURE__*/React.createElement(Box, {\n    ref: fileInputRef,\n    className: \"\".concat(CLASS_PREFIX, \"-file-input\"),\n    is: \"input\",\n    type: \"file\",\n    name: name,\n    accept: accept,\n    required: required,\n    multiple: multiple,\n    disabled: disabled,\n    capture: capture,\n    onChange: handleFileChange,\n    display: \"none\"\n  }), /*#__PURE__*/React.createElement(TextInput, {\n    className: \"\".concat(CLASS_PREFIX, \"-text-input\"),\n    readOnly: true,\n    value: inputValue,\n    placeholder: placeholder // There's a weird specifity issue when there's two differently sized inputs on the page\n    ,\n    borderTopRightRadius: \"0 !important\",\n    borderBottomRightRadius: \"0 !important\",\n    height: height,\n    flex: 1,\n    textOverflow: \"ellipsis\",\n    onBlur: handleBlur\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"\".concat(CLASS_PREFIX, \"-button\"),\n    onClick: handleButtonClick,\n    disabled: disabled,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    height: height,\n    flexShrink: 0,\n    type: \"button\",\n    onBlur: handleBlur\n  }, buttonText));\n}));\nFilePicker.propTypes = {\n  /**\n   * Name attribute of the input.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The accept attribute of the input.\n   */\n  accept: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\n   * When true, the file picker is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * When true, accept multiple files.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * When true, the filepicker is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The capture attribute of the input.\n   */\n  capture: PropTypes.bool,\n\n  /**\n   * The height of the file picker.\n   */\n  height: PropTypes.number,\n\n  /**\n   * Function called when onChange is fired.\n   * (files: FileList) => void\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Function called when onBlur is fired.\n   * (event: React.FocusEvent) => void\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Placeholder of the text input\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Class name passed to the FilePicker.\n   * Only use this if you know what you are doing.\n   */\n  className: PropTypes.string\n};\nexport default FilePicker;","map":{"version":3,"sources":["../../../src/file-picker/src/FilePicker.js"],"names":["CLASS_PREFIX","FilePicker","memo","forwardRef","accept","capture","className","disabled","height","multiple","name","onBlur","onChange","placeholder","required","rest","props","files","setFiles","useState","fileInputRef","useRef","handleFileChange","useCallback","filesCopy","e","safeInvoke","handleButtonClick","handleBlur","inputValue","buttonText","rootClassNames","cx","ref","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useState, useRef, useCallback } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { Button } from '../../buttons'\nimport safeInvoke from '../../lib/safe-invoke'\nimport { TextInput } from '../../text-input'\n\nexport const CLASS_PREFIX = 'evergreen-file-picker'\n\nconst FilePicker = memo(\n  forwardRef(function FilePicker(props, ref) {\n    const {\n      accept,\n      capture,\n      className,\n      disabled,\n      height = 32,\n      multiple,\n      name,\n      onBlur,\n      onChange,\n      placeholder = 'Select a file to uploadâ€¦',\n      required,\n      ...rest\n    } = props\n\n    const [files, setFiles] = useState([])\n    const fileInputRef = useRef()\n\n    const handleFileChange = useCallback(\n      e => {\n        // Firefox returns the same array instance each time for some reason\n        const filesCopy = [...e.target.files]\n\n        setFiles(filesCopy)\n\n        safeInvoke(onChange, filesCopy)\n      },\n      [onChange]\n    )\n\n    const handleButtonClick = useCallback(() => {\n      if (fileInputRef.current) {\n        fileInputRef.current.click()\n      }\n    }, [])\n\n    const handleBlur = useCallback(\n      e => {\n        // Setting e.target.files to an array fails. It must be a FileList\n        if (e && e.target) {\n          e.target.files = fileInputRef.current && fileInputRef.current.files\n        }\n\n        safeInvoke(onBlur, e)\n      },\n      [onBlur]\n    )\n\n    let inputValue\n    if (files.length === 0) {\n      inputValue = ''\n    } else if (files.length === 1) {\n      inputValue = files[0].name\n    } else {\n      inputValue = `${files.length} files`\n    }\n\n    let buttonText\n    if (files.length === 0) {\n      buttonText = 'Select file'\n    } else if (files.length === 1) {\n      buttonText = 'Replace file'\n    } else {\n      buttonText = 'Replace files'\n    }\n\n    const rootClassNames = cx(`${CLASS_PREFIX}-root`, className)\n\n    return (\n      <Box display=\"flex\" className={rootClassNames} ref={ref} {...rest}>\n        <Box\n          ref={fileInputRef}\n          className={`${CLASS_PREFIX}-file-input`}\n          is=\"input\"\n          type=\"file\"\n          name={name}\n          accept={accept}\n          required={required}\n          multiple={multiple}\n          disabled={disabled}\n          capture={capture}\n          onChange={handleFileChange}\n          display=\"none\"\n        />\n\n        <TextInput\n          className={`${CLASS_PREFIX}-text-input`}\n          readOnly\n          value={inputValue}\n          placeholder={placeholder}\n          // There's a weird specifity issue when there's two differently sized inputs on the page\n          borderTopRightRadius=\"0 !important\"\n          borderBottomRightRadius=\"0 !important\"\n          height={height}\n          flex={1}\n          textOverflow=\"ellipsis\"\n          onBlur={handleBlur}\n        />\n\n        <Button\n          className={`${CLASS_PREFIX}-button`}\n          onClick={handleButtonClick}\n          disabled={disabled}\n          borderTopLeftRadius={0}\n          borderBottomLeftRadius={0}\n          height={height}\n          flexShrink={0}\n          type=\"button\"\n          onBlur={handleBlur}\n        >\n          {buttonText}\n        </Button>\n      </Box>\n    )\n  })\n)\n\nFilePicker.propTypes = {\n  /**\n   * Name attribute of the input.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The accept attribute of the input.\n   */\n  accept: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\n   * When true, the file picker is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * When true, accept multiple files.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * When true, the filepicker is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The capture attribute of the input.\n   */\n  capture: PropTypes.bool,\n\n  /**\n   * The height of the file picker.\n   */\n  height: PropTypes.number,\n\n  /**\n   * Function called when onChange is fired.\n   * (files: FileList) => void\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Function called when onBlur is fired.\n   * (event: React.FocusEvent) => void\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Placeholder of the text input\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Class name passed to the FilePicker.\n   * Only use this if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default FilePicker\n"]},"metadata":{},"sourceType":"module"}