{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport fills from './fills';\nvar colorTokens = {\n  // Grays / neutrals\n  gray900: '#101840',\n  gray800: '#474d66',\n  gray700: '#696f8c',\n  gray600: '#8f95b2',\n  gray500: '#c1c4d6',\n  gray400: '#d8dae5',\n  gray300: '#E6E8F0',\n  gray200: '#edeff5',\n  gray100: '#F4F5F9',\n  gray90: '#F4F6FA',\n  gray75: '#F9FAFC',\n  gray50: '#FAFBFF',\n  // Blues\n  blue900: '#0A1433',\n  blue800: '#142966',\n  blue700: '#1F3D99',\n  blue600: '#2952CC',\n  blue500: '#3366FF',\n  blue400: '#5C85FF',\n  blue300: '#85A3FF',\n  blue200: '#ADC2FF',\n  blue100: '#D6E0FF',\n  blue50: '#EBF0FF',\n  blue25: '#F3F6FF',\n  // Reds\n  red700: '#7D2828',\n  red600: '#A73636',\n  red500: '#D14343',\n  red100: '#F9DADA',\n  red25: '#FDF4F4',\n  // Greens\n  green900: '#10261E',\n  green800: '#214C3C',\n  green700: '#317159',\n  green600: '#429777',\n  green500: '#52BD95',\n  green400: '#75CAAA',\n  green300: '#97D7BF',\n  green200: '#BAE5D5',\n  green100: '#DCF2EA',\n  green25: '#F5FBF8',\n  // Oranges\n  orange700: '#996A13',\n  orange500: '#FFB020',\n  orange100: '#F8E3DA',\n  orange25: '#FFFAF2',\n  // Purple\n  purple600: '#6E62B6',\n  purple100: '#E7E4F9',\n  // Teals\n  teal800: '#0F5156',\n  teal100: '#D3F5F7',\n  // Yellows\n  yellow800: '#66460D',\n  yellow100: '#FFEFD2'\n};\n\nvar colors = _objectSpread(_objectSpread({}, colorTokens), {}, {\n  muted: colorTokens.gray700,\n  \"default\": colorTokens.gray800\n});\n\nvar fontFamilies = {\n  /**\n   * @property {string} display - Used for headings larger than 20px.\n   */\n  display: '\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n\n  /**\n   * @property {string} ui - Used for text and UI (which includes almost anything).\n   */\n  ui: '\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n\n  /**\n   * @property {string} mono - Used for code and sometimes numbers in tables.\n   */\n  mono: '\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace'\n};\nvar text = {\n  /**\n   * It's useful to have 600 because `Link` uses the `Text` component.\n   * A `Link` could be used as 600 in the context of a breadcrumb.\n   */\n  600: {\n    fontSize: '20px',\n    fontWeight: 400,\n    lineHeight: '24px',\n    letterSpacing: '-0.07px'\n  },\n  500: {\n    fontSize: '16px',\n    fontWeight: 400,\n    lineHeight: '20px',\n    letterSpacing: '-0.05px'\n  },\n  400: {\n    // Default\n    fontSize: '14px',\n    fontWeight: 400,\n    lineHeight: '20px',\n    letterSpacing: '-0.05px'\n  },\n  300: {\n    fontSize: '12px',\n    fontWeight: 400,\n    lineHeight: '16px',\n    letterSpacing: '0'\n  }\n};\nvar paragraph = {\n  500: _objectSpread(_objectSpread({}, text['500']), {}, {\n    lineHeight: '24px'\n  }),\n  400: _objectSpread(_objectSpread({}, text['400']), {}, {\n    lineHeight: '21px'\n  }),\n  300: _objectSpread(_objectSpread({}, text['300']), {}, {\n    lineHeight: '18px'\n  })\n}; // Lifted from v5 scales\n\nvar overlayBackgroundColor = 'rgba(67, 90, 111, 0.7)';\nvar codeBackgroundColor = 'rgba(16, 112, 202, 0.06)';\nvar codeBorderColor = 'rgba(16, 112, 202, 0.14)';\nexport default {\n  colors: colors,\n  fontFamilies: fontFamilies,\n  text: text,\n  paragraph: paragraph,\n  overlayBackgroundColor: overlayBackgroundColor,\n  codeBackgroundColor: codeBackgroundColor,\n  codeBorderColor: codeBorderColor,\n  // TODO support solid fills for v5 compat\n  fills: fills.subtle,\n  selectedOptionColor: colors.blue500,\n  // Border radius used across input components\n  borderRadius: 4,\n  primary: {\n    base: colors.blue500,\n    hover: colors.blue600,\n    active: colors.blue700\n  },\n  intents: {\n    info: {\n      background: colors.blue25,\n      border: colors.blue500,\n      text: colors.blue600,\n      icon: colors.blue500\n    },\n    success: {\n      background: colors.green25,\n      border: colors.green500,\n      text: colors.green700,\n      icon: colors.green500\n    },\n    warning: {\n      background: colors.orange25,\n      border: colors.orange500,\n      text: colors.orange700,\n      icon: colors.orange500\n    },\n    danger: {\n      background: colors.red25,\n      border: colors.red500,\n      text: colors.red600,\n      icon: colors.red500\n    }\n  },\n  states: {\n    \"default\": {\n      icon: colors.gray800\n    },\n    muted: {\n      icon: colors.gray700\n    },\n    dark: {\n      icon: colors.gray900\n    },\n    disabled: {\n      icon: colors.gray500\n    },\n    selected: {\n      icon: colors.blue500\n    }\n  }\n};","map":{"version":3,"sources":["../../../../../src/themes/classic/deprecated/foundational-styles/tokens.js"],"names":["colorTokens","gray900","gray800","gray700","gray600","gray500","gray400","gray300","gray200","gray100","gray90","gray75","gray50","blue900","blue800","blue700","blue600","blue500","blue400","blue300","blue200","blue100","blue50","blue25","red700","red600","red500","red100","red25","green900","green800","green700","green600","green500","green400","green300","green200","green100","green25","orange700","orange500","orange100","orange25","purple600","purple100","teal800","teal100","yellow800","yellow100","colors","muted","fontFamilies","display","ui","mono","text","fontSize","fontWeight","lineHeight","letterSpacing","paragraph","overlayBackgroundColor","codeBackgroundColor","codeBorderColor","fills","selectedOptionColor","borderRadius","primary","base","hover","active","intents","info","background","border","icon","success","warning","danger","states","dark","disabled","selected"],"mappings":"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","sourcesContent":["import fills from './fills'\n\nconst colorTokens = {\n  // Grays / neutrals\n  gray900: '#101840',\n  gray800: '#474d66',\n  gray700: '#696f8c',\n  gray600: '#8f95b2',\n  gray500: '#c1c4d6',\n  gray400: '#d8dae5',\n  gray300: '#E6E8F0',\n  gray200: '#edeff5',\n  gray100: '#F4F5F9',\n  gray90: '#F4F6FA',\n  gray75: '#F9FAFC',\n  gray50: '#FAFBFF',\n\n  // Blues\n  blue900: '#0A1433',\n  blue800: '#142966',\n  blue700: '#1F3D99',\n  blue600: '#2952CC',\n  blue500: '#3366FF',\n  blue400: '#5C85FF',\n  blue300: '#85A3FF',\n  blue200: '#ADC2FF',\n  blue100: '#D6E0FF',\n  blue50: '#EBF0FF',\n  blue25: '#F3F6FF',\n\n  // Reds\n  red700: '#7D2828',\n  red600: '#A73636',\n  red500: '#D14343',\n  red100: '#F9DADA',\n  red25: '#FDF4F4',\n\n  // Greens\n  green900: '#10261E',\n  green800: '#214C3C',\n  green700: '#317159',\n  green600: '#429777',\n  green500: '#52BD95',\n  green400: '#75CAAA',\n  green300: '#97D7BF',\n  green200: '#BAE5D5',\n  green100: '#DCF2EA',\n  green25: '#F5FBF8',\n\n  // Oranges\n  orange700: '#996A13',\n  orange500: '#FFB020',\n  orange100: '#F8E3DA',\n  orange25: '#FFFAF2',\n\n  // Purple\n  purple600: '#6E62B6',\n  purple100: '#E7E4F9',\n\n  // Teals\n  teal800: '#0F5156',\n  teal100: '#D3F5F7',\n\n  // Yellows\n  yellow800: '#66460D',\n  yellow100: '#FFEFD2'\n}\n\nconst colors = {\n  ...colorTokens,\n  muted: colorTokens.gray700,\n  default: colorTokens.gray800\n}\n\nconst fontFamilies = {\n  /**\n   * @property {string} display - Used for headings larger than 20px.\n   */\n  display:\n    '\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n\n  /**\n   * @property {string} ui - Used for text and UI (which includes almost anything).\n   */\n  ui:\n    '\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n\n  /**\n   * @property {string} mono - Used for code and sometimes numbers in tables.\n   */\n  mono: '\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace'\n}\n\nconst text = {\n  /**\n   * It's useful to have 600 because `Link` uses the `Text` component.\n   * A `Link` could be used as 600 in the context of a breadcrumb.\n   */\n  600: {\n    fontSize: '20px',\n    fontWeight: 400,\n    lineHeight: '24px',\n    letterSpacing: '-0.07px'\n  },\n  500: {\n    fontSize: '16px',\n    fontWeight: 400,\n    lineHeight: '20px',\n    letterSpacing: '-0.05px'\n  },\n  400: {\n    // Default\n    fontSize: '14px',\n    fontWeight: 400,\n    lineHeight: '20px',\n    letterSpacing: '-0.05px'\n  },\n  300: {\n    fontSize: '12px',\n    fontWeight: 400,\n    lineHeight: '16px',\n    letterSpacing: '0'\n  }\n}\n\nconst paragraph = {\n  500: {\n    ...text['500'],\n    lineHeight: '24px'\n  },\n  400: {\n    ...text['400'],\n    lineHeight: '21px'\n  },\n  300: {\n    ...text['300'],\n    lineHeight: '18px'\n  }\n}\n\n// Lifted from v5 scales\nconst overlayBackgroundColor = 'rgba(67, 90, 111, 0.7)'\nconst codeBackgroundColor = 'rgba(16, 112, 202, 0.06)'\nconst codeBorderColor = 'rgba(16, 112, 202, 0.14)'\n\nexport default {\n  colors,\n  fontFamilies,\n  text,\n  paragraph,\n  overlayBackgroundColor,\n  codeBackgroundColor,\n  codeBorderColor,\n  // TODO support solid fills for v5 compat\n  fills: fills.subtle,\n  selectedOptionColor: colors.blue500,\n  // Border radius used across input components\n  borderRadius: 4,\n  primary: {\n    base: colors.blue500,\n    hover: colors.blue600,\n    active: colors.blue700\n  },\n  intents: {\n    info: {\n      background: colors.blue25,\n      border: colors.blue500,\n      text: colors.blue600,\n      icon: colors.blue500\n    },\n    success: {\n      background: colors.green25,\n      border: colors.green500,\n      text: colors.green700,\n      icon: colors.green500\n    },\n    warning: {\n      background: colors.orange25,\n      border: colors.orange500,\n      text: colors.orange700,\n      icon: colors.orange500\n    },\n    danger: {\n      background: colors.red25,\n      border: colors.red500,\n      text: colors.red600,\n      icon: colors.red500\n    }\n  },\n  states: {\n    default: {\n      icon: colors.gray800\n    },\n    muted: {\n      icon: colors.gray700\n    },\n    dark: {\n      icon: colors.gray900\n    },\n    disabled: {\n      icon: colors.gray500\n    },\n    selected: {\n      icon: colors.blue500\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}