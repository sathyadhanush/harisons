{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"disabled\", \"fontFamily\", \"grammarly\", \"height\", \"isInvalid\", \"placeholder\", \"required\", \"spellCheck\", \"width\"],\n    _excluded2 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box, { spacing, dimensions, position, layout } from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { useTheme } from '../../theme';\nvar pseudoSelectors = {\n  _focus: '&:focus',\n  _disabled: '&:disabled',\n  _invalid: '&[aria-invalid=\"true\"]:not(:focus)',\n  _placeholder: '&::placeholder',\n  _placeholderHover: '&:hover::placeholder',\n  _placeholderFocus: '&:focus::placeholder'\n};\nvar internalStyles = {\n  border: 'none',\n  MozAppearance: 'none',\n  outline: 'none',\n  textDecoration: 'none',\n  WebkitAppearance: 'none',\n  WebkitFontSmoothing: 'antialiased',\n  minHeight: 80,\n  paddingX: 12,\n  paddingY: 8,\n  borderRadius: 4\n};\nvar Textarea = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Textarea(props, ref) {\n  var className = props.className,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$fontFamily = props.fontFamily,\n      fontFamily = _props$fontFamily === void 0 ? 'ui' : _props$fontFamily,\n      _props$grammarly = props.grammarly,\n      grammarly = _props$grammarly === void 0 ? false : _props$grammarly,\n      height = props.height,\n      _props$isInvalid = props.isInvalid,\n      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,\n      placeholder = props.placeholder,\n      required = props.required,\n      _props$spellCheck = props.spellCheck,\n      spellCheck = _props$spellCheck === void 0 ? true : _props$spellCheck,\n      _props$width = props.width,\n      width = _props$width === void 0 ? '100%' : _props$width,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var theme = useTheme();\n  var fontFamilies = theme.fontFamilies;\n  var themedFontFamily = fontFamilies[fontFamily] || fontFamily;\n\n  var _useStyleConfig = useStyleConfig('Input', {\n    appearance: 'default'\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    is: \"textarea\",\n    ref: ref,\n    className: cx(themedClassName, className),\n    width: width,\n    height: height,\n    required: required,\n    disabled: disabled,\n    placeholder: placeholder,\n    spellCheck: spellCheck,\n    \"aria-invalid\": isInvalid,\n    \"data-gramm_editor\": grammarly,\n    fontFamily: themedFontFamily\n  }, boxProps, restProps));\n}));\nTextarea.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {\n  /**\n   * Makes the textarea element required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Makes the textarea element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets visual styling of _only_ the text area to be \"invalid\".\n   * Note that this does not effect any `validationMessage`.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Use the native spell check functionality of the browser.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * Allow the Grammarly browser extension to attach to the backing textarea.\n   */\n  grammarly: PropTypes.bool,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The appearance of the TextInput.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The width of the TextInput.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default Textarea;","map":{"version":3,"sources":["../../../src/textarea/src/Textarea.js"],"names":["pseudoSelectors","_focus","_disabled","_invalid","_placeholder","_placeholderHover","_placeholderFocus","internalStyles","border","MozAppearance","outline","textDecoration","WebkitAppearance","WebkitFontSmoothing","minHeight","paddingX","paddingY","borderRadius","Textarea","memo","forwardRef","className","disabled","fontFamily","grammarly","height","isInvalid","placeholder","required","spellCheck","width","restProps","props","theme","useTheme","fontFamilies","themedFontFamily","themedClassName","boxProps","useStyleConfig","appearance","cx","dimensions","spacing","position","layout","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport Box, { spacing, dimensions, position, layout } from 'ui-box'\nimport { useStyleConfig } from '../../hooks'\nimport { useTheme } from '../../theme'\n\nconst pseudoSelectors = {\n  _focus: '&:focus',\n  _disabled: '&:disabled',\n  _invalid: '&[aria-invalid=\"true\"]:not(:focus)',\n  _placeholder: '&::placeholder',\n  _placeholderHover: '&:hover::placeholder',\n  _placeholderFocus: '&:focus::placeholder'\n}\n\nconst internalStyles = {\n  border: 'none',\n  MozAppearance: 'none',\n  outline: 'none',\n  textDecoration: 'none',\n  WebkitAppearance: 'none',\n  WebkitFontSmoothing: 'antialiased',\n  minHeight: 80,\n  paddingX: 12,\n  paddingY: 8,\n  borderRadius: 4\n}\n\nconst Textarea = memo(\n  forwardRef(function Textarea(props, ref) {\n    const {\n      className,\n      disabled = false,\n      fontFamily = 'ui',\n      grammarly = false,\n      height,\n      isInvalid = false,\n      placeholder,\n      required,\n      spellCheck = true,\n      width = '100%',\n      ...restProps\n    } = props\n\n    const theme = useTheme()\n    const { fontFamilies } = theme\n    const themedFontFamily = fontFamilies[fontFamily] || fontFamily\n\n    const { className: themedClassName, ...boxProps } = useStyleConfig(\n      'Input',\n      { appearance: 'default' },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    return (\n      <Box\n        is=\"textarea\"\n        ref={ref}\n        className={cx(themedClassName, className)}\n        width={width}\n        height={height}\n        required={required}\n        disabled={disabled}\n        placeholder={placeholder}\n        spellCheck={spellCheck}\n        aria-invalid={isInvalid}\n        data-gramm_editor={grammarly}\n        fontFamily={themedFontFamily}\n        {...boxProps}\n        {...restProps}\n      />\n    )\n  })\n)\n\nTextarea.propTypes = {\n  /**\n   * Composes the dimensions spec from the Box primitive.\n   */\n  ...dimensions.propTypes,\n\n  /**\n   * Composes the spacing spec from the Box primitive.\n   */\n  ...spacing.propTypes,\n\n  /**\n   * Composes the position spec from the Box primitive.\n   */\n  ...position.propTypes,\n\n  /**\n   * Composes the layout spec from the Box primitive.\n   */\n  ...layout.propTypes,\n\n  /**\n   * Makes the textarea element required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Makes the textarea element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets visual styling of _only_ the text area to be \"invalid\".\n   * Note that this does not effect any `validationMessage`.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Use the native spell check functionality of the browser.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * Allow the Grammarly browser extension to attach to the backing textarea.\n   */\n  grammarly: PropTypes.bool,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The appearance of the TextInput.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The width of the TextInput.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default Textarea\n"]},"metadata":{},"sourceType":"module"}