{"ast":null,"code":"/**\n * Truncates a string in the center with ellipsis, if needed\n * @param {string} value Value to truncate\n * @param {number | undefined} maximumChars Maximum number of characters (including the ellipsis) to show\n * @returns {string}\n */\nvar truncateCenter = function truncateCenter(value) {\n  var maximumChars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 55;\n  var length = value.length;\n\n  if (length <= maximumChars) {\n    return value;\n  }\n\n  var separator = '...';\n  var charsToShow = maximumChars - separator.length;\n  var startCharCount = Math.ceil(charsToShow / 2);\n  var endCharCount = Math.floor(charsToShow / 2);\n  return [value.substring(0, startCharCount), separator, value.substring(value.length - endCharCount)].join('');\n};\n\nexport default truncateCenter;","map":{"version":3,"sources":["../../../../src/file-uploader/src/utils/truncate-center.js"],"names":["truncateCenter","maximumChars","length","value","separator","charsToShow","startCharCount","Math","endCharCount"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAA,KAAA,EAA8B;AAAA,MAAtBC,YAAsB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,EAAO;AACnD,MAAQC,MAAR,GAAmBC,KAAnB,CAAA,MAAA;;AAEA,MAAID,MAAM,IAAV,YAAA,EAA4B;AAC1B,WAAA,KAAA;AACD;;AAED,MAAME,SAAS,GAAf,KAAA;AACA,MAAMC,WAAW,GAAGJ,YAAY,GAAGG,SAAS,CAA5C,MAAA;AACA,MAAME,cAAc,GAAGC,IAAI,CAAJA,IAAAA,CAAUF,WAAW,GAA5C,CAAuBE,CAAvB;AACA,MAAMC,YAAY,GAAGD,IAAI,CAAJA,KAAAA,CAAWF,WAAW,GAA3C,CAAqBE,CAArB;AAEA,SAAO,CAACJ,KAAK,CAALA,SAAAA,CAAAA,CAAAA,EAAD,cAACA,CAAD,EAAA,SAAA,EAAgDA,KAAK,CAALA,SAAAA,CAAgBA,KAAK,CAALA,MAAAA,GAAhE,YAAgDA,CAAhD,EAAA,IAAA,CAAP,EAAO,CAAP;AAZF,CAAA;;AAeA,eAAA,cAAA","sourcesContent":["/**\n * Truncates a string in the center with ellipsis, if needed\n * @param {string} value Value to truncate\n * @param {number | undefined} maximumChars Maximum number of characters (including the ellipsis) to show\n * @returns {string}\n */\nconst truncateCenter = (value, maximumChars = 55) => {\n  const { length } = value\n\n  if (length <= maximumChars) {\n    return value\n  }\n\n  const separator = '...'\n  const charsToShow = maximumChars - separator.length\n  const startCharCount = Math.ceil(charsToShow / 2)\n  const endCharCount = Math.floor(charsToShow / 2)\n\n  return [value.substring(0, startCharCount), separator, value.substring(value.length - endCharCount)].join('')\n}\n\nexport default truncateCenter\n"]},"metadata":{},"sourceType":"module"}