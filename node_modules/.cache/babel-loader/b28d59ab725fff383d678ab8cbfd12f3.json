{"ast":null,"code":"import React, { useContext, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { StackingOrder } from '../../constants';\nimport StackingContext from './StackingContext';\nvar Stack = /*#__PURE__*/memo(function Stack(_ref) {\n  var children = _ref.children,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? StackingOrder.STACKING_CONTEXT : _ref$value;\n  var previousValue = useContext(StackingContext);\n  var currentValue = Math.max(value, previousValue);\n  var nextValue = currentValue + 1;\n  return /*#__PURE__*/React.createElement(StackingContext.Provider, {\n    value: nextValue\n  }, children(currentValue));\n});\nStack.propTypes = {\n  /**\n   * Function that takes the current z-index and returns a React Node.\n   * (zIndex) => ReactNode.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Set the value of the stack. This will increment for children.\n   */\n  value: PropTypes.number\n};\nexport default Stack;","map":{"version":3,"sources":["../../../src/stack/src/Stack.js"],"names":["Stack","memo","children","value","StackingOrder","STACKING_CONTEXT","previousValue","useContext","currentValue","Math","nextValue","PropTypes","number"],"mappings":"AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,aAAA,QAAA,iBAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AAEA,IAAMA,KAAK,GAAA,aAAGC,IAAI,CAAC,SAAA,KAAA,CAAA,IAAA,EAAqE;AAAA,MAApDC,QAAoD,GAAA,IAAA,CAApDA,QAAoD;AAAA,MAAA,UAAA,GAAA,IAAA,CAA1CC,KAA0C;AAAA,MAA1CA,KAA0C,GAAA,UAAA,KAAA,KAAA,CAAA,GAAlCC,aAAa,CAACC,gBAAoB,GAAA,UAAA;AACtF,MAAMC,aAAa,GAAGC,UAAU,CAAhC,eAAgC,CAAhC;AACA,MAAMC,YAAY,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAArB,aAAqBA,CAArB;AACA,MAAMC,SAAS,GAAGF,YAAY,GAA9B,CAAA;AAEA,SAAA,aAAO,KAAA,CAAA,aAAA,CAAC,eAAD,CAAA,QAAA,EAAA;AAA0B,IAAA,KAAK,EAAEE;AAAjC,GAAA,EAA6CR,QAAQ,CAA5D,YAA4D,CAArD,CAAP;AALF,CAAkB,CAAlB;AAQAF,KAAK,CAALA,SAAAA,GAAkB;AAChB;AACF;AACA;AACA;AACEE,EAAAA,QAAQ,EAAES,SAAS,CAATA,IAAAA,CALM,UAAA;;AAOhB;AACF;AACA;AACER,EAAAA,KAAK,EAAEQ,SAAS,CAACC;AAVD,CAAlBZ;AAaA,eAAA,KAAA","sourcesContent":["import React, { useContext, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { StackingOrder } from '../../constants'\nimport StackingContext from './StackingContext'\n\nconst Stack = memo(function Stack({ children, value = StackingOrder.STACKING_CONTEXT }) {\n  const previousValue = useContext(StackingContext)\n  const currentValue = Math.max(value, previousValue)\n  const nextValue = currentValue + 1\n\n  return <StackingContext.Provider value={nextValue}>{children(currentValue)}</StackingContext.Provider>\n})\n\nStack.propTypes = {\n  /**\n   * Function that takes the current z-index and returns a React Node.\n   * (zIndex) => ReactNode.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Set the value of the stack. This will increment for children.\n   */\n  value: PropTypes.number\n}\n\nexport default Stack\n"]},"metadata":{},"sourceType":"module"}