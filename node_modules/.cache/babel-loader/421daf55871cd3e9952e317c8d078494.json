{"ast":null,"code":"import { useCallback } from 'react';\nimport safeInvoke from '../lib/safe-invoke';\nimport { useLatest } from './use-latest';\n/**\n * React hook that returns bind props for a clickable component.\n * When the component has focus, Enter and space activate it\n */\n\nexport function useClickable() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      onKeyDownHandler = _ref.onKeyDown,\n      _ref$tabIndex = _ref.tabIndex,\n      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex;\n\n  var onKeyDownRef = useLatest(onKeyDownHandler);\n  var onKeyDown = useCallback(function (event) {\n    safeInvoke(onKeyDownRef.current, event);\n    if (event.defaultPrevented) return;\n    if (disabled) return;\n    if (event.metaKey) return;\n    if (event.target !== event.currentTarget) return;\n\n    if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {\n      // \"Spacebar\" for IE11 support\n      // Prevent the default action to stop scrolling when space is pressed\n      event.preventDefault();\n      event.currentTarget.click();\n    }\n  }, // onKeyDownRef is a ref, but eslint can't figure that out\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disabled]);\n  return {\n    // TODO import useFocusable as well (needs to be focusable)\n    tabIndex: disabled ? -1 : tabIndex,\n    onKeyDown: onKeyDown\n  };\n}","map":{"version":3,"sources":["../../src/hooks/use-clickable.js"],"names":["disabled","onKeyDown","onKeyDownHandler","tabIndex","onKeyDownRef","useLatest","useCallback","safeInvoke","event"],"mappings":"AAAA,SAAA,WAAA,QAAA,OAAA;AACA,OAAA,UAAA,MAAA,oBAAA;AACA,SAAA,SAAA,QAAA,cAAA;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAAA,YAAA,GAA4F;AAAA,MAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,MAAA,aAAA,GAAA,IAAA,CAApEA,QAAoE;AAAA,MAApEA,QAAoE,GAAA,aAAA,KAAA,KAAA,CAAA,GAAzD,KAAyD,GAAA,aAAA;AAAA,MAAvCE,gBAAuC,GAAA,IAAA,CAAlDD,SAAkD;AAAA,MAAA,aAAA,GAAA,IAAA,CAArBE,QAAqB;AAAA,MAArBA,QAAqB,GAAA,aAAA,KAAA,KAAA,CAAA,GAAV,CAAU,GAAA,aAAA;;AACjG,MAAMC,YAAY,GAAGC,SAAS,CAA9B,gBAA8B,CAA9B;AAEA,MAAMJ,SAAS,GAAGK,WAAW,CAC3B,UAAA,KAAA,EAAS;AACPC,IAAAA,UAAU,CAACH,YAAY,CAAb,OAAA,EAAVG,KAAU,CAAVA;AAEA,QAAIC,KAAK,CAAT,gBAAA,EAA4B;AAC5B,QAAA,QAAA,EAAc;AACd,QAAIA,KAAK,CAAT,OAAA,EAAmB;AACnB,QAAIA,KAAK,CAALA,MAAAA,KAAiBA,KAAK,CAA1B,aAAA,EAA0C;;AAE1C,QAAIA,KAAK,CAALA,GAAAA,KAAAA,OAAAA,IAAyBA,KAAK,CAALA,GAAAA,KAAzBA,GAAAA,IAA8CA,KAAK,CAALA,GAAAA,KAAlD,UAAA,EAA4E;AAC1E;AACA;AACAA,MAAAA,KAAK,CAALA,cAAAA;AACAA,MAAAA,KAAK,CAALA,aAAAA,CAAAA,KAAAA;AACD;AAdwB,GAAA,EAgB3B;AACA;AACA,GAlBF,QAkBE,CAlB2B,CAA7B;AAqBA,SAAO;AACL;AACAL,IAAAA,QAAQ,EAAEH,QAAQ,GAAG,CAAH,CAAA,GAFb,QAAA;AAGLC,IAAAA,SAAS,EAATA;AAHK,GAAP;AAKD","sourcesContent":["import { useCallback } from 'react'\nimport safeInvoke from '../lib/safe-invoke'\nimport { useLatest } from './use-latest'\n\n/**\n * React hook that returns bind props for a clickable component.\n * When the component has focus, Enter and space activate it\n */\nexport function useClickable({ disabled = false, onKeyDown: onKeyDownHandler, tabIndex = 0 } = {}) {\n  const onKeyDownRef = useLatest(onKeyDownHandler)\n\n  const onKeyDown = useCallback(\n    event => {\n      safeInvoke(onKeyDownRef.current, event)\n\n      if (event.defaultPrevented) return\n      if (disabled) return\n      if (event.metaKey) return\n      if (event.target !== event.currentTarget) return\n\n      if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {\n        // \"Spacebar\" for IE11 support\n        // Prevent the default action to stop scrolling when space is pressed\n        event.preventDefault()\n        event.currentTarget.click()\n      }\n    },\n    // onKeyDownRef is a ref, but eslint can't figure that out\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [disabled]\n  )\n\n  return {\n    // TODO import useFocusable as well (needs to be focusable)\n    tabIndex: disabled ? -1 : tabIndex,\n    onKeyDown\n  }\n}\n"]},"metadata":{},"sourceType":"module"}